; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	C:\Users\theclashingfritz\source\repos\INIFileParser\zlib\adler32.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

EXTRN	__alldiv:PROC
; Function compile flags: /Ogtp
; File c:\users\theclashingfritz\source\repos\inifileparser\zlib\adler32.c
;	COMDAT _adler32_combine_
_TEXT	SEGMENT
_len2$ = 8						; size = 8
_sum1$ = 12						; size = 4
_adler32_combine_ PROC					; COMDAT
; _adler1$ = ecx
; _adler2$ = eax

; 147  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	8b d8		 mov	 ebx, eax

; 148  :     unsigned long sum1;
; 149  :     unsigned long sum2;
; 150  :     unsigned rem;
; 151  : 
; 152  :     /* for negative len, return invalid adler32 as a clue for debugging */
; 153  :     if (len2 < 0)

  00007	8b 45 0c	 mov	 eax, DWORD PTR _len2$[ebp+4]
  0000a	57		 push	 edi
  0000b	8b 7d 08	 mov	 edi, DWORD PTR _len2$[ebp]
  0000e	8b f1		 mov	 esi, ecx
  00010	85 c0		 test	 eax, eax
  00012	7f 0e		 jg	 SHORT $LN5@adler32_co
  00014	7c 04		 jl	 SHORT $LN8@adler32_co
  00016	85 ff		 test	 edi, edi
  00018	73 08		 jae	 SHORT $LN5@adler32_co
$LN8@adler32_co:
  0001a	5f		 pop	 edi
  0001b	5e		 pop	 esi

; 154  :         return 0xffffffffUL;

  0001c	83 c8 ff	 or	 eax, -1
  0001f	5b		 pop	 ebx

; 169  : }

  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
$LN5@adler32_co:

; 155  : 
; 156  :     /* the derivation of this formula is left as an exercise for the reader */
; 157  :     MOD63(len2);                /* assumes len2 >= 0 */

  00022	6a 00		 push	 0
  00024	68 f1 ff 00 00	 push	 65521			; 0000fff1H
  00029	50		 push	 eax
  0002a	57		 push	 edi
  0002b	e8 00 00 00 00	 call	 __alldiv
  00030	69 c0 f1 ff 00
	00		 imul	 eax, 65521		; 0000fff1H
  00036	2b f8		 sub	 edi, eax

; 158  :     rem = (unsigned)len2;
; 159  :     sum1 = adler1 & 0xffff;

  00038	0f b7 c6	 movzx	 eax, si

; 160  :     sum2 = rem * sum1;

  0003b	8b c8		 mov	 ecx, eax
  0003d	0f af cf	 imul	 ecx, edi

; 161  :     MOD(sum2);
; 162  :     sum1 += (adler2 & 0xffff) + BASE - 1;

  00040	0f b7 d3	 movzx	 edx, bx
  00043	8d 84 10 f0 ff
	00 00		 lea	 eax, DWORD PTR [eax+edx+65520]
  0004a	89 45 0c	 mov	 DWORD PTR _sum1$[ebp], eax
  0004d	b8 71 80 07 80	 mov	 eax, -2146992015	; 80078071H
  00052	f7 e1		 mul	 ecx
  00054	c1 ea 0f	 shr	 edx, 15			; 0000000fH

; 163  :     sum2 += ((adler1 >> 16) & 0xffff) + ((adler2 >> 16) & 0xffff) + BASE - rem;

  00057	69 d2 f1 ff 00
	00		 imul	 edx, 65521		; 0000fff1H
  0005d	c1 ee 10	 shr	 esi, 16			; 00000010H
  00060	2b f2		 sub	 esi, edx

; 164  :     if (sum1 >= BASE) sum1 -= BASE;

  00062	8b 55 0c	 mov	 edx, DWORD PTR _sum1$[ebp]
  00065	c1 eb 10	 shr	 ebx, 16			; 00000010H
  00068	03 f3		 add	 esi, ebx
  0006a	2b f7		 sub	 esi, edi
  0006c	8d 8c 31 f1 ff
	00 00		 lea	 ecx, DWORD PTR [ecx+esi+65521]
  00073	81 fa f1 ff 00
	00		 cmp	 edx, 65521		; 0000fff1H
  00079	72 14		 jb	 SHORT $LN3@adler32_co
  0007b	81 ea f1 ff 00
	00		 sub	 edx, 65521		; 0000fff1H

; 165  :     if (sum1 >= BASE) sum1 -= BASE;

  00081	81 fa f1 ff 00
	00		 cmp	 edx, 65521		; 0000fff1H
  00087	72 06		 jb	 SHORT $LN3@adler32_co
  00089	81 ea f1 ff 00
	00		 sub	 edx, 65521		; 0000fff1H
$LN3@adler32_co:

; 166  :     if (sum2 >= ((unsigned long)BASE << 1)) sum2 -= ((unsigned long)BASE << 1);

  0008f	81 f9 e2 ff 01
	00		 cmp	 ecx, 131042		; 0001ffe2H
  00095	72 06		 jb	 SHORT $LN2@adler32_co
  00097	81 e9 e2 ff 01
	00		 sub	 ecx, 131042		; 0001ffe2H
$LN2@adler32_co:

; 167  :     if (sum2 >= BASE) sum2 -= BASE;

  0009d	81 f9 f1 ff 00
	00		 cmp	 ecx, 65521		; 0000fff1H
  000a3	72 06		 jb	 SHORT $LN1@adler32_co
  000a5	81 e9 f1 ff 00
	00		 sub	 ecx, 65521		; 0000fff1H
$LN1@adler32_co:
  000ab	5f		 pop	 edi

; 168  :     return sum1 | (sum2 << 16);

  000ac	8b c1		 mov	 eax, ecx
  000ae	c1 e0 10	 shl	 eax, 16			; 00000010H
  000b1	5e		 pop	 esi
  000b2	0b c2		 or	 eax, edx
  000b4	5b		 pop	 ebx

; 169  : }

  000b5	5d		 pop	 ebp
  000b6	c3		 ret	 0
_adler32_combine_ ENDP
_TEXT	ENDS
PUBLIC	_adler32_z
; Function compile flags: /Ogtp
;	COMDAT _adler32_z
_TEXT	SEGMENT
tv884 = 8						; size = 4
_adler$ = 8						; size = 4
_buf$ = 12						; size = 4
_len$ = 16						; size = 4
_adler32_z PROC						; COMDAT

; 67   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 68   :     unsigned long sum2;
; 69   :     unsigned n;
; 70   : 
; 71   :     /* split Adler-32 into component sums */
; 72   :     sum2 = (adler >> 16) & 0xffff;

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _adler$[ebp]
  00006	53		 push	 ebx

; 73   :     adler &= 0xffff;
; 74   : 
; 75   :     /* in case user likes doing a byte at a time, keep it fast */
; 76   :     if (len == 1) {

  00007	8b 5d 10	 mov	 ebx, DWORD PTR _len$[ebp]
  0000a	57		 push	 edi
  0000b	8b f9		 mov	 edi, ecx
  0000d	c1 ef 10	 shr	 edi, 16			; 00000010H
  00010	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  00016	83 fb 01	 cmp	 ebx, 1
  00019	75 31		 jne	 SHORT $LN18@adler32_z

; 77   :         adler += buf[0];

  0001b	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  0001e	0f b6 10	 movzx	 edx, BYTE PTR [eax]
  00021	03 ca		 add	 ecx, edx

; 78   :         if (adler >= BASE)

  00023	81 f9 f1 ff 00
	00		 cmp	 ecx, 65521		; 0000fff1H
  00029	72 06		 jb	 SHORT $LN17@adler32_z

; 79   :             adler -= BASE;

  0002b	81 e9 f1 ff 00
	00		 sub	 ecx, 65521		; 0000fff1H
$LN17@adler32_z:

; 80   :         sum2 += adler;

  00031	03 f9		 add	 edi, ecx

; 81   :         if (sum2 >= BASE)

  00033	81 ff f1 ff 00
	00		 cmp	 edi, 65521		; 0000fff1H
  00039	72 06		 jb	 SHORT $LN16@adler32_z

; 82   :             sum2 -= BASE;

  0003b	81 ef f1 ff 00
	00		 sub	 edi, 65521		; 0000fff1H
$LN16@adler32_z:

; 83   :         return adler | (sum2 << 16);

  00041	8b c7		 mov	 eax, edi
  00043	c1 e0 10	 shl	 eax, 16			; 00000010H
  00046	5f		 pop	 edi
  00047	0b c1		 or	 eax, ecx
  00049	5b		 pop	 ebx

; 131  : }

  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
$LN18@adler32_z:
  0004c	56		 push	 esi

; 84   :     }
; 85   : 
; 86   :     /* initial Adler-32 value (deferred check for len == 1 speed) */
; 87   :     if (buf == Z_NULL)

  0004d	8b 75 0c	 mov	 esi, DWORD PTR _buf$[ebp]
  00050	85 f6		 test	 esi, esi
  00052	75 08		 jne	 SHORT $LN15@adler32_z

; 88   :         return 1L;

  00054	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
  00057	5e		 pop	 esi
  00058	5f		 pop	 edi
  00059	5b		 pop	 ebx

; 131  : }

  0005a	5d		 pop	 ebp
  0005b	c3		 ret	 0
$LN15@adler32_z:

; 89   : 
; 90   :     /* in case short lengths are provided, keep it somewhat fast */
; 91   :     if (len < 16) {

  0005c	83 fb 10	 cmp	 ebx, 16			; 00000010H
  0005f	73 3a		 jae	 SHORT $LN22@adler32_z

; 92   :         while (len--) {

  00061	85 db		 test	 ebx, ebx
  00063	74 0b		 je	 SHORT $LN26@adler32_z
$LL13@adler32_z:

; 93   :             adler += *buf++;

  00065	0f b6 06	 movzx	 eax, BYTE PTR [esi]
  00068	03 c8		 add	 ecx, eax
  0006a	46		 inc	 esi

; 94   :             sum2 += adler;

  0006b	03 f9		 add	 edi, ecx
  0006d	4b		 dec	 ebx
  0006e	75 f5		 jne	 SHORT $LL13@adler32_z
$LN26@adler32_z:

; 95   :         }
; 96   :         if (adler >= BASE)

  00070	81 f9 f1 ff 00
	00		 cmp	 ecx, 65521		; 0000fff1H
  00076	72 06		 jb	 SHORT $LN11@adler32_z

; 97   :             adler -= BASE;

  00078	81 e9 f1 ff 00
	00		 sub	 ecx, 65521		; 0000fff1H
$LN11@adler32_z:

; 98   :         MOD28(sum2);            /* only added so many BASE's */

  0007e	b8 71 80 07 80	 mov	 eax, -2146992015	; 80078071H
  00083	f7 e7		 mul	 edi
  00085	c1 ea 0f	 shr	 edx, 15			; 0000000fH

; 99   :         return adler | (sum2 << 16);

  00088	8b c2		 mov	 eax, edx
  0008a	c1 e0 04	 shl	 eax, 4
  0008d	2b c2		 sub	 eax, edx
  0008f	03 c7		 add	 eax, edi
  00091	5e		 pop	 esi

; 127  :     }
; 128  : 
; 129  :     /* return recombined sums */
; 130  :     return adler | (sum2 << 16);

  00092	c1 e0 10	 shl	 eax, 16			; 00000010H
  00095	5f		 pop	 edi
  00096	0b c1		 or	 eax, ecx
  00098	5b		 pop	 ebx

; 131  : }

  00099	5d		 pop	 ebp
  0009a	c3		 ret	 0
$LN22@adler32_z:

; 100  :     }
; 101  : 
; 102  :     /* do length NMAX blocks -- requires just one modulo operation */
; 103  :     while (len >= NMAX) {

  0009b	81 fb b0 15 00
	00		 cmp	 ebx, 5552		; 000015b0H
  000a1	0f 82 df 00 00
	00		 jb	 $LN9@adler32_z
  000a7	b8 af a9 6e 5e	 mov	 eax, 1584310703		; 5e6ea9afH
  000ac	f7 e3		 mul	 ebx
  000ae	c1 ea 0b	 shr	 edx, 11			; 0000000bH
  000b1	89 55 08	 mov	 DWORD PTR tv884[ebp], edx
  000b4	eb 0a 8d a4 24
	00 00 00 00 8d
	49 00		 npad	 12
$LL10@adler32_z:

; 104  :         len -= NMAX;

  000c0	81 eb b0 15 00
	00		 sub	 ebx, 5552		; 000015b0H

; 105  :         n = NMAX / 16;          /* NMAX is divisible by 16 */

  000c6	b8 5b 01 00 00	 mov	 eax, 347		; 0000015bH
  000cb	eb 03 8d 49 00	 npad	 5
$LL8@adler32_z:

; 106  :         do {
; 107  :             DO16(buf);          /* 16 sums unrolled */

  000d0	0f b6 16	 movzx	 edx, BYTE PTR [esi]
  000d3	03 ca		 add	 ecx, edx
  000d5	0f b6 56 01	 movzx	 edx, BYTE PTR [esi+1]
  000d9	03 f9		 add	 edi, ecx
  000db	03 ca		 add	 ecx, edx
  000dd	0f b6 56 02	 movzx	 edx, BYTE PTR [esi+2]
  000e1	03 f9		 add	 edi, ecx
  000e3	03 ca		 add	 ecx, edx
  000e5	0f b6 56 03	 movzx	 edx, BYTE PTR [esi+3]
  000e9	03 f9		 add	 edi, ecx
  000eb	03 ca		 add	 ecx, edx
  000ed	0f b6 56 04	 movzx	 edx, BYTE PTR [esi+4]
  000f1	03 f9		 add	 edi, ecx
  000f3	03 ca		 add	 ecx, edx
  000f5	0f b6 56 05	 movzx	 edx, BYTE PTR [esi+5]
  000f9	03 f9		 add	 edi, ecx
  000fb	03 ca		 add	 ecx, edx
  000fd	0f b6 56 06	 movzx	 edx, BYTE PTR [esi+6]
  00101	03 f9		 add	 edi, ecx
  00103	03 ca		 add	 ecx, edx
  00105	0f b6 56 07	 movzx	 edx, BYTE PTR [esi+7]
  00109	03 f9		 add	 edi, ecx
  0010b	03 ca		 add	 ecx, edx
  0010d	0f b6 56 08	 movzx	 edx, BYTE PTR [esi+8]
  00111	03 f9		 add	 edi, ecx
  00113	03 ca		 add	 ecx, edx
  00115	0f b6 56 09	 movzx	 edx, BYTE PTR [esi+9]
  00119	03 f9		 add	 edi, ecx
  0011b	03 ca		 add	 ecx, edx
  0011d	0f b6 56 0a	 movzx	 edx, BYTE PTR [esi+10]
  00121	03 f9		 add	 edi, ecx
  00123	03 ca		 add	 ecx, edx
  00125	0f b6 56 0b	 movzx	 edx, BYTE PTR [esi+11]
  00129	03 f9		 add	 edi, ecx
  0012b	03 ca		 add	 ecx, edx
  0012d	0f b6 56 0c	 movzx	 edx, BYTE PTR [esi+12]
  00131	03 f9		 add	 edi, ecx
  00133	03 ca		 add	 ecx, edx
  00135	0f b6 56 0d	 movzx	 edx, BYTE PTR [esi+13]
  00139	03 f9		 add	 edi, ecx
  0013b	03 ca		 add	 ecx, edx
  0013d	0f b6 56 0e	 movzx	 edx, BYTE PTR [esi+14]
  00141	03 f9		 add	 edi, ecx
  00143	03 ca		 add	 ecx, edx
  00145	0f b6 56 0f	 movzx	 edx, BYTE PTR [esi+15]
  00149	03 f9		 add	 edi, ecx
  0014b	03 ca		 add	 ecx, edx
  0014d	03 f9		 add	 edi, ecx

; 108  :             buf += 16;

  0014f	83 c6 10	 add	 esi, 16			; 00000010H

; 109  :         } while (--n);

  00152	48		 dec	 eax
  00153	0f 85 77 ff ff
	ff		 jne	 $LL8@adler32_z

; 110  :         MOD(adler);

  00159	b8 71 80 07 80	 mov	 eax, -2146992015	; 80078071H
  0015e	f7 e1		 mul	 ecx
  00160	c1 ea 0f	 shr	 edx, 15			; 0000000fH
  00163	69 d2 0f 00 ff
	ff		 imul	 edx, -65521		; ffff000fH
  00169	03 ca		 add	 ecx, edx

; 111  :         MOD(sum2);

  0016b	b8 71 80 07 80	 mov	 eax, -2146992015	; 80078071H
  00170	f7 e7		 mul	 edi
  00172	c1 ea 0f	 shr	 edx, 15			; 0000000fH
  00175	69 d2 0f 00 ff
	ff		 imul	 edx, -65521		; ffff000fH
  0017b	03 fa		 add	 edi, edx
  0017d	ff 4d 08	 dec	 DWORD PTR tv884[ebp]
  00180	0f 85 3a ff ff
	ff		 jne	 $LL10@adler32_z
$LN9@adler32_z:

; 112  :     }
; 113  : 
; 114  :     /* do remaining bytes (less than NMAX, still just one modulo) */
; 115  :     if (len) {                  /* avoid modulos if none remaining */

  00186	85 db		 test	 ebx, ebx
  00188	0f 84 d1 00 00
	00		 je	 $LN5@adler32_z

; 116  :         while (len >= 16) {

  0018e	83 fb 10	 cmp	 ebx, 16			; 00000010H
  00191	0f 82 95 00 00
	00		 jb	 $LN32@adler32_z
  00197	8b c3		 mov	 eax, ebx
  00199	c1 e8 04	 shr	 eax, 4
  0019c	8d 64 24 00	 npad	 4
$LL4@adler32_z:

; 117  :             len -= 16;
; 118  :             DO16(buf);

  001a0	0f b6 16	 movzx	 edx, BYTE PTR [esi]
  001a3	03 ca		 add	 ecx, edx
  001a5	0f b6 56 01	 movzx	 edx, BYTE PTR [esi+1]
  001a9	03 f9		 add	 edi, ecx
  001ab	03 ca		 add	 ecx, edx
  001ad	0f b6 56 02	 movzx	 edx, BYTE PTR [esi+2]
  001b1	03 f9		 add	 edi, ecx
  001b3	03 ca		 add	 ecx, edx
  001b5	0f b6 56 03	 movzx	 edx, BYTE PTR [esi+3]
  001b9	03 f9		 add	 edi, ecx
  001bb	03 ca		 add	 ecx, edx
  001bd	0f b6 56 04	 movzx	 edx, BYTE PTR [esi+4]
  001c1	03 f9		 add	 edi, ecx
  001c3	03 ca		 add	 ecx, edx
  001c5	0f b6 56 05	 movzx	 edx, BYTE PTR [esi+5]
  001c9	03 f9		 add	 edi, ecx
  001cb	03 ca		 add	 ecx, edx
  001cd	0f b6 56 06	 movzx	 edx, BYTE PTR [esi+6]
  001d1	03 f9		 add	 edi, ecx
  001d3	03 ca		 add	 ecx, edx
  001d5	0f b6 56 07	 movzx	 edx, BYTE PTR [esi+7]
  001d9	03 f9		 add	 edi, ecx
  001db	03 ca		 add	 ecx, edx
  001dd	0f b6 56 08	 movzx	 edx, BYTE PTR [esi+8]
  001e1	03 f9		 add	 edi, ecx
  001e3	03 ca		 add	 ecx, edx
  001e5	0f b6 56 09	 movzx	 edx, BYTE PTR [esi+9]
  001e9	03 f9		 add	 edi, ecx
  001eb	03 ca		 add	 ecx, edx
  001ed	0f b6 56 0a	 movzx	 edx, BYTE PTR [esi+10]
  001f1	03 f9		 add	 edi, ecx
  001f3	03 ca		 add	 ecx, edx
  001f5	0f b6 56 0b	 movzx	 edx, BYTE PTR [esi+11]
  001f9	03 f9		 add	 edi, ecx
  001fb	03 ca		 add	 ecx, edx
  001fd	0f b6 56 0c	 movzx	 edx, BYTE PTR [esi+12]
  00201	03 f9		 add	 edi, ecx
  00203	03 ca		 add	 ecx, edx
  00205	0f b6 56 0d	 movzx	 edx, BYTE PTR [esi+13]
  00209	03 f9		 add	 edi, ecx
  0020b	03 ca		 add	 ecx, edx
  0020d	0f b6 56 0e	 movzx	 edx, BYTE PTR [esi+14]
  00211	03 f9		 add	 edi, ecx
  00213	03 ca		 add	 ecx, edx
  00215	0f b6 56 0f	 movzx	 edx, BYTE PTR [esi+15]
  00219	03 f9		 add	 edi, ecx
  0021b	03 ca		 add	 ecx, edx
  0021d	83 eb 10	 sub	 ebx, 16			; 00000010H
  00220	03 f9		 add	 edi, ecx

; 119  :             buf += 16;

  00222	83 c6 10	 add	 esi, 16			; 00000010H
  00225	48		 dec	 eax
  00226	0f 85 74 ff ff
	ff		 jne	 $LL4@adler32_z
$LN32@adler32_z:

; 120  :         }
; 121  :         while (len--) {

  0022c	85 db		 test	 ebx, ebx
  0022e	74 0b		 je	 SHORT $LN30@adler32_z
$LL2@adler32_z:

; 122  :             adler += *buf++;

  00230	0f b6 06	 movzx	 eax, BYTE PTR [esi]
  00233	03 c8		 add	 ecx, eax
  00235	46		 inc	 esi

; 123  :             sum2 += adler;

  00236	03 f9		 add	 edi, ecx
  00238	4b		 dec	 ebx
  00239	75 f5		 jne	 SHORT $LL2@adler32_z
$LN30@adler32_z:

; 124  :         }
; 125  :         MOD(adler);

  0023b	b8 71 80 07 80	 mov	 eax, -2146992015	; 80078071H
  00240	f7 e1		 mul	 ecx
  00242	c1 ea 0f	 shr	 edx, 15			; 0000000fH
  00245	69 d2 0f 00 ff
	ff		 imul	 edx, -65521		; ffff000fH
  0024b	03 ca		 add	 ecx, edx

; 126  :         MOD(sum2);

  0024d	b8 71 80 07 80	 mov	 eax, -2146992015	; 80078071H
  00252	f7 e7		 mul	 edi
  00254	c1 ea 0f	 shr	 edx, 15			; 0000000fH
  00257	69 d2 0f 00 ff
	ff		 imul	 edx, -65521		; ffff000fH
  0025d	03 fa		 add	 edi, edx
$LN5@adler32_z:

; 127  :     }
; 128  : 
; 129  :     /* return recombined sums */
; 130  :     return adler | (sum2 << 16);

  0025f	8b c7		 mov	 eax, edi
  00261	5e		 pop	 esi
  00262	c1 e0 10	 shl	 eax, 16			; 00000010H
  00265	5f		 pop	 edi
  00266	0b c1		 or	 eax, ecx
  00268	5b		 pop	 ebx

; 131  : }

  00269	5d		 pop	 ebp
  0026a	c3		 ret	 0
_adler32_z ENDP
PUBLIC	_adler32_combine
; Function compile flags: /Ogtp
;	COMDAT _adler32_combine
_TEXT	SEGMENT
_adler1$ = 8						; size = 4
_adler2$ = 12						; size = 4
_len2$ = 16						; size = 4
_adler32_combine PROC					; COMDAT

; 176  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 177  :     return adler32_combine_(adler1, adler2, len2);

  00003	8b 45 10	 mov	 eax, DWORD PTR _len2$[ebp]
  00006	8b 4d 08	 mov	 ecx, DWORD PTR _adler1$[ebp]
  00009	99		 cdq
  0000a	52		 push	 edx
  0000b	50		 push	 eax
  0000c	8b 45 0c	 mov	 eax, DWORD PTR _adler2$[ebp]
  0000f	e8 00 00 00 00	 call	 _adler32_combine_
  00014	83 c4 08	 add	 esp, 8

; 178  : }

  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
_adler32_combine ENDP
_TEXT	ENDS
PUBLIC	_adler32
; Function compile flags: /Ogtp
;	COMDAT _adler32
_TEXT	SEGMENT
_adler$ = 8						; size = 4
_buf$ = 12						; size = 4
_len$ = 16						; size = 4
_adler32 PROC						; COMDAT

; 138  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 140  : }

  00003	5d		 pop	 ebp

; 139  :     return adler32_z(adler, buf, len);

  00004	e9 00 00 00 00	 jmp	 _adler32_z
_adler32 ENDP
END
