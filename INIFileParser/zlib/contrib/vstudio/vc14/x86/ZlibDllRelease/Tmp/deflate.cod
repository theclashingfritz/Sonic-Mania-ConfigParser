; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	C:\Users\theclashingfritz\source\repos\INIFileParser\zlib\deflate.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	_deflate_copyright
	ORG $+2
_deflate_copyright DB ' deflate 1.2.11 Copyright 1995-2017 Jean-loup Gail'
	DB	'ly and Mark Adler ', 00H
	ORG $+3
_configuration_table DW 00H
	DW	00H
	DW	00H
	DW	00H
	DD	FLAT:_deflate_stored
	DW	04H
	DW	04H
	DW	08H
	DW	04H
	DD	FLAT:_deflate_fast
	DW	04H
	DW	05H
	DW	010H
	DW	08H
	DD	FLAT:_deflate_fast
	DW	04H
	DW	06H
	DW	020H
	DW	020H
	DD	FLAT:_deflate_fast
	DW	04H
	DW	04H
	DW	010H
	DW	010H
	DD	FLAT:_deflate_slow
	DW	08H
	DW	010H
	DW	020H
	DW	020H
	DD	FLAT:_deflate_slow
	DW	08H
	DW	010H
	DW	080H
	DW	080H
	DD	FLAT:_deflate_slow
	DW	08H
	DW	020H
	DW	080H
	DW	0100H
	DD	FLAT:_deflate_slow
	DW	020H
	DW	080H
	DW	0102H
	DW	0400H
	DD	FLAT:_deflate_slow
	DW	020H
	DW	0102H
	DW	0102H
	DW	01000H
	DD	FLAT:_deflate_slow
?my_version@?1??deflateInit2_@@9@9 DB '1.2.11', 00H	; `deflateInit2_'::`2'::my_version
; Function compile flags: /Ogtp
; File c:\users\theclashingfritz\source\repos\inifileparser\zlib\deflate.c
;	COMDAT _longest_match
_TEXT	SEGMENT
tv299 = -20						; size = 4
_limit$ = -16						; size = 4
_nice_match$ = -12					; size = 4
_chain_length$ = -8					; size = 4
_scan_end$ = -2						; size = 1
_scan_end1$ = -1					; size = 1
_cur_match$ = 8						; size = 4
_longest_match PROC					; COMDAT
; _s$ = edi

; 1239 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H

; 1240 :     unsigned chain_length = s->max_chain_length;/* max hash chain length */
; 1241 :     register Bytef *scan = s->window + s->strstart; /* current string */

  00006	8b 57 6c	 mov	 edx, DWORD PTR [edi+108]
  00009	8b 47 7c	 mov	 eax, DWORD PTR [edi+124]
  0000c	8b 4f 38	 mov	 ecx, DWORD PTR [edi+56]
  0000f	53		 push	 ebx
  00010	56		 push	 esi

; 1242 :     register Bytef *match;                      /* matched string */
; 1243 :     register int len;                           /* length of current match */
; 1244 :     int best_len = (int)s->prev_length;         /* best match length so far */
; 1245 :     int nice_match = s->nice_match;             /* stop if match long enough */

  00011	8b b7 90 00 00
	00		 mov	 esi, DWORD PTR [edi+144]
  00017	89 75 f4	 mov	 DWORD PTR _nice_match$[ebp], esi

; 1246 :     IPos limit = s->strstart > (IPos)MAX_DIST(s) ?
; 1247 :         s->strstart - (IPos)MAX_DIST(s) : NIL;

  0001a	8b 77 2c	 mov	 esi, DWORD PTR [edi+44]
  0001d	8d 9e fa fe ff
	ff		 lea	 ebx, DWORD PTR [esi-262]
  00023	03 ca		 add	 ecx, edx
  00025	89 45 f8	 mov	 DWORD PTR _chain_length$[ebp], eax
  00028	8b 47 78	 mov	 eax, DWORD PTR [edi+120]
  0002b	3b d3		 cmp	 edx, ebx
  0002d	76 0d		 jbe	 SHORT $LN18@longest_ma
  0002f	2b d6		 sub	 edx, esi
  00031	81 c2 06 01 00
	00		 add	 edx, 262		; 00000106H
  00037	89 55 f0	 mov	 DWORD PTR _limit$[ebp], edx
  0003a	eb 07		 jmp	 SHORT $LN19@longest_ma
$LN18@longest_ma:
  0003c	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _limit$[ebp], 0
$LN19@longest_ma:

; 1248 :     /* Stop when cur_match becomes <= limit. To simplify the code,
; 1249 :      * we prevent matches with the string of window index 0.
; 1250 :      */
; 1251 :     Posf *prev = s->prev;
; 1252 :     uInt wmask = s->w_mask;
; 1253 : 
; 1254 : #ifdef UNALIGNED_OK
; 1255 :     /* Compare two bytes at a time. Note: this is not always beneficial.
; 1256 :      * Try with and without -DUNALIGNED_OK to check.
; 1257 :      */
; 1258 :     register Bytef *strend = s->window + s->strstart + MAX_MATCH - 1;
; 1259 :     register ush scan_start = *(ushf*)scan;
; 1260 :     register ush scan_end   = *(ushf*)(scan+best_len-1);
; 1261 : #else
; 1262 :     register Bytef *strend = s->window + s->strstart + MAX_MATCH;
; 1263 :     register Byte scan_end1  = scan[best_len-1];

  00043	0f b6 54 08 ff	 movzx	 edx, BYTE PTR [eax+ecx-1]
  00048	88 55 ff	 mov	 BYTE PTR _scan_end1$[ebp], dl

; 1264 :     register Byte scan_end   = scan[best_len];

  0004b	0f b6 14 08	 movzx	 edx, BYTE PTR [eax+ecx]
  0004f	8d b1 02 01 00
	00		 lea	 esi, DWORD PTR [ecx+258]
  00055	88 55 fe	 mov	 BYTE PTR _scan_end$[ebp], dl

; 1265 : #endif
; 1266 : 
; 1267 :     /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.
; 1268 :      * It is easy to get rid of this optimization if necessary.
; 1269 :      */
; 1270 :     Assert(s->hash_bits >= 8 && MAX_MATCH == 258, "Code too clever");
; 1271 : 
; 1272 :     /* Do not waste too much time if we already have a good match: */
; 1273 :     if (s->prev_length >= s->good_match) {

  00058	3b 87 8c 00 00
	00		 cmp	 eax, DWORD PTR [edi+140]
  0005e	72 04		 jb	 SHORT $LN15@longest_ma

; 1274 :         chain_length >>= 2;

  00060	c1 6d f8 02	 shr	 DWORD PTR _chain_length$[ebp], 2
$LN15@longest_ma:

; 1275 :     }
; 1276 :     /* Do not look for matches beyond the end of the input. This is necessary
; 1277 :      * to make deflate deterministic.
; 1278 :      */
; 1279 :     if ((uInt)nice_match > s->lookahead) nice_match = (int)s->lookahead;

  00064	8b 57 74	 mov	 edx, DWORD PTR [edi+116]
  00067	39 55 f4	 cmp	 DWORD PTR _nice_match$[ebp], edx
  0006a	76 03		 jbe	 SHORT $LN25@longest_ma
  0006c	89 55 f4	 mov	 DWORD PTR _nice_match$[ebp], edx
$LN25@longest_ma:
  0006f	8b 5d 08	 mov	 ebx, DWORD PTR _cur_match$[ebp]
$LL13@longest_ma:

; 1280 : 
; 1281 :     Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, "need lookahead");
; 1282 : 
; 1283 :     do {
; 1284 :         Assert(cur_match < s->strstart, "no future");
; 1285 :         match = s->window + cur_match;

  00072	8b 57 38	 mov	 edx, DWORD PTR [edi+56]
  00075	03 d3		 add	 edx, ebx

; 1286 : 
; 1287 :         /* Skip to next match if the match length cannot increase
; 1288 :          * or if the match length is less than 2.  Note that the checks below
; 1289 :          * for insufficient lookahead only occur occasionally for performance
; 1290 :          * reasons.  Therefore uninitialized memory will be accessed, and
; 1291 :          * conditional jumps will be made that depend on those values.
; 1292 :          * However the length of the match is limited to the lookahead, so
; 1293 :          * the output of deflate is not affected by the uninitialized values.
; 1294 :          */
; 1295 : #if (defined(UNALIGNED_OK) && MAX_MATCH == 258)
; 1296 :         /* This code assumes sizeof(unsigned short) == 2. Do not use
; 1297 :          * UNALIGNED_OK if your compiler uses a different size.
; 1298 :          */
; 1299 :         if (*(ushf*)(match+best_len-1) != scan_end ||
; 1300 :             *(ushf*)match != scan_start) continue;
; 1301 : 
; 1302 :         /* It is not necessary to compare scan[2] and match[2] since they are
; 1303 :          * always equal when the other bytes match, given that the hash keys
; 1304 :          * are equal and that HASH_BITS >= 8. Compare 2 bytes at a time at
; 1305 :          * strstart+3, +5, ... up to strstart+257. We check for insufficient
; 1306 :          * lookahead only every 4th comparison; the 128th check will be made
; 1307 :          * at strstart+257. If MAX_MATCH-2 is not a multiple of 8, it is
; 1308 :          * necessary to put more guard bytes at the end of the window, or
; 1309 :          * to check more often for insufficient lookahead.
; 1310 :          */
; 1311 :         Assert(scan[2] == match[2], "scan[2]?");
; 1312 :         scan++, match++;
; 1313 :         do {
; 1314 :         } while (*(ushf*)(scan+=2) == *(ushf*)(match+=2) &&
; 1315 :                  *(ushf*)(scan+=2) == *(ushf*)(match+=2) &&
; 1316 :                  *(ushf*)(scan+=2) == *(ushf*)(match+=2) &&
; 1317 :                  *(ushf*)(scan+=2) == *(ushf*)(match+=2) &&
; 1318 :                  scan < strend);
; 1319 :         /* The funny "do {}" generates better code on most compilers */
; 1320 : 
; 1321 :         /* Here, scan <= window+strstart+257 */
; 1322 :         Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");
; 1323 :         if (*scan == *match) scan++;
; 1324 : 
; 1325 :         len = (MAX_MATCH - 1) - (int)(strend-scan);
; 1326 :         scan = strend - (MAX_MATCH-1);
; 1327 : 
; 1328 : #else /* UNALIGNED_OK */
; 1329 : 
; 1330 :         if (match[best_len]   != scan_end  ||
; 1331 :             match[best_len-1] != scan_end1 ||
; 1332 :             *match            != *scan     ||
; 1333 :             *++match          != scan[1])      continue;

  00077	8a 5d fe	 mov	 bl, BYTE PTR _scan_end$[ebp]
  0007a	38 1c 02	 cmp	 BYTE PTR [edx+eax], bl
  0007d	0f 85 a9 00 00
	00		 jne	 $LN12@longest_ma
  00083	8a 5d ff	 mov	 bl, BYTE PTR _scan_end1$[ebp]
  00086	38 5c 02 ff	 cmp	 BYTE PTR [edx+eax-1], bl
  0008a	0f 85 9c 00 00
	00		 jne	 $LN12@longest_ma
  00090	8a 1a		 mov	 bl, BYTE PTR [edx]
  00092	3a 19		 cmp	 bl, BYTE PTR [ecx]
  00094	0f 85 92 00 00
	00		 jne	 $LN12@longest_ma
  0009a	8a 5a 01	 mov	 bl, BYTE PTR [edx+1]
  0009d	3a 59 01	 cmp	 bl, BYTE PTR [ecx+1]
  000a0	0f 85 86 00 00
	00		 jne	 $LN12@longest_ma

; 1334 : 
; 1335 :         /* The check at best_len-1 can be removed because it will be made
; 1336 :          * again later. (This heuristic is not always a win.)
; 1337 :          * It is not necessary to compare scan[2] and match[2] since they
; 1338 :          * are always equal when the other bytes match, given that
; 1339 :          * the hash keys are equal and that HASH_BITS >= 8.
; 1340 :          */
; 1341 :         scan += 2, match++;

  000a6	83 c1 02	 add	 ecx, 2
  000a9	83 c2 02	 add	 edx, 2
  000ac	8d 64 24 00	 npad	 4
$LL8@longest_ma:

; 1342 :         Assert(*scan == *match, "match[2]?");
; 1343 : 
; 1344 :         /* We check for insufficient lookahead only every 8th comparison;
; 1345 :          * the 256th check will be made at strstart+258.
; 1346 :          */
; 1347 :         do {
; 1348 :         } while (*++scan == *++match && *++scan == *++match &&
; 1349 :                  *++scan == *++match && *++scan == *++match &&
; 1350 :                  *++scan == *++match && *++scan == *++match &&
; 1351 :                  *++scan == *++match && *++scan == *++match &&
; 1352 :                  scan < strend);

  000b0	8a 59 01	 mov	 bl, BYTE PTR [ecx+1]
  000b3	41		 inc	 ecx
  000b4	3a 5a 01	 cmp	 bl, BYTE PTR [edx+1]
  000b7	75 45		 jne	 SHORT $LN5@longest_ma
  000b9	8a 59 01	 mov	 bl, BYTE PTR [ecx+1]
  000bc	41		 inc	 ecx
  000bd	3a 5a 02	 cmp	 bl, BYTE PTR [edx+2]
  000c0	75 3c		 jne	 SHORT $LN5@longest_ma
  000c2	8a 59 01	 mov	 bl, BYTE PTR [ecx+1]
  000c5	41		 inc	 ecx
  000c6	3a 5a 03	 cmp	 bl, BYTE PTR [edx+3]
  000c9	75 33		 jne	 SHORT $LN5@longest_ma
  000cb	8a 59 01	 mov	 bl, BYTE PTR [ecx+1]
  000ce	41		 inc	 ecx
  000cf	3a 5a 04	 cmp	 bl, BYTE PTR [edx+4]
  000d2	75 2a		 jne	 SHORT $LN5@longest_ma
  000d4	8a 59 01	 mov	 bl, BYTE PTR [ecx+1]
  000d7	41		 inc	 ecx
  000d8	3a 5a 05	 cmp	 bl, BYTE PTR [edx+5]
  000db	75 21		 jne	 SHORT $LN5@longest_ma
  000dd	8a 59 01	 mov	 bl, BYTE PTR [ecx+1]
  000e0	41		 inc	 ecx
  000e1	3a 5a 06	 cmp	 bl, BYTE PTR [edx+6]
  000e4	75 18		 jne	 SHORT $LN5@longest_ma
  000e6	8a 59 01	 mov	 bl, BYTE PTR [ecx+1]
  000e9	41		 inc	 ecx
  000ea	3a 5a 07	 cmp	 bl, BYTE PTR [edx+7]
  000ed	75 0f		 jne	 SHORT $LN5@longest_ma
  000ef	8a 59 01	 mov	 bl, BYTE PTR [ecx+1]
  000f2	41		 inc	 ecx
  000f3	83 c2 08	 add	 edx, 8
  000f6	3a 1a		 cmp	 bl, BYTE PTR [edx]
  000f8	75 04		 jne	 SHORT $LN5@longest_ma
  000fa	3b ce		 cmp	 ecx, esi
  000fc	72 b2		 jb	 SHORT $LL8@longest_ma
$LN5@longest_ma:

; 1353 : 
; 1354 :         Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");
; 1355 : 
; 1356 :         len = MAX_MATCH - (int)(strend - scan);

  000fe	8b d1		 mov	 edx, ecx
  00100	2b d6		 sub	 edx, esi
  00102	81 c2 02 01 00
	00		 add	 edx, 258		; 00000102H

; 1357 :         scan = strend - MAX_MATCH;

  00108	8d 8e fe fe ff
	ff		 lea	 ecx, DWORD PTR [esi-258]

; 1358 : 
; 1359 : #endif /* UNALIGNED_OK */
; 1360 : 
; 1361 :         if (len > best_len) {

  0010e	3b d0		 cmp	 edx, eax
  00110	7e 1a		 jle	 SHORT $LN12@longest_ma

; 1362 :             s->match_start = cur_match;

  00112	8b 45 08	 mov	 eax, DWORD PTR _cur_match$[ebp]
  00115	89 47 70	 mov	 DWORD PTR [edi+112], eax

; 1363 :             best_len = len;

  00118	8b c2		 mov	 eax, edx

; 1364 :             if (len >= nice_match) break;

  0011a	3b 55 f4	 cmp	 edx, DWORD PTR _nice_match$[ebp]
  0011d	7d 2b		 jge	 SHORT $LN11@longest_ma

; 1365 : #ifdef UNALIGNED_OK
; 1366 :             scan_end = *(ushf*)(scan+best_len-1);
; 1367 : #else
; 1368 :             scan_end1  = scan[best_len-1];

  0011f	8a 5c 0a ff	 mov	 bl, BYTE PTR [edx+ecx-1]

; 1369 :             scan_end   = scan[best_len];

  00123	8a 14 0a	 mov	 dl, BYTE PTR [edx+ecx]
  00126	88 5d ff	 mov	 BYTE PTR _scan_end1$[ebp], bl
  00129	88 55 fe	 mov	 BYTE PTR _scan_end$[ebp], dl
$LN12@longest_ma:

; 1370 : #endif
; 1371 :         }
; 1372 :     } while ((cur_match = prev[cur_match & wmask]) > limit
; 1373 :              && --chain_length != 0);

  0012c	8b 5f 34	 mov	 ebx, DWORD PTR [edi+52]
  0012f	23 5d 08	 and	 ebx, DWORD PTR _cur_match$[ebp]
  00132	8b 57 40	 mov	 edx, DWORD PTR [edi+64]
  00135	0f b7 1c 5a	 movzx	 ebx, WORD PTR [edx+ebx*2]
  00139	89 5d 08	 mov	 DWORD PTR _cur_match$[ebp], ebx
  0013c	3b 5d f0	 cmp	 ebx, DWORD PTR _limit$[ebp]
  0013f	76 09		 jbe	 SHORT $LN11@longest_ma
  00141	ff 4d f8	 dec	 DWORD PTR _chain_length$[ebp]
  00144	0f 85 28 ff ff
	ff		 jne	 $LL13@longest_ma
$LN11@longest_ma:

; 1374 : 
; 1375 :     if ((uInt)best_len <= s->lookahead) return (uInt)best_len;

  0014a	8b 4f 74	 mov	 ecx, DWORD PTR [edi+116]
  0014d	5e		 pop	 esi
  0014e	5b		 pop	 ebx
  0014f	3b c1		 cmp	 eax, ecx
  00151	76 02		 jbe	 SHORT $LN16@longest_ma

; 1376 :     return s->lookahead;

  00153	8b c1		 mov	 eax, ecx
$LN16@longest_ma:

; 1377 : }

  00155	8b e5		 mov	 esp, ebp
  00157	5d		 pop	 ebp
  00158	c3		 ret	 0
_longest_match ENDP
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT _lm_init
_TEXT	SEGMENT
_lm_init PROC						; COMDAT
; _s$ = esi

; 1197 :     s->window_size = (ulg)2L*s->w_size;

  00000	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]

; 1198 : 
; 1199 :     CLEAR_HASH(s);

  00003	8b 4e 4c	 mov	 ecx, DWORD PTR [esi+76]
  00006	8b 56 44	 mov	 edx, DWORD PTR [esi+68]
  00009	03 c0		 add	 eax, eax
  0000b	89 46 3c	 mov	 DWORD PTR [esi+60], eax
  0000e	33 c0		 xor	 eax, eax
  00010	66 89 44 4a fe	 mov	 WORD PTR [edx+ecx*2-2], ax
  00015	8b 4e 4c	 mov	 ecx, DWORD PTR [esi+76]
  00018	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
  0001b	57		 push	 edi
  0001c	8d 54 09 fe	 lea	 edx, DWORD PTR [ecx+ecx-2]
  00020	52		 push	 edx
  00021	33 ff		 xor	 edi, edi
  00023	57		 push	 edi
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 _memset

; 1200 : 
; 1201 :     /* Set the default configuration parameters:
; 1202 :      */
; 1203 :     s->max_lazy_match   = configuration_table[s->level].max_lazy;

  0002a	8b 86 84 00 00
	00		 mov	 eax, DWORD PTR [esi+132]
  00030	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00033	03 c0		 add	 eax, eax
  00035	0f b7 8c 00 02
	00 00 00	 movzx	 ecx, WORD PTR _configuration_table[eax+eax+2]
  0003d	03 c0		 add	 eax, eax
  0003f	89 8e 80 00 00
	00		 mov	 DWORD PTR [esi+128], ecx

; 1204 :     s->good_match       = configuration_table[s->level].good_length;

  00045	0f b7 90 00 00
	00 00		 movzx	 edx, WORD PTR _configuration_table[eax]
  0004c	89 96 8c 00 00
	00		 mov	 DWORD PTR [esi+140], edx

; 1205 :     s->nice_match       = configuration_table[s->level].nice_length;

  00052	0f b7 88 04 00
	00 00		 movzx	 ecx, WORD PTR _configuration_table[eax+4]
  00059	89 8e 90 00 00
	00		 mov	 DWORD PTR [esi+144], ecx

; 1206 :     s->max_chain_length = configuration_table[s->level].max_chain;

  0005f	0f b7 90 06 00
	00 00		 movzx	 edx, WORD PTR _configuration_table[eax+6]

; 1207 : 
; 1208 :     s->strstart = 0;
; 1209 :     s->block_start = 0L;
; 1210 :     s->lookahead = 0;
; 1211 :     s->insert = 0;
; 1212 :     s->match_length = s->prev_length = MIN_MATCH-1;

  00066	b8 02 00 00 00	 mov	 eax, 2
  0006b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0006e	89 7e 6c	 mov	 DWORD PTR [esi+108], edi
  00071	89 7e 5c	 mov	 DWORD PTR [esi+92], edi
  00074	89 7e 74	 mov	 DWORD PTR [esi+116], edi
  00077	89 be b4 16 00
	00		 mov	 DWORD PTR [esi+5812], edi

; 1213 :     s->match_available = 0;

  0007d	89 7e 68	 mov	 DWORD PTR [esi+104], edi

; 1214 :     s->ins_h = 0;

  00080	89 7e 48	 mov	 DWORD PTR [esi+72], edi
  00083	89 56 7c	 mov	 DWORD PTR [esi+124], edx
  00086	89 46 78	 mov	 DWORD PTR [esi+120], eax
  00089	89 46 60	 mov	 DWORD PTR [esi+96], eax
  0008c	5f		 pop	 edi

; 1215 : #ifndef FASTEST
; 1216 : #ifdef ASMV
; 1217 :     match_init(); /* initialize the asm code */
; 1218 : #endif
; 1219 : #endif
; 1220 : }

  0008d	c3		 ret	 0
_lm_init ENDP
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT _flush_pending
_TEXT	SEGMENT
_flush_pending PROC					; COMDAT
; _strm$ = edi

; 732  : {

  00000	53		 push	 ebx

; 733  :     unsigned len;
; 734  :     deflate_state *s = strm->state;

  00001	8b 5f 1c	 mov	 ebx, DWORD PTR [edi+28]
  00004	56		 push	 esi

; 735  : 
; 736  :     _tr_flush_bits(s);

  00005	8b c3		 mov	 eax, ebx
  00007	e8 00 00 00 00	 call	 __tr_flush_bits

; 737  :     len = s->pending;

  0000c	8b 73 14	 mov	 esi, DWORD PTR [ebx+20]

; 738  :     if (len > strm->avail_out) len = strm->avail_out;

  0000f	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00012	3b f0		 cmp	 esi, eax
  00014	76 02		 jbe	 SHORT $LN3@flush_pend
  00016	8b f0		 mov	 esi, eax
$LN3@flush_pend:

; 739  :     if (len == 0) return;

  00018	85 f6		 test	 esi, esi
  0001a	74 28		 je	 SHORT $LN1@flush_pend

; 740  : 
; 741  :     zmemcpy(strm->next_out, s->pending_out, len);

  0001c	8b 43 10	 mov	 eax, DWORD PTR [ebx+16]
  0001f	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  00022	56		 push	 esi
  00023	50		 push	 eax
  00024	51		 push	 ecx
  00025	e8 00 00 00 00	 call	 _memcpy

; 742  :     strm->next_out  += len;

  0002a	01 77 0c	 add	 DWORD PTR [edi+12], esi

; 743  :     s->pending_out  += len;

  0002d	01 73 10	 add	 DWORD PTR [ebx+16], esi

; 744  :     strm->total_out += len;

  00030	01 77 14	 add	 DWORD PTR [edi+20], esi

; 745  :     strm->avail_out -= len;

  00033	29 77 10	 sub	 DWORD PTR [edi+16], esi
  00036	83 c4 0c	 add	 esp, 12			; 0000000cH

; 746  :     s->pending      -= len;

  00039	29 73 14	 sub	 DWORD PTR [ebx+20], esi

; 747  :     if (s->pending == 0) {

  0003c	75 06		 jne	 SHORT $LN1@flush_pend

; 748  :         s->pending_out = s->pending_buf;

  0003e	8b 53 08	 mov	 edx, DWORD PTR [ebx+8]
  00041	89 53 10	 mov	 DWORD PTR [ebx+16], edx
$LN1@flush_pend:

; 749  :     }
; 750  : }

  00044	5e		 pop	 esi
  00045	5b		 pop	 ebx
  00046	c3		 ret	 0
_flush_pending ENDP
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT _putShortMSB
_TEXT	SEGMENT
_putShortMSB PROC					; COMDAT
; _s$ = eax
; _b$ = ecx

; 719  : {

  00000	56		 push	 esi

; 720  :     put_byte(s, (Byte)(b >> 8));

  00001	8b 70 08	 mov	 esi, DWORD PTR [eax+8]
  00004	57		 push	 edi
  00005	8b 78 14	 mov	 edi, DWORD PTR [eax+20]
  00008	8b d1		 mov	 edx, ecx
  0000a	c1 ea 08	 shr	 edx, 8
  0000d	88 14 3e	 mov	 BYTE PTR [esi+edi], dl

; 721  :     put_byte(s, (Byte)(b & 0xff));

  00010	8b 78 08	 mov	 edi, DWORD PTR [eax+8]
  00013	be 01 00 00 00	 mov	 esi, 1
  00018	01 70 14	 add	 DWORD PTR [eax+20], esi
  0001b	8b 50 14	 mov	 edx, DWORD PTR [eax+20]
  0001e	88 0c 3a	 mov	 BYTE PTR [edx+edi], cl
  00021	01 70 14	 add	 DWORD PTR [eax+20], esi
  00024	5f		 pop	 edi
  00025	5e		 pop	 esi

; 722  : }

  00026	c3		 ret	 0
_putShortMSB ENDP
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT _deflateStateCheck
_TEXT	SEGMENT
_deflateStateCheck PROC					; COMDAT
; _strm$ = eax

; 356  :     deflate_state *s;
; 357  :     if (strm == Z_NULL ||
; 358  :         strm->zalloc == (alloc_func)0 || strm->zfree == (free_func)0)

  00000	85 c0		 test	 eax, eax
  00002	74 47		 je	 SHORT $LN3@deflateSta
  00004	83 78 20 00	 cmp	 DWORD PTR [eax+32], 0
  00008	74 41		 je	 SHORT $LN3@deflateSta
  0000a	83 78 24 00	 cmp	 DWORD PTR [eax+36], 0
  0000e	74 3b		 je	 SHORT $LN3@deflateSta

; 360  :     s = strm->state;

  00010	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]

; 361  :     if (s == Z_NULL || s->strm != strm || (s->status != INIT_STATE &&
; 362  : #ifdef GZIP
; 363  :                                            s->status != GZIP_STATE &&
; 364  : #endif
; 365  :                                            s->status != EXTRA_STATE &&
; 366  :                                            s->status != NAME_STATE &&
; 367  :                                            s->status != COMMENT_STATE &&
; 368  :                                            s->status != HCRC_STATE &&
; 369  :                                            s->status != BUSY_STATE &&
; 370  :                                            s->status != FINISH_STATE))

  00013	85 c9		 test	 ecx, ecx
  00015	74 34		 je	 SHORT $LN3@deflateSta
  00017	39 01		 cmp	 DWORD PTR [ecx], eax
  00019	75 30		 jne	 SHORT $LN3@deflateSta
  0001b	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0001e	83 f8 2a	 cmp	 eax, 42			; 0000002aH
  00021	74 25		 je	 SHORT $LN2@deflateSta
  00023	83 f8 39	 cmp	 eax, 57			; 00000039H
  00026	74 20		 je	 SHORT $LN2@deflateSta
  00028	83 f8 45	 cmp	 eax, 69			; 00000045H
  0002b	74 1b		 je	 SHORT $LN2@deflateSta
  0002d	83 f8 49	 cmp	 eax, 73			; 00000049H
  00030	74 16		 je	 SHORT $LN2@deflateSta
  00032	83 f8 5b	 cmp	 eax, 91			; 0000005bH
  00035	74 11		 je	 SHORT $LN2@deflateSta
  00037	83 f8 67	 cmp	 eax, 103		; 00000067H
  0003a	74 0c		 je	 SHORT $LN2@deflateSta
  0003c	83 f8 71	 cmp	 eax, 113		; 00000071H
  0003f	74 07		 je	 SHORT $LN2@deflateSta
  00041	3d 9a 02 00 00	 cmp	 eax, 666		; 0000029aH
  00046	75 03		 jne	 SHORT $LN3@deflateSta
$LN2@deflateSta:

; 371  :         return 1;
; 372  :     return 0;

  00048	33 c0		 xor	 eax, eax

; 373  : }

  0004a	c3		 ret	 0
$LN3@deflateSta:

; 359  :         return 1;

  0004b	b8 01 00 00 00	 mov	 eax, 1

; 373  : }

  00050	c3		 ret	 0
_deflateStateCheck ENDP
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT _slide_hash
_TEXT	SEGMENT
_slide_hash PROC					; COMDAT
; _s$ = edi

; 204  :     unsigned n, m;
; 205  :     Posf *p;
; 206  :     uInt wsize = s->w_size;
; 207  : 
; 208  :     n = s->hash_size;
; 209  :     p = &s->head[n];

  00000	8b 47 44	 mov	 eax, DWORD PTR [edi+68]
  00003	8b 4f 2c	 mov	 ecx, DWORD PTR [edi+44]
  00006	56		 push	 esi
  00007	8b 77 4c	 mov	 esi, DWORD PTR [edi+76]
  0000a	8d 14 70	 lea	 edx, DWORD PTR [eax+esi*2]
  0000d	8d 49 00	 npad	 3
$LL6@slide_hash:

; 210  :     do {
; 211  :         m = *--p;

  00010	0f b7 42 fe	 movzx	 eax, WORD PTR [edx-2]
  00014	83 ea 02	 sub	 edx, 2

; 212  :         *p = (Pos)(m >= wsize ? m - wsize : NIL);

  00017	3b c1		 cmp	 eax, ecx
  00019	72 04		 jb	 SHORT $LN9@slide_hash
  0001b	2b c1		 sub	 eax, ecx
  0001d	eb 02		 jmp	 SHORT $LN10@slide_hash
$LN9@slide_hash:
  0001f	33 c0		 xor	 eax, eax
$LN10@slide_hash:

; 213  :     } while (--n);

  00021	4e		 dec	 esi
  00022	66 89 02	 mov	 WORD PTR [edx], ax
  00025	75 e9		 jne	 SHORT $LL6@slide_hash

; 214  :     n = wsize;
; 215  : #ifndef FASTEST
; 216  :     p = &s->prev[n];

  00027	8b 57 40	 mov	 edx, DWORD PTR [edi+64]
  0002a	8b f1		 mov	 esi, ecx
  0002c	8d 14 4a	 lea	 edx, DWORD PTR [edx+ecx*2]
  0002f	90		 npad	 1
$LL3@slide_hash:

; 217  :     do {
; 218  :         m = *--p;

  00030	0f b7 42 fe	 movzx	 eax, WORD PTR [edx-2]
  00034	83 ea 02	 sub	 edx, 2

; 219  :         *p = (Pos)(m >= wsize ? m - wsize : NIL);

  00037	3b c1		 cmp	 eax, ecx
  00039	72 04		 jb	 SHORT $LN11@slide_hash
  0003b	2b c1		 sub	 eax, ecx
  0003d	eb 02		 jmp	 SHORT $LN12@slide_hash
$LN11@slide_hash:
  0003f	33 c0		 xor	 eax, eax
$LN12@slide_hash:

; 220  :         /* If n is not on any hash chain, prev[n] is garbage but
; 221  :          * its value will never be used.
; 222  :          */
; 223  :     } while (--n);

  00041	4e		 dec	 esi
  00042	66 89 02	 mov	 WORD PTR [edx], ax
  00045	75 e9		 jne	 SHORT $LL3@slide_hash
  00047	5e		 pop	 esi

; 224  : #endif
; 225  : }

  00048	c3		 ret	 0
_slide_hash ENDP
PUBLIC	_deflateEnd
; Function compile flags: /Ogtp
;	COMDAT _deflateEnd
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_deflateEnd PROC					; COMDAT

; 1078 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1079 :     int status;
; 1080 : 
; 1081 :     if (deflateStateCheck(strm)) return Z_STREAM_ERROR;

  00004	8b 75 08	 mov	 esi, DWORD PTR _strm$[ebp]
  00007	8b c6		 mov	 eax, esi
  00009	e8 00 00 00 00	 call	 _deflateStateCheck
  0000e	85 c0		 test	 eax, eax
  00010	74 08		 je	 SHORT $LN5@deflateEnd
  00012	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  00017	5e		 pop	 esi

; 1095 : }

  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
$LN5@deflateEnd:

; 1082 : 
; 1083 :     status = strm->state->status;

  0001a	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  0001d	57		 push	 edi
  0001e	8b 78 04	 mov	 edi, DWORD PTR [eax+4]

; 1084 : 
; 1085 :     /* Deallocate in reverse order of allocations: */
; 1086 :     TRY_FREE(strm, strm->state->pending_buf);

  00021	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00024	85 c0		 test	 eax, eax
  00026	74 0d		 je	 SHORT $LN4@deflateEnd
  00028	8b 4e 24	 mov	 ecx, DWORD PTR [esi+36]
  0002b	50		 push	 eax
  0002c	8b 46 28	 mov	 eax, DWORD PTR [esi+40]
  0002f	50		 push	 eax
  00030	ff d1		 call	 ecx
  00032	83 c4 08	 add	 esp, 8
$LN4@deflateEnd:

; 1087 :     TRY_FREE(strm, strm->state->head);

  00035	8b 56 1c	 mov	 edx, DWORD PTR [esi+28]
  00038	8b 42 44	 mov	 eax, DWORD PTR [edx+68]
  0003b	85 c0		 test	 eax, eax
  0003d	74 0d		 je	 SHORT $LN3@deflateEnd
  0003f	8b 4e 24	 mov	 ecx, DWORD PTR [esi+36]
  00042	50		 push	 eax
  00043	8b 46 28	 mov	 eax, DWORD PTR [esi+40]
  00046	50		 push	 eax
  00047	ff d1		 call	 ecx
  00049	83 c4 08	 add	 esp, 8
$LN3@deflateEnd:

; 1088 :     TRY_FREE(strm, strm->state->prev);

  0004c	8b 56 1c	 mov	 edx, DWORD PTR [esi+28]
  0004f	8b 42 40	 mov	 eax, DWORD PTR [edx+64]
  00052	85 c0		 test	 eax, eax
  00054	74 0d		 je	 SHORT $LN2@deflateEnd
  00056	8b 4e 24	 mov	 ecx, DWORD PTR [esi+36]
  00059	50		 push	 eax
  0005a	8b 46 28	 mov	 eax, DWORD PTR [esi+40]
  0005d	50		 push	 eax
  0005e	ff d1		 call	 ecx
  00060	83 c4 08	 add	 esp, 8
$LN2@deflateEnd:

; 1089 :     TRY_FREE(strm, strm->state->window);

  00063	8b 56 1c	 mov	 edx, DWORD PTR [esi+28]
  00066	8b 42 38	 mov	 eax, DWORD PTR [edx+56]
  00069	85 c0		 test	 eax, eax
  0006b	74 0d		 je	 SHORT $LN1@deflateEnd
  0006d	8b 4e 24	 mov	 ecx, DWORD PTR [esi+36]
  00070	50		 push	 eax
  00071	8b 46 28	 mov	 eax, DWORD PTR [esi+40]
  00074	50		 push	 eax
  00075	ff d1		 call	 ecx
  00077	83 c4 08	 add	 esp, 8
$LN1@deflateEnd:

; 1090 : 
; 1091 :     ZFREE(strm, strm->state);

  0007a	8b 56 1c	 mov	 edx, DWORD PTR [esi+28]
  0007d	8b 46 28	 mov	 eax, DWORD PTR [esi+40]
  00080	8b 4e 24	 mov	 ecx, DWORD PTR [esi+36]
  00083	52		 push	 edx
  00084	50		 push	 eax
  00085	ff d1		 call	 ecx
  00087	83 c4 08	 add	 esp, 8

; 1092 :     strm->state = Z_NULL;
; 1093 : 
; 1094 :     return status == BUSY_STATE ? Z_DATA_ERROR : Z_OK;

  0008a	33 c0		 xor	 eax, eax
  0008c	83 ff 71	 cmp	 edi, 113		; 00000071H
  0008f	0f 95 c0	 setne	 al
  00092	5f		 pop	 edi
  00093	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], 0
  0009a	5e		 pop	 esi
  0009b	48		 dec	 eax
  0009c	83 e0 fd	 and	 eax, -3			; fffffffdH

; 1095 : }

  0009f	5d		 pop	 ebp
  000a0	c3		 ret	 0
_deflateEnd ENDP
_TEXT	ENDS
PUBLIC	_deflateBound
; Function compile flags: /Ogtp
;	COMDAT _deflateBound
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_complen$ = 12						; size = 4
_sourceLen$ = 12					; size = 4
_deflateBound PROC					; COMDAT

; 655  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 656  :     deflate_state *s;
; 657  :     uLong complen, wraplen;
; 658  : 
; 659  :     /* conservative upper bound for compressed data */
; 660  :     complen = sourceLen +
; 661  :               ((sourceLen + 7) >> 3) + ((sourceLen + 63) >> 6) + 5;
; 662  : 
; 663  :     /* if can't get parameters, return conservative bound plus zlib wrapper */
; 664  :     if (deflateStateCheck(strm))

  00003	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  00006	53		 push	 ebx
  00007	8b 5d 0c	 mov	 ebx, DWORD PTR _sourceLen$[ebp]
  0000a	8d 43 3f	 lea	 eax, DWORD PTR [ebx+63]
  0000d	c1 e8 06	 shr	 eax, 6
  00010	8d 4b 07	 lea	 ecx, DWORD PTR [ebx+7]
  00013	03 c3		 add	 eax, ebx
  00015	c1 e9 03	 shr	 ecx, 3
  00018	56		 push	 esi
  00019	8d 74 01 05	 lea	 esi, DWORD PTR [ecx+eax+5]
  0001d	8b c2		 mov	 eax, edx
  0001f	89 75 0c	 mov	 DWORD PTR _complen$[ebp], esi
  00022	e8 00 00 00 00	 call	 _deflateStateCheck
  00027	85 c0		 test	 eax, eax
  00029	74 07		 je	 SHORT $LN20@deflateBou

; 665  :         return complen + 6;

  0002b	8d 46 06	 lea	 eax, DWORD PTR [esi+6]
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx

; 709  : }

  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
$LN20@deflateBou:
  00032	57		 push	 edi

; 666  : 
; 667  :     /* compute wrapper length */
; 668  :     s = strm->state;

  00033	8b 7a 1c	 mov	 edi, DWORD PTR [edx+28]

; 669  :     switch (s->wrap) {

  00036	8b 47 18	 mov	 eax, DWORD PTR [edi+24]
  00039	83 e8 00	 sub	 eax, 0
  0003c	74 64		 je	 SHORT $LN17@deflateBou
  0003e	48		 dec	 eax
  0003f	74 52		 je	 SHORT $LN16@deflateBou
  00041	48		 dec	 eax
  00042	74 07		 je	 SHORT $LN15@deflateBou

; 697  : #endif
; 698  :     default:                                /* for compiler happiness */
; 699  :         wraplen = 6;

  00044	b8 06 00 00 00	 mov	 eax, 6
  00049	eb 59		 jmp	 SHORT $LN27@deflateBou
$LN15@deflateBou:

; 676  : #ifdef GZIP
; 677  :     case 2:                                 /* gzip wrapper */
; 678  :         wraplen = 18;
; 679  :         if (s->gzhead != Z_NULL) {          /* user-supplied gzip header */

  0004b	8b 77 1c	 mov	 esi, DWORD PTR [edi+28]
  0004e	b8 12 00 00 00	 mov	 eax, 18			; 00000012H
  00053	85 f6		 test	 esi, esi
  00055	74 4d		 je	 SHORT $LN27@deflateBou

; 680  :             Bytef *str;
; 681  :             if (s->gzhead->extra != Z_NULL)

  00057	83 7e 10 00	 cmp	 DWORD PTR [esi+16], 0
  0005b	74 06		 je	 SHORT $LN13@deflateBou

; 682  :                 wraplen += 2 + s->gzhead->extra_len;

  0005d	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00060	83 c0 14	 add	 eax, 20			; 00000014H
$LN13@deflateBou:

; 683  :             str = s->gzhead->name;

  00063	8b 4e 1c	 mov	 ecx, DWORD PTR [esi+28]

; 684  :             if (str != Z_NULL)

  00066	85 c9		 test	 ecx, ecx
  00068	74 0e		 je	 SHORT $LN9@deflateBou
  0006a	8d 9b 00 00 00
	00		 npad	 6
$LL11@deflateBou:

; 685  :                 do {
; 686  :                     wraplen++;
; 687  :                 } while (*str++);

  00070	8a 11		 mov	 dl, BYTE PTR [ecx]
  00072	40		 inc	 eax
  00073	41		 inc	 ecx
  00074	84 d2		 test	 dl, dl
  00076	75 f8		 jne	 SHORT $LL11@deflateBou
$LN9@deflateBou:

; 688  :             str = s->gzhead->comment;

  00078	8b 4e 24	 mov	 ecx, DWORD PTR [esi+36]

; 689  :             if (str != Z_NULL)

  0007b	85 c9		 test	 ecx, ecx
  0007d	74 09		 je	 SHORT $LN5@deflateBou
  0007f	90		 npad	 1
$LL7@deflateBou:

; 690  :                 do {
; 691  :                     wraplen++;
; 692  :                 } while (*str++);

  00080	8a 11		 mov	 dl, BYTE PTR [ecx]
  00082	40		 inc	 eax
  00083	41		 inc	 ecx
  00084	84 d2		 test	 dl, dl
  00086	75 f8		 jne	 SHORT $LL7@deflateBou
$LN5@deflateBou:

; 693  :             if (s->gzhead->hcrc)

  00088	83 7e 2c 00	 cmp	 DWORD PTR [esi+44], 0
  0008c	74 16		 je	 SHORT $LN27@deflateBou

; 694  :                 wraplen += 2;

  0008e	83 c0 02	 add	 eax, 2

; 695  :         }
; 696  :         break;

  00091	eb 11		 jmp	 SHORT $LN27@deflateBou
$LN16@deflateBou:

; 672  :         break;
; 673  :     case 1:                                 /* zlib wrapper */
; 674  :         wraplen = 6 + (s->strstart ? 4 : 0);

  00093	8b 47 6c	 mov	 eax, DWORD PTR [edi+108]
  00096	f7 d8		 neg	 eax
  00098	1b c0		 sbb	 eax, eax
  0009a	83 e0 04	 and	 eax, 4
  0009d	83 c0 06	 add	 eax, 6

; 675  :         break;

  000a0	eb 02		 jmp	 SHORT $LN27@deflateBou
$LN17@deflateBou:

; 670  :     case 0:                                 /* raw deflate */
; 671  :         wraplen = 0;

  000a2	33 c0		 xor	 eax, eax
$LN27@deflateBou:

; 700  :     }
; 701  : 
; 702  :     /* if not default parameters, return conservative bound */
; 703  :     if (s->w_bits != 15 || s->hash_bits != 8 + 7)

  000a4	b9 0f 00 00 00	 mov	 ecx, 15			; 0000000fH
  000a9	39 4f 30	 cmp	 DWORD PTR [edi+48], ecx
  000ac	75 23		 jne	 SHORT $LN1@deflateBou
  000ae	39 4f 50	 cmp	 DWORD PTR [edi+80], ecx
  000b1	75 1e		 jne	 SHORT $LN1@deflateBou

; 705  : 
; 706  :     /* default settings: return tight bound for that case */
; 707  :     return sourceLen + (sourceLen >> 12) + (sourceLen >> 14) +
; 708  :            (sourceLen >> 25) + 13 - 6 + wraplen;

  000b3	8b d3		 mov	 edx, ebx
  000b5	c1 ea 0e	 shr	 edx, 14			; 0000000eH
  000b8	03 d0		 add	 edx, eax
  000ba	8b cb		 mov	 ecx, ebx
  000bc	c1 e9 19	 shr	 ecx, 25			; 00000019H
  000bf	8b c3		 mov	 eax, ebx
  000c1	c1 e8 0c	 shr	 eax, 12			; 0000000cH
  000c4	03 d1		 add	 edx, ecx
  000c6	5f		 pop	 edi
  000c7	03 c2		 add	 eax, edx
  000c9	5e		 pop	 esi
  000ca	8d 44 18 07	 lea	 eax, DWORD PTR [eax+ebx+7]
  000ce	5b		 pop	 ebx

; 709  : }

  000cf	5d		 pop	 ebp
  000d0	c3		 ret	 0
$LN1@deflateBou:

; 704  :         return complen + wraplen;

  000d1	03 45 0c	 add	 eax, DWORD PTR _complen$[ebp]
  000d4	5f		 pop	 edi
  000d5	5e		 pop	 esi
  000d6	5b		 pop	 ebx

; 709  : }

  000d7	5d		 pop	 ebp
  000d8	c3		 ret	 0
_deflateBound ENDP
_TEXT	ENDS
PUBLIC	_deflateTune
; Function compile flags: /Ogtp
;	COMDAT _deflateTune
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_good_length$ = 12					; size = 4
_max_lazy$ = 16						; size = 4
_nice_length$ = 20					; size = 4
_max_chain$ = 24					; size = 4
_deflateTune PROC					; COMDAT

; 623  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 624  :     deflate_state *s;
; 625  : 
; 626  :     if (deflateStateCheck(strm)) return Z_STREAM_ERROR;

  00003	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  00006	8b c2		 mov	 eax, edx
  00008	e8 00 00 00 00	 call	 _deflateStateCheck
  0000d	85 c0		 test	 eax, eax
  0000f	74 07		 je	 SHORT $LN1@deflateTun
  00011	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH

; 633  : }

  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
$LN1@deflateTun:

; 627  :     s = strm->state;

  00018	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]

; 628  :     s->good_match = (uInt)good_length;

  0001b	8b 4d 0c	 mov	 ecx, DWORD PTR _good_length$[ebp]

; 629  :     s->max_lazy_match = (uInt)max_lazy;

  0001e	8b 55 10	 mov	 edx, DWORD PTR _max_lazy$[ebp]
  00021	89 88 8c 00 00
	00		 mov	 DWORD PTR [eax+140], ecx

; 630  :     s->nice_match = nice_length;

  00027	8b 4d 14	 mov	 ecx, DWORD PTR _nice_length$[ebp]
  0002a	89 90 80 00 00
	00		 mov	 DWORD PTR [eax+128], edx

; 631  :     s->max_chain_length = (uInt)max_chain;

  00030	8b 55 18	 mov	 edx, DWORD PTR _max_chain$[ebp]
  00033	89 88 90 00 00
	00		 mov	 DWORD PTR [eax+144], ecx
  00039	89 50 7c	 mov	 DWORD PTR [eax+124], edx

; 632  :     return Z_OK;

  0003c	33 c0		 xor	 eax, eax

; 633  : }

  0003e	5d		 pop	 ebp
  0003f	c3		 ret	 0
_deflateTune ENDP
_TEXT	ENDS
PUBLIC	_deflatePrime
; Function compile flags: /Ogtp
;	COMDAT _deflatePrime
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_bits$ = 12						; size = 4
_value$ = 16						; size = 4
_deflatePrime PROC					; COMDAT

; 546  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 547  :     deflate_state *s;
; 548  :     int put;
; 549  : 
; 550  :     if (deflateStateCheck(strm)) return Z_STREAM_ERROR;

  00003	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  00006	8b c2		 mov	 eax, edx
  00008	e8 00 00 00 00	 call	 _deflateStateCheck
  0000d	85 c0		 test	 eax, eax
  0000f	74 07		 je	 SHORT $LN6@deflatePri
  00011	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH

; 565  : }

  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
$LN6@deflatePri:

; 551  :     s = strm->state;

  00018	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]

; 552  :     if ((Bytef *)(s->d_buf) < s->pending_out + ((Buf_size + 7) >> 3))

  0001b	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0001e	83 c1 02	 add	 ecx, 2
  00021	39 88 a4 16 00
	00		 cmp	 DWORD PTR [eax+5796], ecx
  00027	73 07		 jae	 SHORT $LN9@deflatePri

; 553  :         return Z_BUF_ERROR;

  00029	b8 fb ff ff ff	 mov	 eax, -5			; fffffffbH

; 565  : }

  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
$LN9@deflatePri:
  00030	53		 push	 ebx
  00031	56		 push	 esi
  00032	57		 push	 edi

; 553  :         return Z_BUF_ERROR;

  00033	8b 7d 0c	 mov	 edi, DWORD PTR _bits$[ebp]
  00036	eb 08 8d a4 24
	00 00 00 00 90	 npad	 10
$LL4@deflatePri:

; 554  :     do {
; 555  :         put = Buf_size - s->bi_valid;

  00040	8b 90 bc 16 00
	00		 mov	 edx, DWORD PTR [eax+5820]
  00046	be 10 00 00 00	 mov	 esi, 16			; 00000010H
  0004b	2b f2		 sub	 esi, edx

; 556  :         if (put > bits)

  0004d	3b f7		 cmp	 esi, edi
  0004f	7e 02		 jle	 SHORT $LN1@deflatePri

; 557  :             put = bits;

  00051	8b f7		 mov	 esi, edi
$LN1@deflatePri:

; 558  :         s->bi_buf |= (ush)((value & ((1 << put) - 1)) << s->bi_valid);

  00053	8b ce		 mov	 ecx, esi
  00055	bb 01 00 00 00	 mov	 ebx, 1
  0005a	66 d3 e3	 shl	 bx, cl
  0005d	8b ca		 mov	 ecx, edx

; 559  :         s->bi_valid += put;

  0005f	03 d6		 add	 edx, esi
  00061	89 90 bc 16 00
	00		 mov	 DWORD PTR [eax+5820], edx
  00067	66 4b		 dec	 bx
  00069	66 23 5d 10	 and	 bx, WORD PTR _value$[ebp]
  0006d	66 d3 e3	 shl	 bx, cl
  00070	66 09 98 b8 16
	00 00		 or	 WORD PTR [eax+5816], bx

; 560  :         _tr_flush_bits(s);

  00077	e8 00 00 00 00	 call	 __tr_flush_bits

; 561  :         value >>= put;

  0007c	8b ce		 mov	 ecx, esi
  0007e	d3 7d 10	 sar	 DWORD PTR _value$[ebp], cl

; 562  :         bits -= put;

  00081	2b fe		 sub	 edi, esi

; 563  :     } while (bits);

  00083	75 bb		 jne	 SHORT $LL4@deflatePri

; 564  :     return Z_OK;

  00085	5f		 pop	 edi
  00086	5e		 pop	 esi
  00087	33 c0		 xor	 eax, eax
  00089	5b		 pop	 ebx

; 565  : }

  0008a	5d		 pop	 ebp
  0008b	c3		 ret	 0
_deflatePrime ENDP
_TEXT	ENDS
PUBLIC	_deflatePending
; Function compile flags: /Ogtp
;	COMDAT _deflatePending
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_pending$ = 12						; size = 4
_bits$ = 16						; size = 4
_deflatePending PROC					; COMDAT

; 532  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 533  :     if (deflateStateCheck(strm)) return Z_STREAM_ERROR;

  00003	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  00006	8b c2		 mov	 eax, edx
  00008	e8 00 00 00 00	 call	 _deflateStateCheck
  0000d	85 c0		 test	 eax, eax
  0000f	74 07		 je	 SHORT $LN3@deflatePen
  00011	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH

; 539  : }

  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
$LN3@deflatePen:

; 534  :     if (pending != Z_NULL)

  00018	8b 45 0c	 mov	 eax, DWORD PTR _pending$[ebp]
  0001b	85 c0		 test	 eax, eax
  0001d	74 08		 je	 SHORT $LN2@deflatePen

; 535  :         *pending = strm->state->pending;

  0001f	8b 4a 1c	 mov	 ecx, DWORD PTR [edx+28]
  00022	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  00025	89 08		 mov	 DWORD PTR [eax], ecx
$LN2@deflatePen:

; 536  :     if (bits != Z_NULL)

  00027	8b 45 10	 mov	 eax, DWORD PTR _bits$[ebp]
  0002a	85 c0		 test	 eax, eax
  0002c	74 0b		 je	 SHORT $LN1@deflatePen

; 537  :         *bits = strm->state->bi_valid;

  0002e	8b 52 1c	 mov	 edx, DWORD PTR [edx+28]
  00031	8b 8a bc 16 00
	00		 mov	 ecx, DWORD PTR [edx+5820]
  00037	89 08		 mov	 DWORD PTR [eax], ecx
$LN1@deflatePen:

; 538  :     return Z_OK;

  00039	33 c0		 xor	 eax, eax

; 539  : }

  0003b	5d		 pop	 ebp
  0003c	c3		 ret	 0
_deflatePending ENDP
_TEXT	ENDS
PUBLIC	_deflateSetHeader
; Function compile flags: /Ogtp
;	COMDAT _deflateSetHeader
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_head$ = 12						; size = 4
_deflateSetHeader PROC					; COMDAT

; 520  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 521  :     if (deflateStateCheck(strm) || strm->state->wrap != 2)

  00003	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  00006	8b c2		 mov	 eax, edx
  00008	e8 00 00 00 00	 call	 _deflateStateCheck
  0000d	85 c0		 test	 eax, eax
  0000f	75 13		 jne	 SHORT $LN1@deflateSet
  00011	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  00014	83 78 18 02	 cmp	 DWORD PTR [eax+24], 2
  00018	75 0a		 jne	 SHORT $LN1@deflateSet

; 523  :     strm->state->gzhead = head;

  0001a	8b 4d 0c	 mov	 ecx, DWORD PTR _head$[ebp]
  0001d	89 48 1c	 mov	 DWORD PTR [eax+28], ecx

; 524  :     return Z_OK;

  00020	33 c0		 xor	 eax, eax

; 525  : }

  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
$LN1@deflateSet:

; 522  :         return Z_STREAM_ERROR;

  00024	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH

; 525  : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
_deflateSetHeader ENDP
_TEXT	ENDS
PUBLIC	_deflateGetDictionary
; Function compile flags: /Ogtp
;	COMDAT _deflateGetDictionary
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_dictionary$ = 12					; size = 4
_dictLength$ = 16					; size = 4
_deflateGetDictionary PROC				; COMDAT

; 449  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 450  :     deflate_state *s;
; 451  :     uInt len;
; 452  : 
; 453  :     if (deflateStateCheck(strm))

  00003	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  00006	8b c2		 mov	 eax, edx
  00008	e8 00 00 00 00	 call	 _deflateStateCheck
  0000d	85 c0		 test	 eax, eax
  0000f	74 07		 je	 SHORT $LN4@deflateGet

; 454  :         return Z_STREAM_ERROR;

  00011	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH

; 464  : }

  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
$LN4@deflateGet:

; 455  :     s = strm->state;

  00018	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]

; 456  :     len = s->strstart + s->lookahead;

  0001b	8b 50 6c	 mov	 edx, DWORD PTR [eax+108]
  0001e	03 50 74	 add	 edx, DWORD PTR [eax+116]

; 457  :     if (len > s->w_size)

  00021	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  00024	56		 push	 esi
  00025	8b f2		 mov	 esi, edx
  00027	3b f1		 cmp	 esi, ecx
  00029	76 02		 jbe	 SHORT $LN3@deflateGet

; 458  :         len = s->w_size;

  0002b	8b f1		 mov	 esi, ecx
$LN3@deflateGet:

; 459  :     if (dictionary != Z_NULL && len)

  0002d	8b 4d 0c	 mov	 ecx, DWORD PTR _dictionary$[ebp]
  00030	85 c9		 test	 ecx, ecx
  00032	74 16		 je	 SHORT $LN2@deflateGet
  00034	85 f6		 test	 esi, esi
  00036	74 12		 je	 SHORT $LN2@deflateGet

; 460  :         zmemcpy(dictionary, s->window + s->strstart + s->lookahead - len, len);

  00038	8b 40 38	 mov	 eax, DWORD PTR [eax+56]
  0003b	2b c6		 sub	 eax, esi
  0003d	56		 push	 esi
  0003e	03 c2		 add	 eax, edx
  00040	50		 push	 eax
  00041	51		 push	 ecx
  00042	e8 00 00 00 00	 call	 _memcpy
  00047	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN2@deflateGet:

; 461  :     if (dictLength != Z_NULL)

  0004a	8b 45 10	 mov	 eax, DWORD PTR _dictLength$[ebp]
  0004d	85 c0		 test	 eax, eax
  0004f	74 02		 je	 SHORT $LN1@deflateGet

; 462  :         *dictLength = len;

  00051	89 30		 mov	 DWORD PTR [eax], esi
$LN1@deflateGet:

; 463  :     return Z_OK;

  00053	33 c0		 xor	 eax, eax
  00055	5e		 pop	 esi

; 464  : }

  00056	5d		 pop	 ebp
  00057	c3		 ret	 0
_deflateGetDictionary ENDP
; Function compile flags: /Ogtp
;	COMDAT _read_buf
_TEXT	SEGMENT
_read_buf PROC						; COMDAT
; _strm$ = esi
; _buf$ = ebx
; _size$ = ecx

; 1169 :     unsigned len = strm->avail_in;

  00000	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00003	57		 push	 edi
  00004	8b f8		 mov	 edi, eax

; 1170 : 
; 1171 :     if (len > size) len = size;

  00006	3b f9		 cmp	 edi, ecx
  00008	76 02		 jbe	 SHORT $LN5@read_buf
  0000a	8b f9		 mov	 edi, ecx
$LN5@read_buf:

; 1172 :     if (len == 0) return 0;

  0000c	85 ff		 test	 edi, edi
  0000e	75 04		 jne	 SHORT $LN4@read_buf
  00010	33 c0		 xor	 eax, eax
  00012	5f		 pop	 edi

; 1189 : }

  00013	c3		 ret	 0
$LN4@read_buf:

; 1173 : 
; 1174 :     strm->avail_in  -= len;

  00014	2b c7		 sub	 eax, edi
  00016	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 1175 : 
; 1176 :     zmemcpy(buf, strm->next_in, len);

  00019	8b 06		 mov	 eax, DWORD PTR [esi]
  0001b	57		 push	 edi
  0001c	50		 push	 eax
  0001d	53		 push	 ebx
  0001e	e8 00 00 00 00	 call	 _memcpy

; 1177 :     if (strm->state->wrap == 1) {

  00023	8b 4e 1c	 mov	 ecx, DWORD PTR [esi+28]
  00026	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00029	83 c4 0c	 add	 esp, 12			; 0000000cH
  0002c	83 f8 01	 cmp	 eax, 1
  0002f	75 1a		 jne	 SHORT $LN3@read_buf

; 1178 :         strm->adler = adler32(strm->adler, buf, len);

  00031	8b 56 30	 mov	 edx, DWORD PTR [esi+48]
  00034	57		 push	 edi
  00035	53		 push	 ebx
  00036	52		 push	 edx
  00037	e8 00 00 00 00	 call	 _adler32

; 1183 :     }
; 1184 : #endif
; 1185 :     strm->next_in  += len;

  0003c	01 3e		 add	 DWORD PTR [esi], edi
  0003e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1186 :     strm->total_in += len;

  00041	01 7e 08	 add	 DWORD PTR [esi+8], edi
  00044	89 46 30	 mov	 DWORD PTR [esi+48], eax

; 1187 : 
; 1188 :     return len;

  00047	8b c7		 mov	 eax, edi
  00049	5f		 pop	 edi

; 1189 : }

  0004a	c3		 ret	 0
$LN3@read_buf:

; 1179 :     }
; 1180 : #ifdef GZIP
; 1181 :     else if (strm->state->wrap == 2) {

  0004b	83 f8 02	 cmp	 eax, 2
  0004e	75 11		 jne	 SHORT $LN1@read_buf

; 1182 :         strm->adler = crc32(strm->adler, buf, len);

  00050	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  00053	57		 push	 edi
  00054	53		 push	 ebx
  00055	50		 push	 eax
  00056	e8 00 00 00 00	 call	 _crc32
  0005b	89 46 30	 mov	 DWORD PTR [esi+48], eax
  0005e	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1@read_buf:

; 1183 :     }
; 1184 : #endif
; 1185 :     strm->next_in  += len;

  00061	01 3e		 add	 DWORD PTR [esi], edi

; 1186 :     strm->total_in += len;

  00063	01 7e 08	 add	 DWORD PTR [esi+8], edi

; 1187 : 
; 1188 :     return len;

  00066	8b c7		 mov	 eax, edi
  00068	5f		 pop	 edi

; 1189 : }

  00069	c3		 ret	 0
_read_buf ENDP
_TEXT	ENDS
PUBLIC	_deflateCopy
; Function compile flags: /Ogtp
;	COMDAT _deflateCopy
_TEXT	SEGMENT
_overlay$ = -4						; size = 4
_ss$ = -4						; size = 4
_dest$ = 8						; size = 4
_source$ = 12						; size = 4
_deflateCopy PROC					; COMDAT

; 1105 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi

; 1106 : #ifdef MAXSEG_64K
; 1107 :     return Z_STREAM_ERROR;
; 1108 : #else
; 1109 :     deflate_state *ds;
; 1110 :     deflate_state *ss;
; 1111 :     ushf *overlay;
; 1112 : 
; 1113 : 
; 1114 :     if (deflateStateCheck(source) || dest == Z_NULL) {

  00006	8b 75 0c	 mov	 esi, DWORD PTR _source$[ebp]
  00009	8b c6		 mov	 eax, esi
  0000b	e8 00 00 00 00	 call	 _deflateStateCheck
  00010	85 c0		 test	 eax, eax
  00012	0f 85 7f 01 00
	00		 jne	 $LN4@deflateCop
  00018	8b 5d 08	 mov	 ebx, DWORD PTR _dest$[ebp]
  0001b	85 db		 test	 ebx, ebx
  0001d	0f 84 74 01 00
	00		 je	 $LN4@deflateCop

; 1116 :     }
; 1117 : 
; 1118 :     ss = source->state;

  00023	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00026	57		 push	 edi

; 1119 : 
; 1120 :     zmemcpy((voidpf)dest, (voidpf)source, sizeof(z_stream));

  00027	b9 0e 00 00 00	 mov	 ecx, 14			; 0000000eH
  0002c	8b fb		 mov	 edi, ebx
  0002e	f3 a5		 rep movsd

; 1121 : 
; 1122 :     ds = (deflate_state *) ZALLOC(dest, 1, sizeof(deflate_state));

  00030	8b 4b 28	 mov	 ecx, DWORD PTR [ebx+40]
  00033	8b 53 20	 mov	 edx, DWORD PTR [ebx+32]
  00036	68 c4 16 00 00	 push	 5828			; 000016c4H
  0003b	6a 01		 push	 1
  0003d	51		 push	 ecx
  0003e	89 45 fc	 mov	 DWORD PTR _ss$[ebp], eax
  00041	ff d2		 call	 edx
  00043	8b f0		 mov	 esi, eax
  00045	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1123 :     if (ds == Z_NULL) return Z_MEM_ERROR;

  00048	85 f6		 test	 esi, esi
  0004a	0f 84 3b 01 00
	00		 je	 $LN9@deflateCop

; 1124 :     dest->state = (struct internal_state FAR *) ds;
; 1125 :     zmemcpy((voidpf)ds, (voidpf)ss, sizeof(deflate_state));

  00050	8b 7d fc	 mov	 edi, DWORD PTR _ss$[ebp]
  00053	68 c4 16 00 00	 push	 5828			; 000016c4H
  00058	57		 push	 edi
  00059	56		 push	 esi
  0005a	89 73 1c	 mov	 DWORD PTR [ebx+28], esi
  0005d	e8 00 00 00 00	 call	 _memcpy

; 1126 :     ds->strm = dest;
; 1127 : 
; 1128 :     ds->window = (Bytef *) ZALLOC(dest, ds->w_size, 2*sizeof(Byte));

  00062	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  00065	89 1e		 mov	 DWORD PTR [esi], ebx
  00067	8b 4b 28	 mov	 ecx, DWORD PTR [ebx+40]
  0006a	8b 53 20	 mov	 edx, DWORD PTR [ebx+32]
  0006d	6a 02		 push	 2
  0006f	50		 push	 eax
  00070	51		 push	 ecx
  00071	ff d2		 call	 edx
  00073	89 46 38	 mov	 DWORD PTR [esi+56], eax

; 1129 :     ds->prev   = (Posf *)  ZALLOC(dest, ds->w_size, sizeof(Pos));

  00076	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  00079	8b 4b 28	 mov	 ecx, DWORD PTR [ebx+40]
  0007c	8b 53 20	 mov	 edx, DWORD PTR [ebx+32]
  0007f	6a 02		 push	 2
  00081	50		 push	 eax
  00082	51		 push	 ecx
  00083	ff d2		 call	 edx
  00085	89 46 40	 mov	 DWORD PTR [esi+64], eax

; 1130 :     ds->head   = (Posf *)  ZALLOC(dest, ds->hash_size, sizeof(Pos));

  00088	8b 46 4c	 mov	 eax, DWORD PTR [esi+76]
  0008b	8b 4b 28	 mov	 ecx, DWORD PTR [ebx+40]
  0008e	8b 53 20	 mov	 edx, DWORD PTR [ebx+32]
  00091	6a 02		 push	 2
  00093	50		 push	 eax
  00094	51		 push	 ecx
  00095	ff d2		 call	 edx
  00097	89 46 44	 mov	 DWORD PTR [esi+68], eax

; 1131 :     overlay = (ushf *) ZALLOC(dest, ds->lit_bufsize, sizeof(ush)+2);

  0009a	8b 86 9c 16 00
	00		 mov	 eax, DWORD PTR [esi+5788]
  000a0	8b 4b 28	 mov	 ecx, DWORD PTR [ebx+40]
  000a3	8b 53 20	 mov	 edx, DWORD PTR [ebx+32]
  000a6	6a 04		 push	 4
  000a8	50		 push	 eax
  000a9	51		 push	 ecx
  000aa	ff d2		 call	 edx

; 1132 :     ds->pending_buf = (uchf *) overlay;
; 1133 : 
; 1134 :     if (ds->window == Z_NULL || ds->prev == Z_NULL || ds->head == Z_NULL ||
; 1135 :         ds->pending_buf == Z_NULL) {

  000ac	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  000af	83 c4 3c	 add	 esp, 60			; 0000003cH
  000b2	89 45 fc	 mov	 DWORD PTR _overlay$[ebp], eax
  000b5	89 46 08	 mov	 DWORD PTR [esi+8], eax
  000b8	85 c9		 test	 ecx, ecx
  000ba	0f 84 c2 00 00
	00		 je	 $LN1@deflateCop
  000c0	83 7e 40 00	 cmp	 DWORD PTR [esi+64], 0
  000c4	0f 84 b8 00 00
	00		 je	 $LN1@deflateCop
  000ca	83 7e 44 00	 cmp	 DWORD PTR [esi+68], 0
  000ce	0f 84 ae 00 00
	00		 je	 $LN1@deflateCop
  000d4	85 c0		 test	 eax, eax
  000d6	0f 84 a6 00 00
	00		 je	 $LN1@deflateCop

; 1138 :     }
; 1139 :     /* following zmemcpy do not work for 16-bit MSDOS */
; 1140 :     zmemcpy(ds->window, ss->window, ds->w_size * 2 * sizeof(Byte));

  000dc	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  000df	8b 57 38	 mov	 edx, DWORD PTR [edi+56]
  000e2	03 c0		 add	 eax, eax
  000e4	50		 push	 eax
  000e5	52		 push	 edx
  000e6	51		 push	 ecx
  000e7	e8 00 00 00 00	 call	 _memcpy

; 1141 :     zmemcpy((voidpf)ds->prev, (voidpf)ss->prev, ds->w_size * sizeof(Pos));

  000ec	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  000ef	8b 4f 40	 mov	 ecx, DWORD PTR [edi+64]
  000f2	8b 56 40	 mov	 edx, DWORD PTR [esi+64]
  000f5	03 c0		 add	 eax, eax
  000f7	50		 push	 eax
  000f8	51		 push	 ecx
  000f9	52		 push	 edx
  000fa	e8 00 00 00 00	 call	 _memcpy

; 1142 :     zmemcpy((voidpf)ds->head, (voidpf)ss->head, ds->hash_size * sizeof(Pos));

  000ff	8b 46 4c	 mov	 eax, DWORD PTR [esi+76]
  00102	8b 4f 44	 mov	 ecx, DWORD PTR [edi+68]
  00105	8b 56 44	 mov	 edx, DWORD PTR [esi+68]
  00108	03 c0		 add	 eax, eax
  0010a	50		 push	 eax
  0010b	51		 push	 ecx
  0010c	52		 push	 edx
  0010d	e8 00 00 00 00	 call	 _memcpy

; 1143 :     zmemcpy(ds->pending_buf, ss->pending_buf, (uInt)ds->pending_buf_size);

  00112	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00115	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00118	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  0011b	50		 push	 eax
  0011c	51		 push	 ecx
  0011d	52		 push	 edx
  0011e	e8 00 00 00 00	 call	 _memcpy

; 1144 : 
; 1145 :     ds->pending_out = ds->pending_buf + (ss->pending_out - ss->pending_buf);

  00123	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00126	2b 47 08	 sub	 eax, DWORD PTR [edi+8]
  00129	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 1146 :     ds->d_buf = overlay + ds->lit_bufsize/sizeof(ush);

  0012c	8b 7d fc	 mov	 edi, DWORD PTR _overlay$[ebp]
  0012f	03 c1		 add	 eax, ecx
  00131	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00134	8b 86 9c 16 00
	00		 mov	 eax, DWORD PTR [esi+5788]
  0013a	8b d0		 mov	 edx, eax

; 1147 :     ds->l_buf = ds->pending_buf + (1+sizeof(ush))*ds->lit_bufsize;

  0013c	8d 0c 41	 lea	 ecx, DWORD PTR [ecx+eax*2]
  0013f	d1 ea		 shr	 edx, 1
  00141	03 c8		 add	 ecx, eax
  00143	8d 14 57	 lea	 edx, DWORD PTR [edi+edx*2]
  00146	83 c4 30	 add	 esp, 48			; 00000030H
  00149	89 96 a4 16 00
	00		 mov	 DWORD PTR [esi+5796], edx
  0014f	89 8e 98 16 00
	00		 mov	 DWORD PTR [esi+5784], ecx

; 1148 : 
; 1149 :     ds->l_desc.dyn_tree = ds->dyn_ltree;
; 1150 :     ds->d_desc.dyn_tree = ds->dyn_dtree;

  00155	8d 86 88 09 00
	00		 lea	 eax, DWORD PTR [esi+2440]
  0015b	8d 96 94 00 00
	00		 lea	 edx, DWORD PTR [esi+148]

; 1151 :     ds->bl_desc.dyn_tree = ds->bl_tree;

  00161	8d 8e 7c 0a 00
	00		 lea	 ecx, DWORD PTR [esi+2684]
  00167	5f		 pop	 edi
  00168	89 86 24 0b 00
	00		 mov	 DWORD PTR [esi+2852], eax
  0016e	89 96 18 0b 00
	00		 mov	 DWORD PTR [esi+2840], edx
  00174	89 8e 30 0b 00
	00		 mov	 DWORD PTR [esi+2864], ecx
  0017a	5e		 pop	 esi

; 1152 : 
; 1153 :     return Z_OK;

  0017b	33 c0		 xor	 eax, eax
  0017d	5b		 pop	 ebx

; 1154 : #endif /* MAXSEG_64K */
; 1155 : }

  0017e	8b e5		 mov	 esp, ebp
  00180	5d		 pop	 ebp
  00181	c3		 ret	 0
$LN1@deflateCop:

; 1136 :         deflateEnd (dest);

  00182	53		 push	 ebx
  00183	e8 00 00 00 00	 call	 _deflateEnd
  00188	83 c4 04	 add	 esp, 4
$LN9@deflateCop:

; 1137 :         return Z_MEM_ERROR;

  0018b	5f		 pop	 edi
  0018c	5e		 pop	 esi
  0018d	b8 fc ff ff ff	 mov	 eax, -4			; fffffffcH
  00192	5b		 pop	 ebx

; 1154 : #endif /* MAXSEG_64K */
; 1155 : }

  00193	8b e5		 mov	 esp, ebp
  00195	5d		 pop	 ebp
  00196	c3		 ret	 0
$LN4@deflateCop:
  00197	5e		 pop	 esi

; 1115 :         return Z_STREAM_ERROR;

  00198	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  0019d	5b		 pop	 ebx

; 1154 : #endif /* MAXSEG_64K */
; 1155 : }

  0019e	8b e5		 mov	 esp, ebp
  001a0	5d		 pop	 ebp
  001a1	c3		 ret	 0
_deflateCopy ENDP
_TEXT	ENDS
PUBLIC	_deflateResetKeep
; Function compile flags: /Ogtp
;	COMDAT _deflateResetKeep
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_deflateResetKeep PROC					; COMDAT

; 469  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 470  :     deflate_state *s;
; 471  : 
; 472  :     if (deflateStateCheck(strm)) {

  00004	8b 7d 08	 mov	 edi, DWORD PTR _strm$[ebp]
  00007	8b c7		 mov	 eax, edi
  00009	e8 00 00 00 00	 call	 _deflateStateCheck
  0000e	85 c0		 test	 eax, eax
  00010	74 08		 je	 SHORT $LN2@deflateRes

; 473  :         return Z_STREAM_ERROR;

  00012	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  00017	5f		 pop	 edi

; 502  : }

  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
$LN2@deflateRes:
  0001a	53		 push	 ebx

; 474  :     }
; 475  : 
; 476  :     strm->total_in = strm->total_out = 0;

  0001b	33 db		 xor	 ebx, ebx
  0001d	89 5f 14	 mov	 DWORD PTR [edi+20], ebx
  00020	89 5f 08	 mov	 DWORD PTR [edi+8], ebx

; 477  :     strm->msg = Z_NULL; /* use zfree if we ever allocate msg dynamically */

  00023	89 5f 18	 mov	 DWORD PTR [edi+24], ebx

; 478  :     strm->data_type = Z_UNKNOWN;

  00026	c7 47 2c 02 00
	00 00		 mov	 DWORD PTR [edi+44], 2
  0002d	56		 push	 esi

; 479  : 
; 480  :     s = (deflate_state *)strm->state;

  0002e	8b 77 1c	 mov	 esi, DWORD PTR [edi+28]

; 481  :     s->pending = 0;
; 482  :     s->pending_out = s->pending_buf;

  00031	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00034	89 46 10	 mov	 DWORD PTR [esi+16], eax

; 483  : 
; 484  :     if (s->wrap < 0) {

  00037	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  0003a	89 5e 14	 mov	 DWORD PTR [esi+20], ebx
  0003d	3b c3		 cmp	 eax, ebx
  0003f	7d 05		 jge	 SHORT $LN1@deflateRes

; 485  :         s->wrap = -s->wrap; /* was made negative by deflate(..., Z_FINISH); */

  00041	f7 d8		 neg	 eax
  00043	89 46 18	 mov	 DWORD PTR [esi+24], eax
$LN1@deflateRes:

; 486  :     }
; 487  :     s->status =
; 488  : #ifdef GZIP
; 489  :         s->wrap == 2 ? GZIP_STATE :
; 490  : #endif
; 491  :         s->wrap ? INIT_STATE : BUSY_STATE;

  00046	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00049	83 f9 02	 cmp	 ecx, 2
  0004c	75 05		 jne	 SHORT $LN5@deflateRes
  0004e	8d 41 37	 lea	 eax, DWORD PTR [ecx+55]
  00051	eb 0c		 jmp	 SHORT $LN6@deflateRes
$LN5@deflateRes:
  00053	8b c1		 mov	 eax, ecx
  00055	f7 d8		 neg	 eax
  00057	1b c0		 sbb	 eax, eax
  00059	83 e0 b9	 and	 eax, -71		; ffffffb9H
  0005c	83 c0 71	 add	 eax, 113		; 00000071H
$LN6@deflateRes:

; 492  :     strm->adler =
; 493  : #ifdef GZIP
; 494  :         s->wrap == 2 ? crc32(0L, Z_NULL, 0) :
; 495  : #endif
; 496  :         adler32(0L, Z_NULL, 0);

  0005f	53		 push	 ebx
  00060	53		 push	 ebx
  00061	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00064	53		 push	 ebx
  00065	83 f9 02	 cmp	 ecx, 2
  00068	75 07		 jne	 SHORT $LN7@deflateRes
  0006a	e8 00 00 00 00	 call	 _crc32
  0006f	eb 05		 jmp	 SHORT $LN9@deflateRes
$LN7@deflateRes:
  00071	e8 00 00 00 00	 call	 _adler32
$LN9@deflateRes:
  00076	89 47 30	 mov	 DWORD PTR [edi+48], eax
  00079	83 c4 0c	 add	 esp, 12			; 0000000cH

; 497  :     s->last_flush = Z_NO_FLUSH;
; 498  : 
; 499  :     _tr_init(s);

  0007c	8b d6		 mov	 edx, esi
  0007e	89 5e 28	 mov	 DWORD PTR [esi+40], ebx
  00081	e8 00 00 00 00	 call	 __tr_init
  00086	5e		 pop	 esi
  00087	5b		 pop	 ebx

; 500  : 
; 501  :     return Z_OK;

  00088	33 c0		 xor	 eax, eax
  0008a	5f		 pop	 edi

; 502  : }

  0008b	5d		 pop	 ebp
  0008c	c3		 ret	 0
_deflateResetKeep ENDP
; Function compile flags: /Ogtp
;	COMDAT _deflate_stored
_TEXT	SEGMENT
_used$ = -20						; size = 4
_min_block$ = -16					; size = 4
_left$ = -12						; size = 4
_len$ = -8						; size = 4
_last$ = -4						; size = 4
_have$ = 8						; size = 4
_s$ = 8							; size = 4
_flush$ = 12						; size = 4
_deflate_stored PROC					; COMDAT

; 1646 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1647 :     /* Smallest worthy block size when not flushing or finishing. By default
; 1648 :      * this is 32K. This can be as small as 507 bytes for memLevel == 1. For
; 1649 :      * large input and output buffers, the stored block size will be larger.
; 1650 :      */
; 1651 :     unsigned min_block = MIN(s->pending_buf_size - 5, s->w_size);

  00009	8b 7d 08	 mov	 edi, DWORD PTR _s$[ebp]
  0000c	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  0000f	8b 4f 2c	 mov	 ecx, DWORD PTR [edi+44]
  00012	83 c0 fb	 add	 eax, -5			; fffffffbH
  00015	89 4d f0	 mov	 DWORD PTR _min_block$[ebp], ecx
  00018	3b c1		 cmp	 eax, ecx
  0001a	77 03		 ja	 SHORT $LN32@deflate_st
  0001c	89 45 f0	 mov	 DWORD PTR _min_block$[ebp], eax
$LN32@deflate_st:

; 1652 : 
; 1653 :     /* Copy as many min_block or larger stored blocks directly to next_out as
; 1654 :      * possible. If flushing, copy the remaining available input to next_out as
; 1655 :      * stored blocks, if there is enough space.
; 1656 :      */
; 1657 :     unsigned len, left, have, last = 0;
; 1658 :     unsigned used = s->strm->avail_in;

  0001f	8b 07		 mov	 eax, DWORD PTR [edi]
  00021	8b 58 04	 mov	 ebx, DWORD PTR [eax+4]
  00024	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _last$[ebp], 0
  0002b	89 5d ec	 mov	 DWORD PTR _used$[ebp], ebx
  0002e	8b ff		 npad	 2
$LL28@deflate_st:

; 1659 :     do {
; 1660 :         /* Set len to the maximum size block that we can copy directly with the
; 1661 :          * available input data and output space. Set left to how much of that
; 1662 :          * would be copied from what's left in the window.
; 1663 :          */
; 1664 :         len = MAX_STORED;       /* maximum deflate stored block length */
; 1665 :         have = (s->bi_valid + 42) >> 3;         /* number of header bytes */

  00030	8b 87 bc 16 00
	00		 mov	 eax, DWORD PTR [edi+5820]

; 1666 :         if (s->strm->avail_out < have)          /* need room for header */

  00036	8b 17		 mov	 edx, DWORD PTR [edi]
  00038	8b 4a 10	 mov	 ecx, DWORD PTR [edx+16]
  0003b	83 c0 2a	 add	 eax, 42			; 0000002aH
  0003e	c1 f8 03	 sar	 eax, 3
  00041	be ff ff 00 00	 mov	 esi, 65535		; 0000ffffH
  00046	89 75 f8	 mov	 DWORD PTR _len$[ebp], esi
  00049	3b c8		 cmp	 ecx, eax
  0004b	0f 82 26 01 00
	00		 jb	 $LN26@deflate_st

; 1667 :             break;
; 1668 :             /* maximum stored block length that will fit in avail_out: */
; 1669 :         have = s->strm->avail_out - have;
; 1670 :         left = s->strstart - s->block_start;    /* bytes left in window */
; 1671 :         if (len > (ulg)left + s->strm->avail_in)

  00051	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  00054	2b c8		 sub	 ecx, eax
  00056	8b 47 6c	 mov	 eax, DWORD PTR [edi+108]
  00059	2b 47 5c	 sub	 eax, DWORD PTR [edi+92]
  0005c	89 45 f4	 mov	 DWORD PTR _left$[ebp], eax
  0005f	03 c2		 add	 eax, edx
  00061	3b c6		 cmp	 eax, esi
  00063	73 05		 jae	 SHORT $LN24@deflate_st

; 1672 :             len = left + s->strm->avail_in;     /* limit len to the input */

  00065	89 45 f8	 mov	 DWORD PTR _len$[ebp], eax
  00068	8b f0		 mov	 esi, eax
$LN24@deflate_st:

; 1673 :         if (len > have)

  0006a	3b f1		 cmp	 esi, ecx
  0006c	76 05		 jbe	 SHORT $LN23@deflate_st

; 1674 :             len = have;                         /* limit len to the output */

  0006e	89 4d f8	 mov	 DWORD PTR _len$[ebp], ecx
  00071	8b f1		 mov	 esi, ecx
$LN23@deflate_st:

; 1675 : 
; 1676 :         /* If the stored block would be less than min_block in length, or if
; 1677 :          * unable to copy all of the available input when flushing, then try
; 1678 :          * copying to the window and the pending buffer instead. Also don't
; 1679 :          * write an empty block when flushing -- deflate() does that.
; 1680 :          */
; 1681 :         if (len < min_block && ((len == 0 && flush != Z_FINISH) ||
; 1682 :                                 flush == Z_NO_FLUSH ||
; 1683 :                                 len != left + s->strm->avail_in))

  00073	3b 75 f0	 cmp	 esi, DWORD PTR _min_block$[ebp]
  00076	73 20		 jae	 SHORT $LN49@deflate_st
  00078	85 f6		 test	 esi, esi
  0007a	75 0a		 jne	 SHORT $LN48@deflate_st
  0007c	83 7d 0c 04	 cmp	 DWORD PTR _flush$[ebp], 4
  00080	0f 85 f1 00 00
	00		 jne	 $LN26@deflate_st
$LN48@deflate_st:
  00086	83 7d 0c 00	 cmp	 DWORD PTR _flush$[ebp], 0
  0008a	0f 84 e7 00 00
	00		 je	 $LN26@deflate_st
  00090	3b f0		 cmp	 esi, eax
  00092	0f 85 df 00 00
	00		 jne	 $LN26@deflate_st
$LN49@deflate_st:

; 1684 :             break;
; 1685 : 
; 1686 :         /* Make a dummy stored block in pending to get the header bytes,
; 1687 :          * including any pending bits. This also updates the debugging counts.
; 1688 :          */
; 1689 :         last = flush == Z_FINISH && len == left + s->strm->avail_in ? 1 : 0;

  00098	83 7d 0c 04	 cmp	 DWORD PTR _flush$[ebp], 4
  0009c	75 0b		 jne	 SHORT $LN33@deflate_st
  0009e	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _last$[ebp], 1
  000a5	3b f0		 cmp	 esi, eax
  000a7	74 07		 je	 SHORT $LN34@deflate_st
$LN33@deflate_st:
  000a9	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _last$[ebp], 0
$LN34@deflate_st:

; 1690 :         _tr_stored_block(s, (char *)0, 0L, last);

  000b0	8b 45 fc	 mov	 eax, DWORD PTR _last$[ebp]
  000b3	6a 00		 push	 0
  000b5	33 db		 xor	 ebx, ebx
  000b7	8b f7		 mov	 esi, edi
  000b9	e8 00 00 00 00	 call	 __tr_stored_block

; 1691 : 
; 1692 :         /* Replace the lengths in the dummy stored block with len. */
; 1693 :         s->pending_buf[s->pending - 4] = len;

  000be	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  000c1	8b 4f 14	 mov	 ecx, DWORD PTR [edi+20]
  000c4	8b 5d f8	 mov	 ebx, DWORD PTR _len$[ebp]
  000c7	88 5c 08 fc	 mov	 BYTE PTR [eax+ecx-4], bl

; 1694 :         s->pending_buf[s->pending - 3] = len >> 8;

  000cb	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  000ce	8b 4f 14	 mov	 ecx, DWORD PTR [edi+20]
  000d1	8b d3		 mov	 edx, ebx
  000d3	c1 ea 08	 shr	 edx, 8
  000d6	88 54 08 fd	 mov	 BYTE PTR [eax+ecx-3], dl

; 1695 :         s->pending_buf[s->pending - 2] = ~len;

  000da	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  000dd	8b 4f 14	 mov	 ecx, DWORD PTR [edi+20]
  000e0	8a d3		 mov	 dl, bl
  000e2	f6 d2		 not	 dl
  000e4	88 54 08 fe	 mov	 BYTE PTR [eax+ecx-2], dl

; 1696 :         s->pending_buf[s->pending - 1] = ~len >> 8;

  000e8	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  000eb	8b 4f 14	 mov	 ecx, DWORD PTR [edi+20]
  000ee	8b d3		 mov	 edx, ebx
  000f0	f7 d2		 not	 edx
  000f2	c1 ea 08	 shr	 edx, 8
  000f5	88 54 08 ff	 mov	 BYTE PTR [eax+ecx-1], dl

; 1697 : 
; 1698 :         /* Write the stored block header bytes. */
; 1699 :         flush_pending(s->strm);

  000f9	8b 3f		 mov	 edi, DWORD PTR [edi]
  000fb	83 c4 04	 add	 esp, 4
  000fe	e8 00 00 00 00	 call	 _flush_pending

; 1700 : 
; 1701 : #ifdef ZLIB_DEBUG
; 1702 :         /* Update debugging counts for the data about to be copied. */
; 1703 :         s->compressed_len += len << 3;
; 1704 :         s->bits_sent += len << 3;
; 1705 : #endif
; 1706 : 
; 1707 :         /* Copy uncompressed bytes from the window to next_out. */
; 1708 :         if (left) {

  00103	8b 75 f4	 mov	 esi, DWORD PTR _left$[ebp]
  00106	85 f6		 test	 esi, esi
  00108	74 38		 je	 SHORT $LN50@deflate_st

; 1709 :             if (left > len)

  0010a	3b f3		 cmp	 esi, ebx
  0010c	76 02		 jbe	 SHORT $LN18@deflate_st

; 1710 :                 left = len;

  0010e	8b f3		 mov	 esi, ebx
$LN18@deflate_st:

; 1711 :             zmemcpy(s->strm->next_out, s->window + s->block_start, left);

  00110	8b 7d 08	 mov	 edi, DWORD PTR _s$[ebp]
  00113	8b 57 38	 mov	 edx, DWORD PTR [edi+56]
  00116	03 57 5c	 add	 edx, DWORD PTR [edi+92]
  00119	8b 07		 mov	 eax, DWORD PTR [edi]
  0011b	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0011e	56		 push	 esi
  0011f	52		 push	 edx
  00120	51		 push	 ecx
  00121	e8 00 00 00 00	 call	 _memcpy

; 1712 :             s->strm->next_out += left;

  00126	8b 07		 mov	 eax, DWORD PTR [edi]
  00128	01 70 0c	 add	 DWORD PTR [eax+12], esi

; 1713 :             s->strm->avail_out -= left;

  0012b	8b 07		 mov	 eax, DWORD PTR [edi]
  0012d	29 70 10	 sub	 DWORD PTR [eax+16], esi

; 1714 :             s->strm->total_out += left;

  00130	8b 07		 mov	 eax, DWORD PTR [edi]
  00132	01 70 14	 add	 DWORD PTR [eax+20], esi

; 1715 :             s->block_start += left;

  00135	01 77 5c	 add	 DWORD PTR [edi+92], esi
  00138	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1716 :             len -= left;

  0013b	2b de		 sub	 ebx, esi
  0013d	89 5d f8	 mov	 DWORD PTR _len$[ebp], ebx
  00140	eb 03		 jmp	 SHORT $LN19@deflate_st
$LN50@deflate_st:
  00142	8b 7d 08	 mov	 edi, DWORD PTR _s$[ebp]
$LN19@deflate_st:

; 1717 :         }
; 1718 : 
; 1719 :         /* Copy uncompressed bytes directly from next_in to next_out, updating
; 1720 :          * the check value.
; 1721 :          */
; 1722 :         if (len) {

  00145	85 db		 test	 ebx, ebx
  00147	74 1e		 je	 SHORT $LN27@deflate_st

; 1723 :             read_buf(s->strm, s->strm->next_out, len);

  00149	8b 37		 mov	 esi, DWORD PTR [edi]
  0014b	8b cb		 mov	 ecx, ebx
  0014d	8b 5e 0c	 mov	 ebx, DWORD PTR [esi+12]
  00150	e8 00 00 00 00	 call	 _read_buf

; 1724 :             s->strm->next_out += len;

  00155	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00157	8b 45 f8	 mov	 eax, DWORD PTR _len$[ebp]
  0015a	01 41 0c	 add	 DWORD PTR [ecx+12], eax

; 1725 :             s->strm->avail_out -= len;

  0015d	8b 0f		 mov	 ecx, DWORD PTR [edi]
  0015f	29 41 10	 sub	 DWORD PTR [ecx+16], eax

; 1726 :             s->strm->total_out += len;

  00162	8b 3f		 mov	 edi, DWORD PTR [edi]
  00164	01 47 14	 add	 DWORD PTR [edi+20], eax
$LN27@deflate_st:

; 1727 :         }
; 1728 :     } while (last == 0);

  00167	83 7d fc 00	 cmp	 DWORD PTR _last$[ebp], 0
  0016b	8b 5d ec	 mov	 ebx, DWORD PTR _used$[ebp]
  0016e	8b 7d 08	 mov	 edi, DWORD PTR _s$[ebp]
  00171	0f 84 b9 fe ff
	ff		 je	 $LL28@deflate_st
$LN26@deflate_st:

; 1729 : 
; 1730 :     /* Update the sliding window with the last s->w_size bytes of the copied
; 1731 :      * data, or append all of the copied data to the existing window if less
; 1732 :      * than s->w_size bytes were copied. Also update the number of bytes to
; 1733 :      * insert in the hash tables, in the event that deflateParams() switches to
; 1734 :      * a non-zero compression level.
; 1735 :      */
; 1736 :     used -= s->strm->avail_in;      /* number of input bytes directly copied */

  00177	8b 07		 mov	 eax, DWORD PTR [edi]
  00179	2b 58 04	 sub	 ebx, DWORD PTR [eax+4]

; 1737 :     if (used) {

  0017c	0f 84 98 00 00
	00		 je	 $LN53@deflate_st

; 1738 :         /* If any input was used, then no unused input remains in the window,
; 1739 :          * therefore s->block_start == s->strstart.
; 1740 :          */
; 1741 :         if (used >= s->w_size) {    /* supplant the previous history */

  00182	8b 4f 2c	 mov	 ecx, DWORD PTR [edi+44]
  00185	3b d9		 cmp	 ebx, ecx
  00187	72 24		 jb	 SHORT $LN15@deflate_st

; 1742 :             s->matches = 2;         /* clear hash */

  00189	c7 87 b0 16 00
	00 02 00 00 00	 mov	 DWORD PTR [edi+5808], 2

; 1743 :             zmemcpy(s->window, s->strm->next_in - s->w_size, s->w_size);

  00193	8b 10		 mov	 edx, DWORD PTR [eax]
  00195	8b 47 38	 mov	 eax, DWORD PTR [edi+56]
  00198	51		 push	 ecx
  00199	2b d1		 sub	 edx, ecx
  0019b	52		 push	 edx
  0019c	50		 push	 eax
  0019d	e8 00 00 00 00	 call	 _memcpy

; 1744 :             s->strstart = s->w_size;

  001a2	8b 4f 2c	 mov	 ecx, DWORD PTR [edi+44]
  001a5	83 c4 0c	 add	 esp, 12			; 0000000cH
  001a8	89 4f 6c	 mov	 DWORD PTR [edi+108], ecx

; 1745 :         }
; 1746 :         else {

  001ab	eb 4e		 jmp	 SHORT $LN14@deflate_st
$LN15@deflate_st:

; 1747 :             if (s->window_size - s->strstart <= used) {

  001ad	8b 47 6c	 mov	 eax, DWORD PTR [edi+108]
  001b0	8b 57 3c	 mov	 edx, DWORD PTR [edi+60]
  001b3	2b d0		 sub	 edx, eax
  001b5	3b d3		 cmp	 edx, ebx
  001b7	77 28		 ja	 SHORT $LN12@deflate_st

; 1748 :                 /* Slide the window down. */
; 1749 :                 s->strstart -= s->w_size;
; 1750 :                 zmemcpy(s->window, s->window + s->w_size, s->strstart);

  001b9	8b 57 38	 mov	 edx, DWORD PTR [edi+56]
  001bc	2b c1		 sub	 eax, ecx
  001be	50		 push	 eax
  001bf	89 47 6c	 mov	 DWORD PTR [edi+108], eax
  001c2	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
  001c5	50		 push	 eax
  001c6	52		 push	 edx
  001c7	e8 00 00 00 00	 call	 _memcpy

; 1751 :                 if (s->matches < 2)

  001cc	8b 87 b0 16 00
	00		 mov	 eax, DWORD PTR [edi+5808]
  001d2	83 c4 0c	 add	 esp, 12			; 0000000cH
  001d5	83 f8 02	 cmp	 eax, 2
  001d8	73 07		 jae	 SHORT $LN12@deflate_st

; 1752 :                     s->matches++;   /* add a pending slide_hash() */

  001da	40		 inc	 eax
  001db	89 87 b0 16 00
	00		 mov	 DWORD PTR [edi+5808], eax
$LN12@deflate_st:

; 1753 :             }
; 1754 :             zmemcpy(s->window + s->strstart, s->strm->next_in - used, used);

  001e1	8b 0f		 mov	 ecx, DWORD PTR [edi]
  001e3	8b 11		 mov	 edx, DWORD PTR [ecx]
  001e5	8b 47 38	 mov	 eax, DWORD PTR [edi+56]
  001e8	03 47 6c	 add	 eax, DWORD PTR [edi+108]
  001eb	53		 push	 ebx
  001ec	2b d3		 sub	 edx, ebx
  001ee	52		 push	 edx
  001ef	50		 push	 eax
  001f0	e8 00 00 00 00	 call	 _memcpy
  001f5	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1755 :             s->strstart += used;

  001f8	01 5f 6c	 add	 DWORD PTR [edi+108], ebx
$LN14@deflate_st:

; 1756 :         }
; 1757 :         s->block_start = s->strstart;

  001fb	8b 4f 6c	 mov	 ecx, DWORD PTR [edi+108]

; 1758 :         s->insert += MIN(used, s->w_size - s->insert);

  001fe	8b 47 2c	 mov	 eax, DWORD PTR [edi+44]
  00201	89 4f 5c	 mov	 DWORD PTR [edi+92], ecx
  00204	8b 8f b4 16 00
	00		 mov	 ecx, DWORD PTR [edi+5812]
  0020a	2b c1		 sub	 eax, ecx
  0020c	3b d8		 cmp	 ebx, eax
  0020e	77 02		 ja	 SHORT $LN36@deflate_st
  00210	8b c3		 mov	 eax, ebx
$LN36@deflate_st:
  00212	03 c8		 add	 ecx, eax
  00214	89 8f b4 16 00
	00		 mov	 DWORD PTR [edi+5812], ecx
$LN53@deflate_st:

; 1759 :     }
; 1760 :     if (s->high_water < s->strstart)

  0021a	8b 47 6c	 mov	 eax, DWORD PTR [edi+108]
  0021d	39 87 c0 16 00
	00		 cmp	 DWORD PTR [edi+5824], eax
  00223	73 06		 jae	 SHORT $LN11@deflate_st

; 1761 :         s->high_water = s->strstart;

  00225	89 87 c0 16 00
	00		 mov	 DWORD PTR [edi+5824], eax
$LN11@deflate_st:

; 1762 : 
; 1763 :     /* If the last block was written to next_out, then done. */
; 1764 :     if (last)

  0022b	83 7d fc 00	 cmp	 DWORD PTR _last$[ebp], 0
  0022f	74 0c		 je	 SHORT $LN10@deflate_st

; 1765 :         return finish_done;

  00231	5f		 pop	 edi
  00232	5e		 pop	 esi
  00233	b8 03 00 00 00	 mov	 eax, 3
  00238	5b		 pop	 ebx

; 1815 : }

  00239	8b e5		 mov	 esp, ebp
  0023b	5d		 pop	 ebp
  0023c	c3		 ret	 0
$LN10@deflate_st:

; 1766 : 
; 1767 :     /* If flushing and all input has been consumed, then done. */
; 1768 :     if (flush != Z_NO_FLUSH && flush != Z_FINISH &&
; 1769 :         s->strm->avail_in == 0 && (long)s->strstart == s->block_start)

  0023d	8b 4d 0c	 mov	 ecx, DWORD PTR _flush$[ebp]
  00240	85 c9		 test	 ecx, ecx
  00242	74 1e		 je	 SHORT $LN9@deflate_st
  00244	83 f9 04	 cmp	 ecx, 4
  00247	74 19		 je	 SHORT $LN9@deflate_st
  00249	8b 17		 mov	 edx, DWORD PTR [edi]
  0024b	83 7a 04 00	 cmp	 DWORD PTR [edx+4], 0
  0024f	75 11		 jne	 SHORT $LN9@deflate_st
  00251	3b 47 5c	 cmp	 eax, DWORD PTR [edi+92]
  00254	75 0c		 jne	 SHORT $LN9@deflate_st

; 1770 :         return block_done;

  00256	5f		 pop	 edi
  00257	5e		 pop	 esi
  00258	b8 01 00 00 00	 mov	 eax, 1
  0025d	5b		 pop	 ebx

; 1815 : }

  0025e	8b e5		 mov	 esp, ebp
  00260	5d		 pop	 ebp
  00261	c3		 ret	 0
$LN9@deflate_st:

; 1771 : 
; 1772 :     /* Fill the window with any remaining input. */
; 1773 :     have = s->window_size - s->strstart - 1;

  00262	8b 77 3c	 mov	 esi, DWORD PTR [edi+60]

; 1774 :     if (s->strm->avail_in > have && s->block_start >= (long)s->w_size) {

  00265	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00267	2b f0		 sub	 esi, eax
  00269	4e		 dec	 esi
  0026a	89 75 08	 mov	 DWORD PTR _have$[ebp], esi
  0026d	39 71 04	 cmp	 DWORD PTR [ecx+4], esi
  00270	76 3c		 jbe	 SHORT $LN8@deflate_st
  00272	8b 4f 5c	 mov	 ecx, DWORD PTR [edi+92]
  00275	8b 57 2c	 mov	 edx, DWORD PTR [edi+44]
  00278	3b ca		 cmp	 ecx, edx
  0027a	7c 32		 jl	 SHORT $LN8@deflate_st

; 1775 :         /* Slide the window down. */
; 1776 :         s->block_start -= s->w_size;

  0027c	2b ca		 sub	 ecx, edx

; 1777 :         s->strstart -= s->w_size;

  0027e	2b c2		 sub	 eax, edx
  00280	89 4f 5c	 mov	 DWORD PTR [edi+92], ecx

; 1778 :         zmemcpy(s->window, s->window + s->w_size, s->strstart);

  00283	8b 4f 38	 mov	 ecx, DWORD PTR [edi+56]
  00286	50		 push	 eax
  00287	03 d1		 add	 edx, ecx
  00289	52		 push	 edx
  0028a	51		 push	 ecx
  0028b	89 47 6c	 mov	 DWORD PTR [edi+108], eax
  0028e	e8 00 00 00 00	 call	 _memcpy

; 1779 :         if (s->matches < 2)

  00293	8b 87 b0 16 00
	00		 mov	 eax, DWORD PTR [edi+5808]
  00299	83 c4 0c	 add	 esp, 12			; 0000000cH
  0029c	83 f8 02	 cmp	 eax, 2
  0029f	73 07		 jae	 SHORT $LN7@deflate_st

; 1780 :             s->matches++;           /* add a pending slide_hash() */

  002a1	40		 inc	 eax
  002a2	89 87 b0 16 00
	00		 mov	 DWORD PTR [edi+5808], eax
$LN7@deflate_st:

; 1781 :         have += s->w_size;          /* more space now */

  002a8	03 77 2c	 add	 esi, DWORD PTR [edi+44]
  002ab	89 75 08	 mov	 DWORD PTR _have$[ebp], esi
$LN8@deflate_st:

; 1782 :     }
; 1783 :     if (have > s->strm->avail_in)

  002ae	8b 17		 mov	 edx, DWORD PTR [edi]
  002b0	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  002b3	3b f0		 cmp	 esi, eax
  002b5	76 05		 jbe	 SHORT $LN6@deflate_st

; 1784 :         have = s->strm->avail_in;

  002b7	89 45 08	 mov	 DWORD PTR _have$[ebp], eax
  002ba	8b f0		 mov	 esi, eax
$LN6@deflate_st:

; 1785 :     if (have) {

  002bc	85 f6		 test	 esi, esi
  002be	74 15		 je	 SHORT $LN5@deflate_st

; 1786 :         read_buf(s->strm, s->window + s->strstart, have);

  002c0	8b 5f 38	 mov	 ebx, DWORD PTR [edi+56]
  002c3	03 5f 6c	 add	 ebx, DWORD PTR [edi+108]
  002c6	8b ce		 mov	 ecx, esi
  002c8	8b f2		 mov	 esi, edx
  002ca	e8 00 00 00 00	 call	 _read_buf

; 1787 :         s->strstart += have;

  002cf	8b 45 08	 mov	 eax, DWORD PTR _have$[ebp]
  002d2	01 47 6c	 add	 DWORD PTR [edi+108], eax
$LN5@deflate_st:

; 1788 :     }
; 1789 :     if (s->high_water < s->strstart)

  002d5	8b 57 6c	 mov	 edx, DWORD PTR [edi+108]
  002d8	39 97 c0 16 00
	00		 cmp	 DWORD PTR [edi+5824], edx
  002de	73 06		 jae	 SHORT $LN4@deflate_st

; 1790 :         s->high_water = s->strstart;

  002e0	89 97 c0 16 00
	00		 mov	 DWORD PTR [edi+5824], edx
$LN4@deflate_st:

; 1791 : 
; 1792 :     /* There was not enough avail_out to write a complete worthy or flushed
; 1793 :      * stored block to next_out. Write a stored block to pending instead, if we
; 1794 :      * have enough input for a worthy block, or if flushing and there is enough
; 1795 :      * room for the remaining input as a stored block in the pending buffer.
; 1796 :      */
; 1797 :     have = (s->bi_valid + 42) >> 3;         /* number of header bytes */

  002e6	8b 87 bc 16 00
	00		 mov	 eax, DWORD PTR [edi+5820]

; 1798 :         /* maximum stored block length that will fit in pending: */
; 1799 :     have = MIN(s->pending_buf_size - have, MAX_STORED);

  002ec	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  002ef	83 c0 2a	 add	 eax, 42			; 0000002aH
  002f2	c1 f8 03	 sar	 eax, 3
  002f5	2b c8		 sub	 ecx, eax
  002f7	bb ff ff 00 00	 mov	 ebx, 65535		; 0000ffffH
  002fc	81 f9 ff ff 00
	00		 cmp	 ecx, 65535		; 0000ffffH
  00302	77 02		 ja	 SHORT $LN38@deflate_st
  00304	8b d9		 mov	 ebx, ecx
$LN38@deflate_st:

; 1800 :     min_block = MIN(have, s->w_size);

  00306	8b 77 2c	 mov	 esi, DWORD PTR [edi+44]
  00309	3b de		 cmp	 ebx, esi
  0030b	77 02		 ja	 SHORT $LN40@deflate_st
  0030d	8b f3		 mov	 esi, ebx
$LN40@deflate_st:

; 1801 :     left = s->strstart - s->block_start;

  0030f	8b 4f 5c	 mov	 ecx, DWORD PTR [edi+92]
  00312	2b d1		 sub	 edx, ecx
  00314	8b c2		 mov	 eax, edx

; 1802 :     if (left >= min_block ||
; 1803 :         ((left || flush == Z_FINISH) && flush != Z_NO_FLUSH &&
; 1804 :          s->strm->avail_in == 0 && left <= have)) {

  00316	3b c6		 cmp	 eax, esi
  00318	73 1e		 jae	 SHORT $LN2@deflate_st
  0031a	85 c0		 test	 eax, eax
  0031c	75 06		 jne	 SHORT $LN55@deflate_st
  0031e	83 7d 0c 04	 cmp	 DWORD PTR _flush$[ebp], 4
  00322	75 57		 jne	 SHORT $LN3@deflate_st
$LN55@deflate_st:
  00324	83 7d 0c 00	 cmp	 DWORD PTR _flush$[ebp], 0
  00328	74 51		 je	 SHORT $LN3@deflate_st
  0032a	8b 17		 mov	 edx, DWORD PTR [edi]
  0032c	83 7a 04 00	 cmp	 DWORD PTR [edx+4], 0
  00330	75 49		 jne	 SHORT $LN3@deflate_st
  00332	3b c3		 cmp	 eax, ebx
  00334	77 45		 ja	 SHORT $LN3@deflate_st

; 1805 :         len = MIN(left, have);

  00336	eb 04		 jmp	 SHORT $LN41@deflate_st
$LN2@deflate_st:
  00338	3b c3		 cmp	 eax, ebx
  0033a	77 02		 ja	 SHORT $LN42@deflate_st
$LN41@deflate_st:
  0033c	8b d8		 mov	 ebx, eax
$LN42@deflate_st:

; 1806 :         last = flush == Z_FINISH && s->strm->avail_in == 0 &&
; 1807 :                len == left ? 1 : 0;

  0033e	83 7d 0c 04	 cmp	 DWORD PTR _flush$[ebp], 4
  00342	75 13		 jne	 SHORT $LN54@deflate_st
  00344	8b 17		 mov	 edx, DWORD PTR [edi]
  00346	83 7a 04 00	 cmp	 DWORD PTR [edx+4], 0
  0034a	75 0b		 jne	 SHORT $LN54@deflate_st
  0034c	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _last$[ebp], 1
  00353	3b d8		 cmp	 ebx, eax
  00355	74 07		 je	 SHORT $LN44@deflate_st
$LN54@deflate_st:
  00357	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _last$[ebp], 0
$LN44@deflate_st:

; 1808 :         _tr_stored_block(s, (charf *)s->window + s->block_start, len, last);

  0035e	8b 47 38	 mov	 eax, DWORD PTR [edi+56]
  00361	03 c1		 add	 eax, ecx
  00363	50		 push	 eax
  00364	8b 45 fc	 mov	 eax, DWORD PTR _last$[ebp]
  00367	8b f7		 mov	 esi, edi
  00369	e8 00 00 00 00	 call	 __tr_stored_block

; 1809 :         s->block_start += len;

  0036e	01 5f 5c	 add	 DWORD PTR [edi+92], ebx

; 1810 :         flush_pending(s->strm);

  00371	8b 3f		 mov	 edi, DWORD PTR [edi]
  00373	83 c4 04	 add	 esp, 4
  00376	e8 00 00 00 00	 call	 _flush_pending
$LN3@deflate_st:

; 1811 :     }
; 1812 : 
; 1813 :     /* We've done all we can with the available input and output. */
; 1814 :     return last ? finish_started : need_more;

  0037b	8b 45 fc	 mov	 eax, DWORD PTR _last$[ebp]
  0037e	f7 d8		 neg	 eax
  00380	5f		 pop	 edi
  00381	1b c0		 sbb	 eax, eax
  00383	5e		 pop	 esi
  00384	83 e0 02	 and	 eax, 2
  00387	5b		 pop	 ebx

; 1815 : }

  00388	8b e5		 mov	 esp, ebp
  0038a	5d		 pop	 ebp
  0038b	c3		 ret	 0
_deflate_stored ENDP
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT _fill_window
_TEXT	SEGMENT
_wsize$ = -4						; size = 4
_fill_window PROC					; COMDAT
; _s$ = eax

; 1484 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b f8		 mov	 edi, eax

; 1485 :     unsigned n;
; 1486 :     unsigned more;    /* Amount of free space at the end of the window. */
; 1487 :     uInt wsize = s->w_size;

  00009	8b 5f 2c	 mov	 ebx, DWORD PTR [edi+44]
  0000c	89 5d fc	 mov	 DWORD PTR _wsize$[ebp], ebx
  0000f	eb 03		 jmp	 SHORT $LN20@fill_windo
$LL27@fill_windo:
  00011	8b 5d fc	 mov	 ebx, DWORD PTR _wsize$[ebp]
$LN20@fill_windo:

; 1488 : 
; 1489 :     Assert(s->lookahead < MIN_LOOKAHEAD, "already enough lookahead");
; 1490 : 
; 1491 :     do {
; 1492 :         more = (unsigned)(s->window_size -(ulg)s->lookahead -(ulg)s->strstart);

  00014	8b 77 3c	 mov	 esi, DWORD PTR [edi+60]
  00017	2b 77 74	 sub	 esi, DWORD PTR [edi+116]
  0001a	8b 47 6c	 mov	 eax, DWORD PTR [edi+108]

; 1493 : 
; 1494 :         /* Deal with !@#$% 64K limit: */
; 1495 :         if (sizeof(int) <= 2) {
; 1496 :             if (more == 0 && s->strstart == 0 && s->lookahead == 0) {
; 1497 :                 more = wsize;
; 1498 : 
; 1499 :             } else if (more == (unsigned)(-1)) {
; 1500 :                 /* Very unlikely, but possible on 16 bit machine if
; 1501 :                  * strstart == 0 && lookahead == 1 (input done a byte at time)
; 1502 :                  */
; 1503 :                 more--;
; 1504 :             }
; 1505 :         }
; 1506 : 
; 1507 :         /* If the window is almost full and there is insufficient lookahead,
; 1508 :          * move the upper half to the lower one to make room in the upper half.
; 1509 :          */
; 1510 :         if (s->strstart >= wsize+MAX_DIST(s)) {

  0001d	8b 4f 2c	 mov	 ecx, DWORD PTR [edi+44]
  00020	8d 94 0b fa fe
	ff ff		 lea	 edx, DWORD PTR [ebx+ecx-262]
  00027	2b f0		 sub	 esi, eax
  00029	3b c2		 cmp	 eax, edx
  0002b	72 25		 jb	 SHORT $LN13@fill_windo

; 1511 : 
; 1512 :             zmemcpy(s->window, s->window+wsize, (unsigned)wsize - more);

  0002d	8b 47 38	 mov	 eax, DWORD PTR [edi+56]
  00030	8b cb		 mov	 ecx, ebx
  00032	2b ce		 sub	 ecx, esi
  00034	51		 push	 ecx
  00035	8d 14 18	 lea	 edx, DWORD PTR [eax+ebx]
  00038	52		 push	 edx
  00039	50		 push	 eax
  0003a	e8 00 00 00 00	 call	 _memcpy

; 1513 :             s->match_start -= wsize;

  0003f	29 5f 70	 sub	 DWORD PTR [edi+112], ebx

; 1514 :             s->strstart    -= wsize; /* we now have strstart >= MAX_DIST */

  00042	29 5f 6c	 sub	 DWORD PTR [edi+108], ebx

; 1515 :             s->block_start -= (long) wsize;

  00045	29 5f 5c	 sub	 DWORD PTR [edi+92], ebx
  00048	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1516 :             slide_hash(s);

  0004b	e8 00 00 00 00	 call	 _slide_hash

; 1517 :             more += wsize;

  00050	03 f3		 add	 esi, ebx
$LN13@fill_windo:

; 1518 :         }
; 1519 :         if (s->strm->avail_in == 0) break;

  00052	8b 07		 mov	 eax, DWORD PTR [edi]
  00054	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00058	0f 84 b7 00 00
	00		 je	 $LN18@fill_windo

; 1520 : 
; 1521 :         /* If there was no sliding:
; 1522 :          *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&
; 1523 :          *    more == window_size - lookahead - strstart
; 1524 :          * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)
; 1525 :          * => more >= window_size - 2*WSIZE + 2
; 1526 :          * In the BIG_MEM or MMAP case (not yet supported),
; 1527 :          *   window_size == input_size + MIN_LOOKAHEAD  &&
; 1528 :          *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.
; 1529 :          * Otherwise, window_size == 2*WSIZE so more >= 2.
; 1530 :          * If there was sliding, more >= WSIZE. So in all cases, more >= 2.
; 1531 :          */
; 1532 :         Assert(more >= 2, "more < 2");
; 1533 : 
; 1534 :         n = read_buf(s->strm, s->window + s->strstart + s->lookahead, more);

  0005e	8b 5f 74	 mov	 ebx, DWORD PTR [edi+116]
  00061	03 5f 6c	 add	 ebx, DWORD PTR [edi+108]
  00064	8b ce		 mov	 ecx, esi
  00066	03 5f 38	 add	 ebx, DWORD PTR [edi+56]
  00069	8b f0		 mov	 esi, eax
  0006b	e8 00 00 00 00	 call	 _read_buf

; 1535 :         s->lookahead += n;

  00070	01 47 74	 add	 DWORD PTR [edi+116], eax
  00073	8b 47 74	 mov	 eax, DWORD PTR [edi+116]

; 1536 : 
; 1537 :         /* Initialize the hash value now that we have some input: */
; 1538 :         if (s->lookahead + s->insert >= MIN_MATCH) {

  00076	8b b7 b4 16 00
	00		 mov	 esi, DWORD PTR [edi+5812]
  0007c	03 c6		 add	 eax, esi
  0007e	83 f8 03	 cmp	 eax, 3
  00081	72 7d		 jb	 SHORT $LN19@fill_windo

; 1539 :             uInt str = s->strstart - s->insert;

  00083	8b 57 6c	 mov	 edx, DWORD PTR [edi+108]

; 1540 :             s->ins_h = s->window[str];

  00086	8b 5f 38	 mov	 ebx, DWORD PTR [edi+56]

; 1541 :             UPDATE_HASH(s, s->ins_h, s->window[str + 1]);

  00089	8b 4f 58	 mov	 ecx, DWORD PTR [edi+88]
  0008c	2b d6		 sub	 edx, esi
  0008e	0f b6 04 13	 movzx	 eax, BYTE PTR [ebx+edx]
  00092	89 47 48	 mov	 DWORD PTR [edi+72], eax
  00095	d3 e0		 shl	 eax, cl
  00097	0f b6 4c 13 01	 movzx	 ecx, BYTE PTR [ebx+edx+1]
  0009c	33 c1		 xor	 eax, ecx
  0009e	23 47 54	 and	 eax, DWORD PTR [edi+84]
  000a1	89 47 48	 mov	 DWORD PTR [edi+72], eax

; 1542 : #if MIN_MATCH != 3
; 1543 :             Call UPDATE_HASH() MIN_MATCH-3 more times
; 1544 : #endif
; 1545 :             while (s->insert) {

  000a4	85 f6		 test	 esi, esi
  000a6	74 58		 je	 SHORT $LN19@fill_windo
  000a8	eb 06 8d 9b 00
	00 00 00	 npad	 8
$LL10@fill_windo:

; 1546 :                 UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]);

  000b0	8b 77 48	 mov	 esi, DWORD PTR [edi+72]
  000b3	8b 4f 58	 mov	 ecx, DWORD PTR [edi+88]
  000b6	8b 47 38	 mov	 eax, DWORD PTR [edi+56]
  000b9	0f b6 44 10 02	 movzx	 eax, BYTE PTR [eax+edx+2]

; 1547 : #ifndef FASTEST
; 1548 :                 s->prev[str & s->w_mask] = s->head[s->ins_h];

  000be	8b 5f 40	 mov	 ebx, DWORD PTR [edi+64]
  000c1	d3 e6		 shl	 esi, cl
  000c3	8b 4f 44	 mov	 ecx, DWORD PTR [edi+68]
  000c6	33 c6		 xor	 eax, esi
  000c8	23 47 54	 and	 eax, DWORD PTR [edi+84]
  000cb	8b 77 34	 mov	 esi, DWORD PTR [edi+52]
  000ce	89 47 48	 mov	 DWORD PTR [edi+72], eax
  000d1	66 8b 04 41	 mov	 ax, WORD PTR [ecx+eax*2]
  000d5	23 f2		 and	 esi, edx
  000d7	66 89 04 73	 mov	 WORD PTR [ebx+esi*2], ax

; 1549 : #endif
; 1550 :                 s->head[s->ins_h] = (Pos)str;

  000db	8b 4f 48	 mov	 ecx, DWORD PTR [edi+72]
  000de	8b 47 44	 mov	 eax, DWORD PTR [edi+68]
  000e1	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx

; 1551 :                 str++;
; 1552 :                 s->insert--;

  000e5	ff 8f b4 16 00
	00		 dec	 DWORD PTR [edi+5812]
  000eb	8b 87 b4 16 00
	00		 mov	 eax, DWORD PTR [edi+5812]

; 1553 :                 if (s->lookahead + s->insert < MIN_MATCH)

  000f1	8b 4f 74	 mov	 ecx, DWORD PTR [edi+116]
  000f4	03 c8		 add	 ecx, eax
  000f6	42		 inc	 edx
  000f7	83 f9 03	 cmp	 ecx, 3
  000fa	72 04		 jb	 SHORT $LN19@fill_windo

; 1542 : #if MIN_MATCH != 3
; 1543 :             Call UPDATE_HASH() MIN_MATCH-3 more times
; 1544 : #endif
; 1545 :             while (s->insert) {

  000fc	85 c0		 test	 eax, eax
  000fe	75 b0		 jne	 SHORT $LL10@fill_windo
$LN19@fill_windo:

; 1554 :                     break;
; 1555 :             }
; 1556 :         }
; 1557 :         /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,
; 1558 :          * but this is not important since only literal bytes will be emitted.
; 1559 :          */
; 1560 : 
; 1561 :     } while (s->lookahead < MIN_LOOKAHEAD && s->strm->avail_in != 0);

  00100	81 7f 74 06 01
	00 00		 cmp	 DWORD PTR [edi+116], 262 ; 00000106H
  00107	73 0c		 jae	 SHORT $LN18@fill_windo
  00109	8b 17		 mov	 edx, DWORD PTR [edi]
  0010b	83 7a 04 00	 cmp	 DWORD PTR [edx+4], 0
  0010f	0f 85 fc fe ff
	ff		 jne	 $LL27@fill_windo
$LN18@fill_windo:

; 1562 : 
; 1563 :     /* If the WIN_INIT bytes after the end of the current data have never been
; 1564 :      * written, then zero those bytes in order to avoid memory check reports of
; 1565 :      * the use of uninitialized (or uninitialised as Julian writes) bytes by
; 1566 :      * the longest match routines.  Update the high water mark for the next
; 1567 :      * time through here.  WIN_INIT is set to MAX_MATCH since the longest match
; 1568 :      * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.
; 1569 :      */
; 1570 :     if (s->high_water < s->window_size) {

  00115	8b 87 c0 16 00
	00		 mov	 eax, DWORD PTR [edi+5824]
  0011b	8b 4f 3c	 mov	 ecx, DWORD PTR [edi+60]
  0011e	3b c1		 cmp	 eax, ecx
  00120	73 6c		 jae	 SHORT $LN2@fill_windo

; 1571 :         ulg curr = s->strstart + (ulg)(s->lookahead);

  00122	8b 77 74	 mov	 esi, DWORD PTR [edi+116]
  00125	03 77 6c	 add	 esi, DWORD PTR [edi+108]

; 1572 :         ulg init;
; 1573 : 
; 1574 :         if (s->high_water < curr) {

  00128	3b c6		 cmp	 eax, esi
  0012a	73 31		 jae	 SHORT $LN5@fill_windo

; 1575 :             /* Previous high water mark below current data -- zero WIN_INIT
; 1576 :              * bytes or up to end of window, whichever is less.
; 1577 :              */
; 1578 :             init = s->window_size - curr;

  0012c	2b ce		 sub	 ecx, esi
  0012e	8b d9		 mov	 ebx, ecx

; 1579 :             if (init > WIN_INIT)

  00130	81 fb 02 01 00
	00		 cmp	 ebx, 258		; 00000102H
  00136	76 05		 jbe	 SHORT $LN4@fill_windo

; 1580 :                 init = WIN_INIT;

  00138	bb 02 01 00 00	 mov	 ebx, 258		; 00000102H
$LN4@fill_windo:

; 1581 :             zmemzero(s->window + curr, (unsigned)init);

  0013d	8b 47 38	 mov	 eax, DWORD PTR [edi+56]
  00140	53		 push	 ebx
  00141	03 c6		 add	 eax, esi
  00143	6a 00		 push	 0
  00145	50		 push	 eax
  00146	e8 00 00 00 00	 call	 _memset
  0014b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1582 :             s->high_water = curr + init;

  0014e	03 de		 add	 ebx, esi
  00150	89 9f c0 16 00
	00		 mov	 DWORD PTR [edi+5824], ebx
  00156	5f		 pop	 edi
  00157	5e		 pop	 esi
  00158	5b		 pop	 ebx

; 1594 :         }
; 1595 :     }
; 1596 : 
; 1597 :     Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,
; 1598 :            "not enough room for search");
; 1599 : }

  00159	8b e5		 mov	 esp, ebp
  0015b	5d		 pop	 ebp
  0015c	c3		 ret	 0
$LN5@fill_windo:

; 1583 :         }
; 1584 :         else if (s->high_water < (ulg)curr + WIN_INIT) {

  0015d	8d 96 02 01 00
	00		 lea	 edx, DWORD PTR [esi+258]
  00163	3b c2		 cmp	 eax, edx
  00165	73 27		 jae	 SHORT $LN2@fill_windo

; 1585 :             /* High water mark at or above current data, but below current data
; 1586 :              * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up
; 1587 :              * to end of window, whichever is less.
; 1588 :              */
; 1589 :             init = (ulg)curr + WIN_INIT - s->high_water;

  00167	2b f0		 sub	 esi, eax
  00169	81 c6 02 01 00
	00		 add	 esi, 258		; 00000102H

; 1590 :             if (init > s->window_size - s->high_water)

  0016f	2b c8		 sub	 ecx, eax
  00171	3b f1		 cmp	 esi, ecx
  00173	76 02		 jbe	 SHORT $LN1@fill_windo

; 1591 :                 init = s->window_size - s->high_water;

  00175	8b f1		 mov	 esi, ecx
$LN1@fill_windo:

; 1592 :             zmemzero(s->window + s->high_water, (unsigned)init);

  00177	8b 4f 38	 mov	 ecx, DWORD PTR [edi+56]
  0017a	56		 push	 esi
  0017b	03 c8		 add	 ecx, eax
  0017d	6a 00		 push	 0
  0017f	51		 push	 ecx
  00180	e8 00 00 00 00	 call	 _memset
  00185	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1593 :             s->high_water += init;

  00188	01 b7 c0 16 00
	00		 add	 DWORD PTR [edi+5824], esi
$LN2@fill_windo:
  0018e	5f		 pop	 edi
  0018f	5e		 pop	 esi
  00190	5b		 pop	 ebx

; 1594 :         }
; 1595 :     }
; 1596 : 
; 1597 :     Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,
; 1598 :            "not enough room for search");
; 1599 : }

  00191	8b e5		 mov	 esp, ebp
  00193	5d		 pop	 ebp
  00194	c3		 ret	 0
_fill_window ENDP
_TEXT	ENDS
PUBLIC	_deflateReset
; Function compile flags: /Ogtp
;	COMDAT _deflateReset
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_deflateReset PROC					; COMDAT

; 507  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 508  :     int ret;
; 509  : 
; 510  :     ret = deflateResetKeep(strm);

  00004	8b 75 08	 mov	 esi, DWORD PTR _strm$[ebp]
  00007	57		 push	 edi
  00008	56		 push	 esi
  00009	e8 00 00 00 00	 call	 _deflateResetKeep
  0000e	8b f8		 mov	 edi, eax
  00010	83 c4 04	 add	 esp, 4

; 511  :     if (ret == Z_OK)

  00013	85 ff		 test	 edi, edi
  00015	75 0a		 jne	 SHORT $LN1@deflateRes@2

; 512  :         lm_init(strm->state);

  00017	8b 76 1c	 mov	 esi, DWORD PTR [esi+28]
  0001a	e8 00 00 00 00	 call	 _lm_init

; 513  :     return ret;

  0001f	8b c7		 mov	 eax, edi
$LN1@deflateRes@2:
  00021	5f		 pop	 edi
  00022	5e		 pop	 esi

; 514  : }

  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
_deflateReset ENDP
_TEXT	ENDS
PUBLIC	_deflateSetDictionary
; Function compile flags: /Ogtp
;	COMDAT _deflateSetDictionary
_TEXT	SEGMENT
_avail$ = -16						; size = 4
_next$ = -12						; size = 4
_wrap$ = -8						; size = 4
_n$ = -4						; size = 4
_strm$ = 8						; size = 4
_dictionary$ = 12					; size = 4
_dictLength$ = 16					; size = 4
_deflateSetDictionary PROC				; COMDAT

; 380  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	57		 push	 edi

; 381  :     deflate_state *s;
; 382  :     uInt str, n;
; 383  :     int wrap;
; 384  :     unsigned avail;
; 385  :     z_const unsigned char *next;
; 386  : 
; 387  :     if (deflateStateCheck(strm) || dictionary == Z_NULL)

  00007	8b 7d 08	 mov	 edi, DWORD PTR _strm$[ebp]
  0000a	8b c7		 mov	 eax, edi
  0000c	e8 00 00 00 00	 call	 _deflateStateCheck
  00011	85 c0		 test	 eax, eax
  00013	0f 85 69 01 00
	00		 jne	 $LN12@deflateSet@2
  00019	8b 4d 0c	 mov	 ecx, DWORD PTR _dictionary$[ebp]
  0001c	85 c9		 test	 ecx, ecx
  0001e	0f 84 5e 01 00
	00		 je	 $LN12@deflateSet@2

; 389  :     s = strm->state;

  00024	56		 push	 esi
  00025	8b 77 1c	 mov	 esi, DWORD PTR [edi+28]

; 390  :     wrap = s->wrap;

  00028	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  0002b	89 45 f8	 mov	 DWORD PTR _wrap$[ebp], eax

; 391  :     if (wrap == 2 || (wrap == 1 && s->status != INIT_STATE) || s->lookahead)

  0002e	83 f8 02	 cmp	 eax, 2
  00031	0f 84 40 01 00
	00		 je	 $LN10@deflateSet@2
  00037	83 f8 01	 cmp	 eax, 1
  0003a	75 0a		 jne	 SHORT $LN9@deflateSet@2
  0003c	83 7e 04 2a	 cmp	 DWORD PTR [esi+4], 42	; 0000002aH
  00040	0f 85 31 01 00
	00		 jne	 $LN10@deflateSet@2
$LN9@deflateSet@2:
  00046	83 7e 74 00	 cmp	 DWORD PTR [esi+116], 0
  0004a	0f 85 27 01 00
	00		 jne	 $LN10@deflateSet@2

; 393  : 
; 394  :     /* when using zlib wrappers, compute Adler-32 for provided dictionary */
; 395  :     if (wrap == 1)

  00050	53		 push	 ebx
  00051	8b 5d 10	 mov	 ebx, DWORD PTR _dictLength$[ebp]
  00054	83 f8 01	 cmp	 eax, 1
  00057	75 17		 jne	 SHORT $LN8@deflateSet@2

; 396  :         strm->adler = adler32(strm->adler, dictionary, dictLength);

  00059	8b 47 30	 mov	 eax, DWORD PTR [edi+48]
  0005c	53		 push	 ebx
  0005d	51		 push	 ecx
  0005e	50		 push	 eax
  0005f	e8 00 00 00 00	 call	 _adler32
  00064	8b 4d 0c	 mov	 ecx, DWORD PTR _dictionary$[ebp]
  00067	89 47 30	 mov	 DWORD PTR [edi+48], eax
  0006a	8b 45 f8	 mov	 eax, DWORD PTR _wrap$[ebp]
  0006d	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN8@deflateSet@2:

; 397  :     s->wrap = 0;                    /* avoid computing Adler-32 in read_buf */

  00070	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0

; 398  : 
; 399  :     /* if dictionary would fill window, just replace the history */
; 400  :     if (dictLength >= s->w_size) {

  00077	3b 5e 2c	 cmp	 ebx, DWORD PTR [esi+44]
  0007a	72 3e		 jb	 SHORT $LN7@deflateSet@2

; 401  :         if (wrap == 0) {            /* already empty otherwise */

  0007c	85 c0		 test	 eax, eax
  0007e	75 31		 jne	 SHORT $LN6@deflateSet@2

; 402  :             CLEAR_HASH(s);

  00080	8b 4e 4c	 mov	 ecx, DWORD PTR [esi+76]
  00083	8b 56 44	 mov	 edx, DWORD PTR [esi+68]
  00086	66 89 44 4a fe	 mov	 WORD PTR [edx+ecx*2-2], ax
  0008b	8b 4e 4c	 mov	 ecx, DWORD PTR [esi+76]
  0008e	8d 54 09 fe	 lea	 edx, DWORD PTR [ecx+ecx-2]
  00092	52		 push	 edx
  00093	50		 push	 eax
  00094	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
  00097	50		 push	 eax
  00098	e8 00 00 00 00	 call	 _memset

; 403  :             s->strstart = 0;
; 404  :             s->block_start = 0L;
; 405  :             s->insert = 0;

  0009d	8b 4d 0c	 mov	 ecx, DWORD PTR _dictionary$[ebp]
  000a0	83 c4 0c	 add	 esp, 12			; 0000000cH
  000a3	33 c0		 xor	 eax, eax
  000a5	89 46 6c	 mov	 DWORD PTR [esi+108], eax
  000a8	89 46 5c	 mov	 DWORD PTR [esi+92], eax
  000ab	89 86 b4 16 00
	00		 mov	 DWORD PTR [esi+5812], eax
$LN6@deflateSet@2:

; 406  :         }
; 407  :         dictionary += dictLength - s->w_size;  /* use the tail */

  000b1	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  000b4	2b d8		 sub	 ebx, eax
  000b6	03 cb		 add	 ecx, ebx

; 408  :         dictLength = s->w_size;

  000b8	8b d8		 mov	 ebx, eax
$LN7@deflateSet@2:

; 409  :     }
; 410  : 
; 411  :     /* insert dictionary into window and hash */
; 412  :     avail = strm->avail_in;
; 413  :     next = strm->next_in;

  000ba	8b 07		 mov	 eax, DWORD PTR [edi]
  000bc	8b 57 04	 mov	 edx, DWORD PTR [edi+4]
  000bf	89 45 f4	 mov	 DWORD PTR _next$[ebp], eax

; 414  :     strm->avail_in = dictLength;
; 415  :     strm->next_in = (z_const Bytef *)dictionary;
; 416  :     fill_window(s);

  000c2	8b c6		 mov	 eax, esi
  000c4	89 55 f0	 mov	 DWORD PTR _avail$[ebp], edx
  000c7	89 5f 04	 mov	 DWORD PTR [edi+4], ebx
  000ca	89 0f		 mov	 DWORD PTR [edi], ecx
  000cc	e8 00 00 00 00	 call	 _fill_window

; 417  :     while (s->lookahead >= MIN_MATCH) {

  000d1	83 7e 74 03	 cmp	 DWORD PTR [esi+116], 3
  000d5	72 61		 jb	 SHORT $LN4@deflateSet@2
$LL5@deflateSet@2:

; 418  :         str = s->strstart;
; 419  :         n = s->lookahead - (MIN_MATCH-1);

  000d7	8b 46 74	 mov	 eax, DWORD PTR [esi+116]
  000da	8b 56 6c	 mov	 edx, DWORD PTR [esi+108]
  000dd	83 e8 02	 sub	 eax, 2
  000e0	89 45 fc	 mov	 DWORD PTR _n$[ebp], eax
$LL3@deflateSet@2:

; 420  :         do {
; 421  :             UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]);

  000e3	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  000e6	0f b6 44 11 02	 movzx	 eax, BYTE PTR [ecx+edx+2]
  000eb	8b 7e 48	 mov	 edi, DWORD PTR [esi+72]
  000ee	8b 4e 58	 mov	 ecx, DWORD PTR [esi+88]

; 422  : #ifndef FASTEST
; 423  :             s->prev[str & s->w_mask] = s->head[s->ins_h];

  000f1	8b 5e 40	 mov	 ebx, DWORD PTR [esi+64]
  000f4	d3 e7		 shl	 edi, cl
  000f6	8b 4e 44	 mov	 ecx, DWORD PTR [esi+68]
  000f9	33 c7		 xor	 eax, edi
  000fb	23 46 54	 and	 eax, DWORD PTR [esi+84]
  000fe	8b fa		 mov	 edi, edx
  00100	23 7e 34	 and	 edi, DWORD PTR [esi+52]
  00103	89 46 48	 mov	 DWORD PTR [esi+72], eax
  00106	66 8b 04 41	 mov	 ax, WORD PTR [ecx+eax*2]
  0010a	66 89 04 7b	 mov	 WORD PTR [ebx+edi*2], ax

; 424  : #endif
; 425  :             s->head[s->ins_h] = (Pos)str;

  0010e	8b 4e 48	 mov	 ecx, DWORD PTR [esi+72]
  00111	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
  00114	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx

; 426  :             str++;

  00118	42		 inc	 edx

; 427  :         } while (--n);

  00119	ff 4d fc	 dec	 DWORD PTR _n$[ebp]
  0011c	75 c5		 jne	 SHORT $LL3@deflateSet@2

; 428  :         s->strstart = str;
; 429  :         s->lookahead = MIN_MATCH-1;
; 430  :         fill_window(s);

  0011e	8b c6		 mov	 eax, esi
  00120	89 56 6c	 mov	 DWORD PTR [esi+108], edx
  00123	c7 46 74 02 00
	00 00		 mov	 DWORD PTR [esi+116], 2
  0012a	e8 00 00 00 00	 call	 _fill_window
  0012f	83 7e 74 03	 cmp	 DWORD PTR [esi+116], 3
  00133	73 a2		 jae	 SHORT $LL5@deflateSet@2

; 417  :     while (s->lookahead >= MIN_MATCH) {

  00135	8b 7d 08	 mov	 edi, DWORD PTR _strm$[ebp]
$LN4@deflateSet@2:

; 431  :     }
; 432  :     s->strstart += s->lookahead;

  00138	8b 46 74	 mov	 eax, DWORD PTR [esi+116]
  0013b	01 46 6c	 add	 DWORD PTR [esi+108], eax
  0013e	8b 4e 6c	 mov	 ecx, DWORD PTR [esi+108]

; 433  :     s->block_start = (long)s->strstart;
; 434  :     s->insert = s->lookahead;
; 435  :     s->lookahead = 0;
; 436  :     s->match_length = s->prev_length = MIN_MATCH-1;
; 437  :     s->match_available = 0;
; 438  :     strm->next_in = next;
; 439  :     strm->avail_in = avail;

  00141	8b 55 f0	 mov	 edx, DWORD PTR _avail$[ebp]
  00144	89 4e 5c	 mov	 DWORD PTR [esi+92], ecx
  00147	89 86 b4 16 00
	00		 mov	 DWORD PTR [esi+5812], eax
  0014d	33 c0		 xor	 eax, eax
  0014f	b9 02 00 00 00	 mov	 ecx, 2
  00154	89 46 74	 mov	 DWORD PTR [esi+116], eax
  00157	89 4e 78	 mov	 DWORD PTR [esi+120], ecx
  0015a	89 4e 60	 mov	 DWORD PTR [esi+96], ecx
  0015d	8b 4d f4	 mov	 ecx, DWORD PTR _next$[ebp]
  00160	89 46 68	 mov	 DWORD PTR [esi+104], eax

; 440  :     s->wrap = wrap;

  00163	8b 45 f8	 mov	 eax, DWORD PTR _wrap$[ebp]
  00166	89 0f		 mov	 DWORD PTR [edi], ecx
  00168	89 57 04	 mov	 DWORD PTR [edi+4], edx
  0016b	5b		 pop	 ebx
  0016c	89 46 18	 mov	 DWORD PTR [esi+24], eax
  0016f	5e		 pop	 esi

; 441  :     return Z_OK;

  00170	33 c0		 xor	 eax, eax
  00172	5f		 pop	 edi

; 442  : }

  00173	8b e5		 mov	 esp, ebp
  00175	5d		 pop	 ebp
  00176	c3		 ret	 0
$LN10@deflateSet@2:
  00177	5e		 pop	 esi

; 392  :         return Z_STREAM_ERROR;

  00178	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  0017d	5f		 pop	 edi

; 442  : }

  0017e	8b e5		 mov	 esp, ebp
  00180	5d		 pop	 ebp
  00181	c3		 ret	 0
$LN12@deflateSet@2:

; 388  :         return Z_STREAM_ERROR;

  00182	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  00187	5f		 pop	 edi

; 442  : }

  00188	8b e5		 mov	 esp, ebp
  0018a	5d		 pop	 ebp
  0018b	c3		 ret	 0
_deflateSetDictionary ENDP
_TEXT	ENDS
PUBLIC	_deflateInit2_
; Function compile flags: /Ogtp
;	COMDAT _deflateInit2_
_TEXT	SEGMENT
_wrap$ = -4						; size = 4
_strm$ = 8						; size = 4
_level$ = 12						; size = 4
_method$ = 16						; size = 4
_windowBits$ = 20					; size = 4
_memLevel$ = 24						; size = 4
_strategy$ = 28						; size = 4
_version$ = 32						; size = 4
_stream_size$ = 36					; size = 4
_deflateInit2_ PROC					; COMDAT

; 250  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 251  :     deflate_state *s;
; 252  :     int wrap = 1;
; 253  :     static const char my_version[] = ZLIB_VERSION;
; 254  : 
; 255  :     ushf *overlay;
; 256  :     /* We overlay pending_buf and d_buf+l_buf. This works since the average
; 257  :      * output size for (length,distance) codes is <= 24 bits.
; 258  :      */
; 259  : 
; 260  :     if (version == Z_NULL || version[0] != my_version[0] ||
; 261  :         stream_size != sizeof(z_stream)) {

  00004	8b 45 20	 mov	 eax, DWORD PTR _version$[ebp]
  00007	33 c9		 xor	 ecx, ecx
  00009	ba 01 00 00 00	 mov	 edx, 1
  0000e	89 55 fc	 mov	 DWORD PTR _wrap$[ebp], edx
  00011	3b c1		 cmp	 eax, ecx
  00013	0f 84 23 02 00
	00		 je	 $LN14@deflateIni
  00019	80 38 31	 cmp	 BYTE PTR [eax], 49	; 00000031H
  0001c	0f 85 1a 02 00
	00		 jne	 $LN14@deflateIni
  00022	83 7d 24 38	 cmp	 DWORD PTR _stream_size$[ebp], 56 ; 00000038H
  00026	0f 85 10 02 00
	00		 jne	 $LN14@deflateIni

; 263  :     }
; 264  :     if (strm == Z_NULL) return Z_STREAM_ERROR;

  0002c	57		 push	 edi
  0002d	8b 7d 08	 mov	 edi, DWORD PTR _strm$[ebp]
  00030	3b f9		 cmp	 edi, ecx
  00032	75 08		 jne	 SHORT $LN13@deflateIni
  00034	8d 42 fd	 lea	 eax, DWORD PTR [edx-3]
  00037	5f		 pop	 edi

; 348  : }

  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
$LN13@deflateIni:

; 265  : 
; 266  :     strm->msg = Z_NULL;

  0003c	89 4f 18	 mov	 DWORD PTR [edi+24], ecx

; 267  :     if (strm->zalloc == (alloc_func)0) {

  0003f	39 4f 20	 cmp	 DWORD PTR [edi+32], ecx
  00042	75 0a		 jne	 SHORT $LN12@deflateIni

; 268  : #ifdef Z_SOLO
; 269  :         return Z_STREAM_ERROR;
; 270  : #else
; 271  :         strm->zalloc = zcalloc;

  00044	c7 47 20 00 00
	00 00		 mov	 DWORD PTR [edi+32], OFFSET _zcalloc

; 272  :         strm->opaque = (voidpf)0;

  0004b	89 4f 28	 mov	 DWORD PTR [edi+40], ecx
$LN12@deflateIni:

; 273  : #endif
; 274  :     }
; 275  :     if (strm->zfree == (free_func)0)

  0004e	39 4f 24	 cmp	 DWORD PTR [edi+36], ecx
  00051	75 07		 jne	 SHORT $LN11@deflateIni

; 276  : #ifdef Z_SOLO
; 277  :         return Z_STREAM_ERROR;
; 278  : #else
; 279  :         strm->zfree = zcfree;

  00053	c7 47 24 00 00
	00 00		 mov	 DWORD PTR [edi+36], OFFSET _zcfree
$LN11@deflateIni:

; 280  : #endif
; 281  : 
; 282  : #ifdef FASTEST
; 283  :     if (level != 0) level = 1;
; 284  : #else
; 285  :     if (level == Z_DEFAULT_COMPRESSION) level = 6;

  0005a	83 7d 0c ff	 cmp	 DWORD PTR _level$[ebp], -1
  0005e	75 07		 jne	 SHORT $LN10@deflateIni
  00060	c7 45 0c 06 00
	00 00		 mov	 DWORD PTR _level$[ebp], 6
$LN10@deflateIni:
  00067	53		 push	 ebx

; 286  : #endif
; 287  : 
; 288  :     if (windowBits < 0) { /* suppress zlib wrapper */

  00068	8b 5d 14	 mov	 ebx, DWORD PTR _windowBits$[ebp]
  0006b	3b d9		 cmp	 ebx, ecx
  0006d	7d 07		 jge	 SHORT $LN9@deflateIni

; 289  :         wrap = 0;

  0006f	89 4d fc	 mov	 DWORD PTR _wrap$[ebp], ecx

; 290  :         windowBits = -windowBits;

  00072	f7 db		 neg	 ebx
  00074	eb 0f		 jmp	 SHORT $LN22@deflateIni
$LN9@deflateIni:

; 291  :     }
; 292  : #ifdef GZIP
; 293  :     else if (windowBits > 15) {

  00076	83 fb 0f	 cmp	 ebx, 15			; 0000000fH
  00079	7e 0d		 jle	 SHORT $LN7@deflateIni

; 294  :         wrap = 2;       /* write gzip wrapper instead */

  0007b	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR _wrap$[ebp], 2

; 295  :         windowBits -= 16;

  00082	83 eb 10	 sub	 ebx, 16			; 00000010H
$LN22@deflateIni:
  00085	89 5d 14	 mov	 DWORD PTR _windowBits$[ebp], ebx
$LN7@deflateIni:

; 296  :     }
; 297  : #endif
; 298  :     if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method != Z_DEFLATED ||
; 299  :         windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||
; 300  :         strategy < 0 || strategy > Z_FIXED || (windowBits == 8 && wrap != 1)) {

  00088	8b 45 18	 mov	 eax, DWORD PTR _memLevel$[ebp]
  0008b	48		 dec	 eax
  0008c	83 f8 08	 cmp	 eax, 8
  0008f	0f 87 9c 01 00
	00		 ja	 $LN5@deflateIni
  00095	83 7d 10 08	 cmp	 DWORD PTR _method$[ebp], 8
  00099	0f 85 92 01 00
	00		 jne	 $LN5@deflateIni
  0009f	8d 4b f8	 lea	 ecx, DWORD PTR [ebx-8]
  000a2	83 f9 07	 cmp	 ecx, 7
  000a5	0f 87 86 01 00
	00		 ja	 $LN5@deflateIni
  000ab	b8 09 00 00 00	 mov	 eax, 9
  000b0	39 45 0c	 cmp	 DWORD PTR _level$[ebp], eax
  000b3	0f 87 78 01 00
	00		 ja	 $LN5@deflateIni
  000b9	83 7d 1c 04	 cmp	 DWORD PTR _strategy$[ebp], 4
  000bd	0f 87 6e 01 00
	00		 ja	 $LN5@deflateIni
  000c3	83 fb 08	 cmp	 ebx, 8
  000c6	75 0e		 jne	 SHORT $LN4@deflateIni
  000c8	39 55 fc	 cmp	 DWORD PTR _wrap$[ebp], edx
  000cb	0f 85 60 01 00
	00		 jne	 $LN5@deflateIni

; 302  :     }
; 303  :     if (windowBits == 8) windowBits = 9;  /* until 256-byte window bug fixed */

  000d1	89 45 14	 mov	 DWORD PTR _windowBits$[ebp], eax
  000d4	8b d8		 mov	 ebx, eax
$LN4@deflateIni:

; 304  :     s = (deflate_state *) ZALLOC(strm, 1, sizeof(deflate_state));

  000d6	8b 47 20	 mov	 eax, DWORD PTR [edi+32]
  000d9	56		 push	 esi
  000da	68 c4 16 00 00	 push	 5828			; 000016c4H
  000df	52		 push	 edx
  000e0	8b 57 28	 mov	 edx, DWORD PTR [edi+40]
  000e3	52		 push	 edx
  000e4	ff d0		 call	 eax
  000e6	8b f0		 mov	 esi, eax
  000e8	83 c4 0c	 add	 esp, 12			; 0000000cH

; 305  :     if (s == Z_NULL) return Z_MEM_ERROR;

  000eb	85 f6		 test	 esi, esi
  000ed	0f 84 32 01 00
	00		 je	 $LN23@deflateIni

; 306  :     strm->state = (struct internal_state FAR *)s;
; 307  :     s->strm = strm;
; 308  :     s->status = INIT_STATE;     /* to pass state test in deflateReset() */
; 309  : 
; 310  :     s->wrap = wrap;

  000f3	8b 4d fc	 mov	 ecx, DWORD PTR _wrap$[ebp]
  000f6	89 77 1c	 mov	 DWORD PTR [edi+28], esi
  000f9	89 4e 18	 mov	 DWORD PTR [esi+24], ecx

; 311  :     s->gzhead = Z_NULL;
; 312  :     s->w_bits = (uInt)windowBits;
; 313  :     s->w_size = 1 << s->w_bits;

  000fc	8b 4d 14	 mov	 ecx, DWORD PTR _windowBits$[ebp]
  000ff	89 5e 30	 mov	 DWORD PTR [esi+48], ebx
  00102	bb 01 00 00 00	 mov	 ebx, 1
  00107	d3 e3		 shl	 ebx, cl

; 314  :     s->w_mask = s->w_size - 1;
; 315  : 
; 316  :     s->hash_bits = (uInt)memLevel + 7;

  00109	8b 4d 18	 mov	 ecx, DWORD PTR _memLevel$[ebp]
  0010c	83 c1 07	 add	 ecx, 7

; 317  :     s->hash_size = 1 << s->hash_bits;

  0010f	b8 01 00 00 00	 mov	 eax, 1
  00114	d3 e0		 shl	 eax, cl
  00116	89 4e 50	 mov	 DWORD PTR [esi+80], ecx
  00119	8d 53 ff	 lea	 edx, DWORD PTR [ebx-1]
  0011c	89 56 34	 mov	 DWORD PTR [esi+52], edx
  0011f	89 46 4c	 mov	 DWORD PTR [esi+76], eax

; 318  :     s->hash_mask = s->hash_size - 1;

  00122	48		 dec	 eax
  00123	89 46 54	 mov	 DWORD PTR [esi+84], eax

; 319  :     s->hash_shift =  ((s->hash_bits+MIN_MATCH-1)/MIN_MATCH);

  00126	83 c1 02	 add	 ecx, 2
  00129	b8 ab aa aa aa	 mov	 eax, -1431655765	; aaaaaaabH
  0012e	f7 e1		 mul	 ecx
  00130	d1 ea		 shr	 edx, 1
  00132	89 3e		 mov	 DWORD PTR [esi], edi
  00134	c7 46 04 2a 00
	00 00		 mov	 DWORD PTR [esi+4], 42	; 0000002aH
  0013b	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], 0
  00142	89 5e 2c	 mov	 DWORD PTR [esi+44], ebx
  00145	89 56 58	 mov	 DWORD PTR [esi+88], edx

; 320  : 
; 321  :     s->window = (Bytef *) ZALLOC(strm, s->w_size, 2*sizeof(Byte));

  00148	8b 47 28	 mov	 eax, DWORD PTR [edi+40]
  0014b	8b 4f 20	 mov	 ecx, DWORD PTR [edi+32]
  0014e	6a 02		 push	 2
  00150	53		 push	 ebx
  00151	50		 push	 eax
  00152	ff d1		 call	 ecx

; 322  :     s->prev   = (Posf *)  ZALLOC(strm, s->w_size, sizeof(Pos));

  00154	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  00157	89 46 38	 mov	 DWORD PTR [esi+56], eax
  0015a	8b 47 28	 mov	 eax, DWORD PTR [edi+40]
  0015d	8b 4f 20	 mov	 ecx, DWORD PTR [edi+32]
  00160	6a 02		 push	 2
  00162	52		 push	 edx
  00163	50		 push	 eax
  00164	ff d1		 call	 ecx

; 323  :     s->head   = (Posf *)  ZALLOC(strm, s->hash_size, sizeof(Pos));

  00166	8b 56 4c	 mov	 edx, DWORD PTR [esi+76]
  00169	89 46 40	 mov	 DWORD PTR [esi+64], eax
  0016c	8b 47 28	 mov	 eax, DWORD PTR [edi+40]
  0016f	8b 4f 20	 mov	 ecx, DWORD PTR [edi+32]
  00172	6a 02		 push	 2
  00174	52		 push	 edx
  00175	50		 push	 eax
  00176	ff d1		 call	 ecx

; 324  : 
; 325  :     s->high_water = 0;      /* nothing written to s->window yet */
; 326  : 
; 327  :     s->lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */

  00178	8b 4d 18	 mov	 ecx, DWORD PTR _memLevel$[ebp]
  0017b	89 46 44	 mov	 DWORD PTR [esi+68], eax
  0017e	83 c1 06	 add	 ecx, 6
  00181	b8 01 00 00 00	 mov	 eax, 1
  00186	d3 e0		 shl	 eax, cl
  00188	c7 86 c0 16 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+5824], 0

; 328  : 
; 329  :     overlay = (ushf *) ZALLOC(strm, s->lit_bufsize, sizeof(ush)+2);

  00192	6a 04		 push	 4
  00194	89 86 9c 16 00
	00		 mov	 DWORD PTR [esi+5788], eax
  0019a	8b 57 28	 mov	 edx, DWORD PTR [edi+40]
  0019d	50		 push	 eax
  0019e	8b 47 20	 mov	 eax, DWORD PTR [edi+32]
  001a1	52		 push	 edx
  001a2	ff d0		 call	 eax

; 330  :     s->pending_buf = (uchf *) overlay;
; 331  :     s->pending_buf_size = (ulg)s->lit_bufsize * (sizeof(ush)+2L);

  001a4	8b 8e 9c 16 00
	00		 mov	 ecx, DWORD PTR [esi+5788]
  001aa	83 c4 30	 add	 esp, 48			; 00000030H

; 332  : 
; 333  :     if (s->window == Z_NULL || s->prev == Z_NULL || s->head == Z_NULL ||
; 334  :         s->pending_buf == Z_NULL) {

  001ad	83 7e 38 00	 cmp	 DWORD PTR [esi+56], 0
  001b1	8d 14 8d 00 00
	00 00		 lea	 edx, DWORD PTR [ecx*4]
  001b8	89 46 08	 mov	 DWORD PTR [esi+8], eax
  001bb	89 56 0c	 mov	 DWORD PTR [esi+12], edx
  001be	74 4e		 je	 SHORT $LN1@deflateIni
  001c0	83 7e 40 00	 cmp	 DWORD PTR [esi+64], 0
  001c4	74 48		 je	 SHORT $LN1@deflateIni
  001c6	83 7e 44 00	 cmp	 DWORD PTR [esi+68], 0
  001ca	74 42		 je	 SHORT $LN1@deflateIni
  001cc	85 c0		 test	 eax, eax
  001ce	74 3e		 je	 SHORT $LN1@deflateIni

; 339  :     }
; 340  :     s->d_buf = overlay + s->lit_bufsize/sizeof(ush);

  001d0	8b d1		 mov	 edx, ecx
  001d2	d1 ea		 shr	 edx, 1
  001d4	8d 14 50	 lea	 edx, DWORD PTR [eax+edx*2]

; 341  :     s->l_buf = s->pending_buf + (1+sizeof(ush))*s->lit_bufsize;

  001d7	8d 04 48	 lea	 eax, DWORD PTR [eax+ecx*2]
  001da	03 c1		 add	 eax, ecx

; 342  : 
; 343  :     s->level = level;

  001dc	8b 4d 0c	 mov	 ecx, DWORD PTR _level$[ebp]
  001df	89 96 a4 16 00
	00		 mov	 DWORD PTR [esi+5796], edx

; 344  :     s->strategy = strategy;

  001e5	8b 55 1c	 mov	 edx, DWORD PTR _strategy$[ebp]

; 345  :     s->method = (Byte)method;
; 346  : 
; 347  :     return deflateReset(strm);

  001e8	57		 push	 edi
  001e9	89 86 98 16 00
	00		 mov	 DWORD PTR [esi+5784], eax
  001ef	89 8e 84 00 00
	00		 mov	 DWORD PTR [esi+132], ecx
  001f5	89 96 88 00 00
	00		 mov	 DWORD PTR [esi+136], edx
  001fb	c6 46 24 08	 mov	 BYTE PTR [esi+36], 8
  001ff	e8 00 00 00 00	 call	 _deflateReset
  00204	83 c4 04	 add	 esp, 4
  00207	5e		 pop	 esi
  00208	5b		 pop	 ebx
  00209	5f		 pop	 edi

; 348  : }

  0020a	8b e5		 mov	 esp, ebp
  0020c	5d		 pop	 ebp
  0020d	c3		 ret	 0
$LN1@deflateIni:

; 335  :         s->status = FINISH_STATE;

  0020e	c7 46 04 9a 02
	00 00		 mov	 DWORD PTR [esi+4], 666	; 0000029aH

; 336  :         strm->msg = ERR_MSG(Z_MEM_ERROR);
; 337  :         deflateEnd (strm);

  00215	57		 push	 edi
  00216	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], OFFSET ??_C@_0BE@OGGJBMCE@insufficient?5memory?$AA@
  0021d	e8 00 00 00 00	 call	 _deflateEnd
  00222	83 c4 04	 add	 esp, 4
$LN23@deflateIni:

; 338  :         return Z_MEM_ERROR;

  00225	5e		 pop	 esi
  00226	5b		 pop	 ebx
  00227	b8 fc ff ff ff	 mov	 eax, -4			; fffffffcH
  0022c	5f		 pop	 edi

; 348  : }

  0022d	8b e5		 mov	 esp, ebp
  0022f	5d		 pop	 ebp
  00230	c3		 ret	 0
$LN5@deflateIni:
  00231	5b		 pop	 ebx

; 301  :         return Z_STREAM_ERROR;

  00232	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  00237	5f		 pop	 edi

; 348  : }

  00238	8b e5		 mov	 esp, ebp
  0023a	5d		 pop	 ebp
  0023b	c3		 ret	 0
$LN14@deflateIni:

; 262  :         return Z_VERSION_ERROR;

  0023c	b8 fa ff ff ff	 mov	 eax, -6			; fffffffaH

; 348  : }

  00241	8b e5		 mov	 esp, ebp
  00243	5d		 pop	 ebp
  00244	c3		 ret	 0
_deflateInit2_ ENDP
_TEXT	ENDS
PUBLIC	_deflateInit_
; Function compile flags: /Ogtp
;	COMDAT _deflateInit_
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_level$ = 12						; size = 4
_version$ = 16						; size = 4
_stream_size$ = 20					; size = 4
_deflateInit_ PROC					; COMDAT

; 233  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 234  :     return deflateInit2_(strm, level, Z_DEFLATED, MAX_WBITS, DEF_MEM_LEVEL,
; 235  :                          Z_DEFAULT_STRATEGY, version, stream_size);

  00003	8b 45 14	 mov	 eax, DWORD PTR _stream_size$[ebp]
  00006	8b 4d 10	 mov	 ecx, DWORD PTR _version$[ebp]
  00009	8b 55 0c	 mov	 edx, DWORD PTR _level$[ebp]
  0000c	50		 push	 eax
  0000d	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00010	51		 push	 ecx
  00011	6a 00		 push	 0
  00013	6a 08		 push	 8
  00015	6a 0f		 push	 15			; 0000000fH
  00017	6a 08		 push	 8
  00019	52		 push	 edx
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 _deflateInit2_
  00020	83 c4 20	 add	 esp, 32			; 00000020H

; 236  :     /* To do: ignore strm->next_in if we use it as window */
; 237  : }

  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
_deflateInit_ ENDP
; Function compile flags: /Ogtp
;	COMDAT _deflate_huff
_TEXT	SEGMENT
_flush$ = 8						; size = 4
_deflate_huff PROC					; COMDAT
; _s$ = esi

; 2133 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi
$LL11@deflate_hu:

; 2134 :     int bflush;             /* set if current block must be flushed */
; 2135 : 
; 2136 :     for (;;) {
; 2137 :         /* Make sure that we have a literal to write. */
; 2138 :         if (s->lookahead == 0) {

  00004	83 7e 74 00	 cmp	 DWORD PTR [esi+116], 0
  00008	75 11		 jne	 SHORT $LN8@deflate_hu

; 2139 :             fill_window(s);

  0000a	8b c6		 mov	 eax, esi
  0000c	e8 00 00 00 00	 call	 _fill_window

; 2140 :             if (s->lookahead == 0) {

  00011	83 7e 74 00	 cmp	 DWORD PTR [esi+116], 0
  00015	0f 84 a4 00 00
	00		 je	 $LN22@deflate_hu
$LN8@deflate_hu:

; 2143 :                 break;      /* flush the current block */
; 2144 :             }
; 2145 :         }
; 2146 : 
; 2147 :         /* Output a literal byte */
; 2148 :         s->match_length = 0;
; 2149 :         Tracevv((stderr,"%c", s->window[s->strstart]));
; 2150 :         _tr_tally_lit (s, s->window[s->strstart], bflush);

  0001b	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  0001e	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  00021	8b 96 a0 16 00
	00		 mov	 edx, DWORD PTR [esi+5792]
  00027	c7 46 60 00 00
	00 00		 mov	 DWORD PTR [esi+96], 0
  0002e	8a 04 08	 mov	 al, BYTE PTR [eax+ecx]
  00031	8b 8e a4 16 00
	00		 mov	 ecx, DWORD PTR [esi+5796]
  00037	33 ff		 xor	 edi, edi
  00039	66 89 3c 51	 mov	 WORD PTR [ecx+edx*2], di
  0003d	8b 8e a0 16 00
	00		 mov	 ecx, DWORD PTR [esi+5792]
  00043	8b 96 98 16 00
	00		 mov	 edx, DWORD PTR [esi+5784]
  00049	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  0004c	0f b6 d0	 movzx	 edx, al
  0004f	b9 01 00 00 00	 mov	 ecx, 1
  00054	01 8e a0 16 00
	00		 add	 DWORD PTR [esi+5792], ecx
  0005a	66 01 8c 96 94
	00 00 00	 add	 WORD PTR [esi+edx*4+148], cx

; 2151 :         s->lookahead--;
; 2152 :         s->strstart++;

  00062	01 4e 6c	 add	 DWORD PTR [esi+108], ecx
  00065	ff 4e 74	 dec	 DWORD PTR [esi+116]
  00068	8d 84 96 94 00
	00 00		 lea	 eax, DWORD PTR [esi+edx*4+148]
  0006f	8b 96 9c 16 00
	00		 mov	 edx, DWORD PTR [esi+5788]
  00075	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  00078	2b d1		 sub	 edx, ecx
  0007a	39 96 a0 16 00
	00		 cmp	 DWORD PTR [esi+5792], edx

; 2153 :         if (bflush) FLUSH_BLOCK(s, 0);

  00080	75 82		 jne	 SHORT $LL11@deflate_hu
  00082	8b 56 5c	 mov	 edx, DWORD PTR [esi+92]
  00085	85 d2		 test	 edx, edx
  00087	78 07		 js	 SHORT $LN14@deflate_hu
  00089	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  0008c	03 ca		 add	 ecx, edx
  0008e	eb 02		 jmp	 SHORT $LN15@deflate_hu
$LN14@deflate_hu:
  00090	33 c9		 xor	 ecx, ecx
$LN15@deflate_hu:
  00092	6a 00		 push	 0
  00094	51		 push	 ecx
  00095	2b c2		 sub	 eax, edx
  00097	8b ce		 mov	 ecx, esi
  00099	e8 00 00 00 00	 call	 __tr_flush_block
  0009e	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  000a1	8b 3e		 mov	 edi, DWORD PTR [esi]
  000a3	83 c4 08	 add	 esp, 8
  000a6	89 46 5c	 mov	 DWORD PTR [esi+92], eax
  000a9	e8 00 00 00 00	 call	 _flush_pending
  000ae	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000b0	83 79 10 00	 cmp	 DWORD PTR [ecx+16], 0
  000b4	0f 85 4a ff ff
	ff		 jne	 $LL11@deflate_hu
$LN23@deflate_hu:
  000ba	33 c0		 xor	 eax, eax
  000bc	5f		 pop	 edi

; 2163 : }

  000bd	5d		 pop	 ebp
  000be	c3		 ret	 0
$LN22@deflate_hu:

; 2141 :                 if (flush == Z_NO_FLUSH)

  000bf	8b 45 08	 mov	 eax, DWORD PTR _flush$[ebp]
  000c2	85 c0		 test	 eax, eax

; 2142 :                     return need_more;

  000c4	74 f4		 je	 SHORT $LN23@deflate_hu

; 2154 :     }
; 2155 :     s->insert = 0;

  000c6	c7 86 b4 16 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+5812], 0

; 2156 :     if (flush == Z_FINISH) {

  000d0	83 f8 04	 cmp	 eax, 4
  000d3	75 3f		 jne	 SHORT $LN4@deflate_hu

; 2157 :         FLUSH_BLOCK(s, 1);

  000d5	8b 56 5c	 mov	 edx, DWORD PTR [esi+92]
  000d8	85 d2		 test	 edx, edx
  000da	78 07		 js	 SHORT $LN16@deflate_hu
  000dc	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  000df	03 ca		 add	 ecx, edx
  000e1	eb 02		 jmp	 SHORT $LN17@deflate_hu
$LN16@deflate_hu:
  000e3	33 c9		 xor	 ecx, ecx
$LN17@deflate_hu:
  000e5	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  000e8	6a 01		 push	 1
  000ea	51		 push	 ecx
  000eb	2b c2		 sub	 eax, edx
  000ed	8b ce		 mov	 ecx, esi
  000ef	e8 00 00 00 00	 call	 __tr_flush_block
  000f4	8b 56 6c	 mov	 edx, DWORD PTR [esi+108]
  000f7	8b 3e		 mov	 edi, DWORD PTR [esi]
  000f9	83 c4 08	 add	 esp, 8
  000fc	89 56 5c	 mov	 DWORD PTR [esi+92], edx
  000ff	e8 00 00 00 00	 call	 _flush_pending
  00104	8b 06		 mov	 eax, DWORD PTR [esi]
  00106	33 c9		 xor	 ecx, ecx
  00108	39 48 10	 cmp	 DWORD PTR [eax+16], ecx
  0010b	5f		 pop	 edi
  0010c	0f 95 c1	 setne	 cl
  0010f	8d 41 02	 lea	 eax, DWORD PTR [ecx+2]

; 2163 : }

  00112	5d		 pop	 ebp
  00113	c3		 ret	 0
$LN4@deflate_hu:

; 2158 :         return finish_done;
; 2159 :     }
; 2160 :     if (s->last_lit)

  00114	83 be a0 16 00
	00 00		 cmp	 DWORD PTR [esi+5792], 0
  0011b	74 3b		 je	 SHORT $LN1@deflate_hu

; 2161 :         FLUSH_BLOCK(s, 0);

  0011d	8b 56 5c	 mov	 edx, DWORD PTR [esi+92]
  00120	85 d2		 test	 edx, edx
  00122	78 07		 js	 SHORT $LN18@deflate_hu
  00124	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  00127	03 ca		 add	 ecx, edx
  00129	eb 02		 jmp	 SHORT $LN19@deflate_hu
$LN18@deflate_hu:
  0012b	33 c9		 xor	 ecx, ecx
$LN19@deflate_hu:
  0012d	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  00130	6a 00		 push	 0
  00132	51		 push	 ecx
  00133	2b c2		 sub	 eax, edx
  00135	8b ce		 mov	 ecx, esi
  00137	e8 00 00 00 00	 call	 __tr_flush_block
  0013c	8b 56 6c	 mov	 edx, DWORD PTR [esi+108]
  0013f	8b 3e		 mov	 edi, DWORD PTR [esi]
  00141	83 c4 08	 add	 esp, 8
  00144	89 56 5c	 mov	 DWORD PTR [esi+92], edx
  00147	e8 00 00 00 00	 call	 _flush_pending
  0014c	8b 06		 mov	 eax, DWORD PTR [esi]
  0014e	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  00152	0f 84 62 ff ff
	ff		 je	 $LN23@deflate_hu
$LN1@deflate_hu:

; 2162 :     return block_done;

  00158	b8 01 00 00 00	 mov	 eax, 1
  0015d	5f		 pop	 edi

; 2163 : }

  0015e	5d		 pop	 ebp
  0015f	c3		 ret	 0
_deflate_huff ENDP
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT _deflate_rle
_TEXT	SEGMENT
_flush$ = 8						; size = 4
_deflate_rle PROC					; COMDAT
; _s$ = esi

; 2060 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	57		 push	 edi
  00005	bb 01 00 00 00	 mov	 ebx, 1
  0000a	8d 9b 00 00 00
	00		 npad	 6
$LL20@deflate_rl:

; 2061 :     int bflush;             /* set if current block must be flushed */
; 2062 :     uInt prev;              /* byte at distance one to match */
; 2063 :     Bytef *scan, *strend;   /* scan goes up to strend for length of run */
; 2064 : 
; 2065 :     for (;;) {
; 2066 :         /* Make sure that we always have enough lookahead, except
; 2067 :          * at the end of the input file. We need MAX_MATCH bytes
; 2068 :          * for the longest run, plus one for the unrolled loop.
; 2069 :          */
; 2070 :         if (s->lookahead <= MAX_MATCH) {

  00010	8b 7e 74	 mov	 edi, DWORD PTR [esi+116]
  00013	81 ff 02 01 00
	00		 cmp	 edi, 258		; 00000102H
  00019	77 24		 ja	 SHORT $LN41@deflate_rl

; 2071 :             fill_window(s);

  0001b	8b c6		 mov	 eax, esi
  0001d	e8 00 00 00 00	 call	 _fill_window

; 2072 :             if (s->lookahead <= MAX_MATCH && flush == Z_NO_FLUSH) {

  00022	8b 7e 74	 mov	 edi, DWORD PTR [esi+116]
  00025	81 ff 02 01 00
	00		 cmp	 edi, 258		; 00000102H
  0002b	77 0a		 ja	 SHORT $LN40@deflate_rl
  0002d	83 7d 08 00	 cmp	 DWORD PTR _flush$[ebp], 0
  00031	0f 84 cb 01 00
	00		 je	 $LN36@deflate_rl
$LN40@deflate_rl:

; 2073 :                 return need_more;
; 2074 :             }
; 2075 :             if (s->lookahead == 0) break; /* flush the current block */

  00037	85 ff		 test	 edi, edi
  00039	0f 84 c9 01 00
	00		 je	 $LN35@deflate_rl
$LN41@deflate_rl:

; 2076 :         }
; 2077 : 
; 2078 :         /* See how many times the previous byte repeats */
; 2079 :         s->match_length = 0;

  0003f	c7 46 60 00 00
	00 00		 mov	 DWORD PTR [esi+96], 0

; 2080 :         if (s->lookahead >= MIN_MATCH && s->strstart > 0) {

  00046	83 ff 03	 cmp	 edi, 3
  00049	0f 82 a2 00 00
	00		 jb	 $LN9@deflate_rl
  0004f	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  00052	85 c0		 test	 eax, eax
  00054	0f 84 97 00 00
	00		 je	 $LN9@deflate_rl

; 2081 :             scan = s->window + s->strstart - 1;

  0005a	8b 56 38	 mov	 edx, DWORD PTR [esi+56]
  0005d	03 d0		 add	 edx, eax

; 2082 :             prev = *scan;

  0005f	0f b6 4a ff	 movzx	 ecx, BYTE PTR [edx-1]
  00063	8d 42 ff	 lea	 eax, DWORD PTR [edx-1]

; 2083 :             if (prev == *++scan && prev == *++scan && prev == *++scan) {

  00066	03 c3		 add	 eax, ebx
  00068	0f b6 18	 movzx	 ebx, BYTE PTR [eax]
  0006b	3b cb		 cmp	 ecx, ebx
  0006d	75 7d		 jne	 SHORT $LN38@deflate_rl
  0006f	0f b6 58 01	 movzx	 ebx, BYTE PTR [eax+1]
  00073	3b cb		 cmp	 ecx, ebx
  00075	75 75		 jne	 SHORT $LN38@deflate_rl
  00077	0f b6 58 02	 movzx	 ebx, BYTE PTR [eax+2]
  0007b	83 c0 02	 add	 eax, 2
  0007e	3b cb		 cmp	 ecx, ebx
  00080	75 6a		 jne	 SHORT $LN38@deflate_rl

; 2084 :                 strend = s->window + s->strstart + MAX_MATCH;

  00082	81 c2 02 01 00
	00		 add	 edx, 258		; 00000102H
$LL13@deflate_rl:

; 2085 :                 do {
; 2086 :                 } while (prev == *++scan && prev == *++scan &&
; 2087 :                          prev == *++scan && prev == *++scan &&
; 2088 :                          prev == *++scan && prev == *++scan &&
; 2089 :                          prev == *++scan && prev == *++scan &&
; 2090 :                          scan < strend);

  00088	0f b6 58 01	 movzx	 ebx, BYTE PTR [eax+1]
  0008c	40		 inc	 eax
  0008d	3b cb		 cmp	 ecx, ebx
  0008f	75 43		 jne	 SHORT $LN10@deflate_rl
  00091	0f b6 58 01	 movzx	 ebx, BYTE PTR [eax+1]
  00095	40		 inc	 eax
  00096	3b cb		 cmp	 ecx, ebx
  00098	75 3a		 jne	 SHORT $LN10@deflate_rl
  0009a	0f b6 58 01	 movzx	 ebx, BYTE PTR [eax+1]
  0009e	40		 inc	 eax
  0009f	3b cb		 cmp	 ecx, ebx
  000a1	75 31		 jne	 SHORT $LN10@deflate_rl
  000a3	0f b6 58 01	 movzx	 ebx, BYTE PTR [eax+1]
  000a7	40		 inc	 eax
  000a8	3b cb		 cmp	 ecx, ebx
  000aa	75 28		 jne	 SHORT $LN10@deflate_rl
  000ac	0f b6 58 01	 movzx	 ebx, BYTE PTR [eax+1]
  000b0	40		 inc	 eax
  000b1	3b cb		 cmp	 ecx, ebx
  000b3	75 1f		 jne	 SHORT $LN10@deflate_rl
  000b5	0f b6 58 01	 movzx	 ebx, BYTE PTR [eax+1]
  000b9	40		 inc	 eax
  000ba	3b cb		 cmp	 ecx, ebx
  000bc	75 16		 jne	 SHORT $LN10@deflate_rl
  000be	0f b6 58 01	 movzx	 ebx, BYTE PTR [eax+1]
  000c2	40		 inc	 eax
  000c3	3b cb		 cmp	 ecx, ebx
  000c5	75 0d		 jne	 SHORT $LN10@deflate_rl
  000c7	0f b6 58 01	 movzx	 ebx, BYTE PTR [eax+1]
  000cb	40		 inc	 eax
  000cc	3b cb		 cmp	 ecx, ebx
  000ce	75 04		 jne	 SHORT $LN10@deflate_rl
  000d0	3b c2		 cmp	 eax, edx
  000d2	72 b4		 jb	 SHORT $LL13@deflate_rl
$LN10@deflate_rl:

; 2091 :                 s->match_length = MAX_MATCH - (uInt)(strend - scan);

  000d4	2b c2		 sub	 eax, edx
  000d6	05 02 01 00 00	 add	 eax, 258		; 00000102H
  000db	89 46 60	 mov	 DWORD PTR [esi+96], eax

; 2092 :                 if (s->match_length > s->lookahead)
; 2093 :                     s->match_length = s->lookahead;

  000de	bb 01 00 00 00	 mov	 ebx, 1
  000e3	3b c7		 cmp	 eax, edi
  000e5	76 0a		 jbe	 SHORT $LN9@deflate_rl
  000e7	89 7e 60	 mov	 DWORD PTR [esi+96], edi
  000ea	eb 05		 jmp	 SHORT $LN9@deflate_rl
$LN38@deflate_rl:
  000ec	bb 01 00 00 00	 mov	 ebx, 1
$LN9@deflate_rl:

; 2094 :             }
; 2095 :             Assert(scan <= s->window+(uInt)(s->window_size-1), "wild scan");
; 2096 :         }
; 2097 : 
; 2098 :         /* Emit match if have run of MIN_MATCH or longer, else emit literal */
; 2099 :         if (s->match_length >= MIN_MATCH) {

  000f1	83 7e 60 03	 cmp	 DWORD PTR [esi+96], 3

; 2100 :             check_match(s, s->strstart, s->strstart - 1, s->match_length);
; 2101 : 
; 2102 :             _tr_tally_dist(s, 1, s->match_length - MIN_MATCH, bflush);

  000f5	8b 96 a0 16 00
	00		 mov	 edx, DWORD PTR [esi+5792]
  000fb	72 6d		 jb	 SHORT $LN8@deflate_rl
  000fd	8a 46 60	 mov	 al, BYTE PTR [esi+96]
  00100	8b 8e a4 16 00
	00		 mov	 ecx, DWORD PTR [esi+5796]
  00106	2c 03		 sub	 al, 3
  00108	8b fb		 mov	 edi, ebx
  0010a	66 89 3c 51	 mov	 WORD PTR [ecx+edx*2], di
  0010e	8b 8e a0 16 00
	00		 mov	 ecx, DWORD PTR [esi+5792]
  00114	8b 96 98 16 00
	00		 mov	 edx, DWORD PTR [esi+5784]
  0011a	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  0011d	01 9e a0 16 00
	00		 add	 DWORD PTR [esi+5792], ebx
  00123	0f b6 d0	 movzx	 edx, al
  00126	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR __length_code[edx]
  0012d	66 01 9c 86 98
	04 00 00	 add	 WORD PTR [esi+eax*4+1176], bx
  00135	66 01 9e 88 09
	00 00		 add	 WORD PTR [esi+2440], bx
  0013c	8b 8e 9c 16 00
	00		 mov	 ecx, DWORD PTR [esi+5788]
  00142	8d 84 86 98 04
	00 00		 lea	 eax, DWORD PTR [esi+eax*4+1176]

; 2103 : 
; 2104 :             s->lookahead -= s->match_length;

  00149	8b 46 60	 mov	 eax, DWORD PTR [esi+96]
  0014c	2b cb		 sub	 ecx, ebx
  0014e	33 d2		 xor	 edx, edx
  00150	39 8e a0 16 00
	00		 cmp	 DWORD PTR [esi+5792], ecx

; 2105 :             s->strstart += s->match_length;
; 2106 :             s->match_length = 0;

  00156	c7 46 60 00 00
	00 00		 mov	 DWORD PTR [esi+96], 0
  0015d	0f 94 c2	 sete	 dl
  00160	29 46 74	 sub	 DWORD PTR [esi+116], eax
  00163	01 46 6c	 add	 DWORD PTR [esi+108], eax
  00166	8b ca		 mov	 ecx, edx

; 2107 :         } else {

  00168	eb 55		 jmp	 SHORT $LN7@deflate_rl
$LN8@deflate_rl:

; 2108 :             /* No match, output a literal byte */
; 2109 :             Tracevv((stderr,"%c", s->window[s->strstart]));
; 2110 :             _tr_tally_lit (s, s->window[s->strstart], bflush);

  0016a	8b 4e 6c	 mov	 ecx, DWORD PTR [esi+108]
  0016d	8b 46 38	 mov	 eax, DWORD PTR [esi+56]
  00170	8a 04 08	 mov	 al, BYTE PTR [eax+ecx]
  00173	8b 8e a4 16 00
	00		 mov	 ecx, DWORD PTR [esi+5796]
  00179	33 ff		 xor	 edi, edi
  0017b	66 89 3c 51	 mov	 WORD PTR [ecx+edx*2], di
  0017f	8b 8e a0 16 00
	00		 mov	 ecx, DWORD PTR [esi+5792]
  00185	8b 96 98 16 00
	00		 mov	 edx, DWORD PTR [esi+5784]
  0018b	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  0018e	01 9e a0 16 00
	00		 add	 DWORD PTR [esi+5792], ebx
  00194	0f b6 d0	 movzx	 edx, al
  00197	66 01 9c 96 94
	00 00 00	 add	 WORD PTR [esi+edx*4+148], bx
  0019f	8d 84 96 94 00
	00 00		 lea	 eax, DWORD PTR [esi+edx*4+148]
  001a6	8b 86 9c 16 00
	00		 mov	 eax, DWORD PTR [esi+5788]
  001ac	2b c3		 sub	 eax, ebx
  001ae	33 c9		 xor	 ecx, ecx
  001b0	39 86 a0 16 00
	00		 cmp	 DWORD PTR [esi+5792], eax
  001b6	0f 94 c1	 sete	 cl

; 2111 :             s->lookahead--;

  001b9	ff 4e 74	 dec	 DWORD PTR [esi+116]

; 2112 :             s->strstart++;

  001bc	01 5e 6c	 add	 DWORD PTR [esi+108], ebx
$LN7@deflate_rl:

; 2113 :         }
; 2114 :         if (bflush) FLUSH_BLOCK(s, 0);

  001bf	85 c9		 test	 ecx, ecx
  001c1	0f 84 49 fe ff
	ff		 je	 $LL20@deflate_rl
  001c7	8b 56 5c	 mov	 edx, DWORD PTR [esi+92]
  001ca	85 d2		 test	 edx, edx
  001cc	78 07		 js	 SHORT $LN25@deflate_rl
  001ce	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  001d1	03 ca		 add	 ecx, edx
  001d3	eb 02		 jmp	 SHORT $LN26@deflate_rl
$LN25@deflate_rl:
  001d5	33 c9		 xor	 ecx, ecx
$LN26@deflate_rl:
  001d7	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  001da	6a 00		 push	 0
  001dc	51		 push	 ecx
  001dd	2b c2		 sub	 eax, edx
  001df	8b ce		 mov	 ecx, esi
  001e1	e8 00 00 00 00	 call	 __tr_flush_block
  001e6	8b 4e 6c	 mov	 ecx, DWORD PTR [esi+108]
  001e9	8b 3e		 mov	 edi, DWORD PTR [esi]
  001eb	83 c4 08	 add	 esp, 8
  001ee	89 4e 5c	 mov	 DWORD PTR [esi+92], ecx
  001f1	e8 00 00 00 00	 call	 _flush_pending
  001f6	8b 16		 mov	 edx, DWORD PTR [esi]
  001f8	83 7a 10 00	 cmp	 DWORD PTR [edx+16], 0
  001fc	0f 85 0e fe ff
	ff		 jne	 $LL20@deflate_rl
$LN36@deflate_rl:
  00202	5f		 pop	 edi
  00203	33 c0		 xor	 eax, eax
  00205	5b		 pop	 ebx

; 2124 : }

  00206	5d		 pop	 ebp
  00207	c3		 ret	 0
$LN35@deflate_rl:

; 2115 :     }
; 2116 :     s->insert = 0;
; 2117 :     if (flush == Z_FINISH) {

  00208	83 7d 08 04	 cmp	 DWORD PTR _flush$[ebp], 4
  0020c	c7 86 b4 16 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+5812], 0
  00216	75 3f		 jne	 SHORT $LN4@deflate_rl

; 2118 :         FLUSH_BLOCK(s, 1);

  00218	8b 56 5c	 mov	 edx, DWORD PTR [esi+92]
  0021b	85 d2		 test	 edx, edx
  0021d	78 07		 js	 SHORT $LN27@deflate_rl
  0021f	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  00222	03 ca		 add	 ecx, edx
  00224	eb 02		 jmp	 SHORT $LN28@deflate_rl
$LN27@deflate_rl:
  00226	33 c9		 xor	 ecx, ecx
$LN28@deflate_rl:
  00228	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  0022b	53		 push	 ebx
  0022c	51		 push	 ecx
  0022d	2b c2		 sub	 eax, edx
  0022f	8b ce		 mov	 ecx, esi
  00231	e8 00 00 00 00	 call	 __tr_flush_block
  00236	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  00239	8b 3e		 mov	 edi, DWORD PTR [esi]
  0023b	83 c4 08	 add	 esp, 8
  0023e	89 46 5c	 mov	 DWORD PTR [esi+92], eax
  00241	e8 00 00 00 00	 call	 _flush_pending
  00246	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00248	33 c0		 xor	 eax, eax
  0024a	39 41 10	 cmp	 DWORD PTR [ecx+16], eax
  0024d	5f		 pop	 edi
  0024e	0f 95 c0	 setne	 al
  00251	5b		 pop	 ebx
  00252	83 c0 02	 add	 eax, 2

; 2124 : }

  00255	5d		 pop	 ebp
  00256	c3		 ret	 0
$LN4@deflate_rl:

; 2119 :         return finish_done;
; 2120 :     }
; 2121 :     if (s->last_lit)

  00257	83 be a0 16 00
	00 00		 cmp	 DWORD PTR [esi+5792], 0
  0025e	74 3b		 je	 SHORT $LN1@deflate_rl

; 2122 :         FLUSH_BLOCK(s, 0);

  00260	8b 56 5c	 mov	 edx, DWORD PTR [esi+92]
  00263	85 d2		 test	 edx, edx
  00265	78 07		 js	 SHORT $LN29@deflate_rl
  00267	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  0026a	03 ca		 add	 ecx, edx
  0026c	eb 02		 jmp	 SHORT $LN30@deflate_rl
$LN29@deflate_rl:
  0026e	33 c9		 xor	 ecx, ecx
$LN30@deflate_rl:
  00270	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  00273	6a 00		 push	 0
  00275	51		 push	 ecx
  00276	2b c2		 sub	 eax, edx
  00278	8b ce		 mov	 ecx, esi
  0027a	e8 00 00 00 00	 call	 __tr_flush_block
  0027f	8b 56 6c	 mov	 edx, DWORD PTR [esi+108]
  00282	8b 3e		 mov	 edi, DWORD PTR [esi]
  00284	83 c4 08	 add	 esp, 8
  00287	89 56 5c	 mov	 DWORD PTR [esi+92], edx
  0028a	e8 00 00 00 00	 call	 _flush_pending
  0028f	8b 06		 mov	 eax, DWORD PTR [esi]
  00291	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  00295	0f 84 67 ff ff
	ff		 je	 $LN36@deflate_rl
$LN1@deflate_rl:
  0029b	5f		 pop	 edi

; 2123 :     return block_done;

  0029c	8b c3		 mov	 eax, ebx
  0029e	5b		 pop	 ebx

; 2124 : }

  0029f	5d		 pop	 ebp
  002a0	c3		 ret	 0
_deflate_rle ENDP
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT _deflate_slow
_TEXT	SEGMENT
_bflush$ = 8						; size = 4
_s$ = 8							; size = 4
_flush$ = 12						; size = 4
_deflate_slow PROC					; COMDAT

; 1929 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]
  00008	57		 push	 edi
  00009	bb 01 00 00 00	 mov	 ebx, 1
  0000e	8b ff		 npad	 2
$LL26@deflate_sl:

; 1930 :     IPos hash_head;          /* head of hash chain */
; 1931 :     int bflush;              /* set if current block must be flushed */
; 1932 : 
; 1933 :     /* Process the input block. */
; 1934 :     for (;;) {
; 1935 :         /* Make sure that we always have enough lookahead, except
; 1936 :          * at the end of the input file. We need MAX_MATCH bytes
; 1937 :          * for the next match, plus MIN_MATCH bytes to insert the
; 1938 :          * string following the next match.
; 1939 :          */
; 1940 :         if (s->lookahead < MIN_LOOKAHEAD) {

  00010	8b 4e 74	 mov	 ecx, DWORD PTR [esi+116]
  00013	81 f9 06 01 00
	00		 cmp	 ecx, 262		; 00000106H
  00019	73 24		 jae	 SHORT $LN50@deflate_sl

; 1941 :             fill_window(s);

  0001b	8b c6		 mov	 eax, esi
  0001d	e8 00 00 00 00	 call	 _fill_window

; 1942 :             if (s->lookahead < MIN_LOOKAHEAD && flush == Z_NO_FLUSH) {

  00022	8b 4e 74	 mov	 ecx, DWORD PTR [esi+116]
  00025	81 f9 06 01 00
	00		 cmp	 ecx, 262		; 00000106H
  0002b	73 0a		 jae	 SHORT $LN49@deflate_sl
  0002d	83 7d 0c 00	 cmp	 DWORD PTR _flush$[ebp], 0
  00031	0f 84 2d 02 00
	00		 je	 $LN47@deflate_sl
$LN49@deflate_sl:

; 1943 :                 return need_more;
; 1944 :             }
; 1945 :             if (s->lookahead == 0) break; /* flush the current block */

  00037	85 c9		 test	 ecx, ecx
  00039	0f 84 d1 02 00
	00		 je	 $LN45@deflate_sl
$LN50@deflate_sl:

; 1946 :         }
; 1947 : 
; 1948 :         /* Insert the string window[strstart .. strstart+2] in the
; 1949 :          * dictionary, and set hash_head to the head of the hash chain:
; 1950 :          */
; 1951 :         hash_head = NIL;

  0003f	33 c0		 xor	 eax, eax

; 1952 :         if (s->lookahead >= MIN_MATCH) {

  00041	83 f9 03	 cmp	 ecx, 3
  00044	72 49		 jb	 SHORT $LN21@deflate_sl

; 1953 :             INSERT_STRING(s, s->strstart, hash_head);

  00046	8b 46 48	 mov	 eax, DWORD PTR [esi+72]
  00049	8b 4e 58	 mov	 ecx, DWORD PTR [esi+88]
  0004c	8b 56 6c	 mov	 edx, DWORD PTR [esi+108]
  0004f	8b 7e 34	 mov	 edi, DWORD PTR [esi+52]
  00052	d3 e0		 shl	 eax, cl
  00054	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  00057	0f b6 4c 11 02	 movzx	 ecx, BYTE PTR [ecx+edx+2]
  0005c	33 c1		 xor	 eax, ecx
  0005e	23 46 54	 and	 eax, DWORD PTR [esi+84]
  00061	8b 4e 44	 mov	 ecx, DWORD PTR [esi+68]
  00064	23 fa		 and	 edi, edx
  00066	8b 56 40	 mov	 edx, DWORD PTR [esi+64]
  00069	89 46 48	 mov	 DWORD PTR [esi+72], eax
  0006c	66 8b 04 41	 mov	 ax, WORD PTR [ecx+eax*2]
  00070	66 89 04 7a	 mov	 WORD PTR [edx+edi*2], ax
  00074	8b 4e 6c	 mov	 ecx, DWORD PTR [esi+108]
  00077	23 4e 34	 and	 ecx, DWORD PTR [esi+52]
  0007a	8b 56 40	 mov	 edx, DWORD PTR [esi+64]
  0007d	0f b7 04 4a	 movzx	 eax, WORD PTR [edx+ecx*2]
  00081	8b 4e 48	 mov	 ecx, DWORD PTR [esi+72]
  00084	8b 56 44	 mov	 edx, DWORD PTR [esi+68]
  00087	66 8b 7e 6c	 mov	 di, WORD PTR [esi+108]
  0008b	66 89 3c 4a	 mov	 WORD PTR [edx+ecx*2], di
$LN21@deflate_sl:

; 1954 :         }
; 1955 : 
; 1956 :         /* Find the longest match, discarding those <= prev_length.
; 1957 :          */
; 1958 :         s->prev_length = s->match_length, s->prev_match = s->match_start;

  0008f	8b 4e 60	 mov	 ecx, DWORD PTR [esi+96]
  00092	8b 56 70	 mov	 edx, DWORD PTR [esi+112]
  00095	89 4e 78	 mov	 DWORD PTR [esi+120], ecx
  00098	89 56 64	 mov	 DWORD PTR [esi+100], edx

; 1959 :         s->match_length = MIN_MATCH-1;

  0009b	c7 46 60 02 00
	00 00		 mov	 DWORD PTR [esi+96], 2

; 1960 : 
; 1961 :         if (hash_head != NIL && s->prev_length < s->max_lazy_match &&
; 1962 :             s->strstart - hash_head <= MAX_DIST(s)) {

  000a2	85 c0		 test	 eax, eax
  000a4	74 4f		 je	 SHORT $LN51@deflate_sl
  000a6	3b 8e 80 00 00
	00		 cmp	 ecx, DWORD PTR [esi+128]
  000ac	73 47		 jae	 SHORT $LN51@deflate_sl
  000ae	8b 56 6c	 mov	 edx, DWORD PTR [esi+108]
  000b1	8b 4e 2c	 mov	 ecx, DWORD PTR [esi+44]
  000b4	2b d0		 sub	 edx, eax
  000b6	81 e9 06 01 00
	00		 sub	 ecx, 262		; 00000106H
  000bc	3b d1		 cmp	 edx, ecx
  000be	77 35		 ja	 SHORT $LN51@deflate_sl

; 1963 :             /* To simplify the code, we prevent matches with the string
; 1964 :              * of window index 0 (in particular we have to avoid a match
; 1965 :              * of the string with itself at the start of the input file).
; 1966 :              */
; 1967 :             s->match_length = longest_match (s, hash_head);

  000c0	50		 push	 eax
  000c1	8b fe		 mov	 edi, esi
  000c3	e8 00 00 00 00	 call	 _longest_match
  000c8	83 c4 04	 add	 esp, 4
  000cb	89 46 60	 mov	 DWORD PTR [esi+96], eax

; 1968 :             /* longest_match() sets match_start */
; 1969 : 
; 1970 :             if (s->match_length <= 5 && (s->strategy == Z_FILTERED
; 1971 : #if TOO_FAR <= 32767
; 1972 :                 || (s->match_length == MIN_MATCH &&
; 1973 :                     s->strstart - s->match_start > TOO_FAR)
; 1974 : #endif
; 1975 :                 )) {

  000ce	83 f8 05	 cmp	 eax, 5
  000d1	77 22		 ja	 SHORT $LN51@deflate_sl
  000d3	39 9e 88 00 00
	00		 cmp	 DWORD PTR [esi+136], ebx
  000d9	74 13		 je	 SHORT $LN18@deflate_sl
  000db	83 f8 03	 cmp	 eax, 3
  000de	75 15		 jne	 SHORT $LN51@deflate_sl
  000e0	8b 56 6c	 mov	 edx, DWORD PTR [esi+108]
  000e3	2b 56 70	 sub	 edx, DWORD PTR [esi+112]
  000e6	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  000ec	76 07		 jbe	 SHORT $LN51@deflate_sl
$LN18@deflate_sl:

; 1976 : 
; 1977 :                 /* If prev_match is also MIN_MATCH, match_start is garbage
; 1978 :                  * but we will ignore the current match anyway.
; 1979 :                  */
; 1980 :                 s->match_length = MIN_MATCH-1;

  000ee	c7 46 60 02 00
	00 00		 mov	 DWORD PTR [esi+96], 2
$LN51@deflate_sl:

; 1981 :             }
; 1982 :         }
; 1983 :         /* If there was a match at the previous step and the current
; 1984 :          * match is not better, output the previous match:
; 1985 :          */
; 1986 :         if (s->prev_length >= MIN_MATCH && s->match_length <= s->prev_length) {

  000f5	8b 46 78	 mov	 eax, DWORD PTR [esi+120]
  000f8	83 f8 03	 cmp	 eax, 3
  000fb	0f 82 6a 01 00
	00		 jb	 $LN17@deflate_sl
  00101	39 46 60	 cmp	 DWORD PTR [esi+96], eax
  00104	0f 87 61 01 00
	00		 ja	 $LN17@deflate_sl

; 1987 :             uInt max_insert = s->strstart + s->lookahead - MIN_MATCH;
; 1988 :             /* Do not insert strings in hash table beyond this. */
; 1989 : 
; 1990 :             check_match(s, s->strstart-1, s->prev_match, s->prev_length);
; 1991 : 
; 1992 :             _tr_tally_dist(s, s->strstart -1 - s->prev_match,
; 1993 :                            s->prev_length - MIN_MATCH, bflush);

  0010a	66 8b 56 6c	 mov	 dx, WORD PTR [esi+108]
  0010e	66 2b 56 64	 sub	 dx, WORD PTR [esi+100]
  00112	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  00115	8b 4e 74	 mov	 ecx, DWORD PTR [esi+116]
  00118	66 2b d3	 sub	 dx, bx
  0011b	8b 9e a4 16 00
	00		 mov	 ebx, DWORD PTR [esi+5796]
  00121	8d 7c 08 fd	 lea	 edi, DWORD PTR [eax+ecx-3]
  00125	8a 46 78	 mov	 al, BYTE PTR [esi+120]
  00128	0f b7 ca	 movzx	 ecx, dx
  0012b	8b 96 a0 16 00
	00		 mov	 edx, DWORD PTR [esi+5792]
  00131	66 89 0c 53	 mov	 WORD PTR [ebx+edx*2], cx
  00135	8b 9e a0 16 00
	00		 mov	 ebx, DWORD PTR [esi+5792]
  0013b	8b 96 98 16 00
	00		 mov	 edx, DWORD PTR [esi+5784]
  00141	2c 03		 sub	 al, 3
  00143	88 04 1a	 mov	 BYTE PTR [edx+ebx], al
  00146	0f b6 c0	 movzx	 eax, al
  00149	bb 01 00 00 00	 mov	 ebx, 1
  0014e	01 9e a0 16 00
	00		 add	 DWORD PTR [esi+5792], ebx
  00154	0f b6 90 00 00
	00 00		 movzx	 edx, BYTE PTR __length_code[eax]
  0015b	66 01 9c 96 98
	04 00 00	 add	 WORD PTR [esi+edx*4+1176], bx
  00163	8d 84 96 98 04
	00 00		 lea	 eax, DWORD PTR [esi+edx*4+1176]
  0016a	81 c1 ff ff 00
	00		 add	 ecx, 65535		; 0000ffffH
  00170	b8 00 01 00 00	 mov	 eax, 256		; 00000100H
  00175	66 3b c8	 cmp	 cx, ax
  00178	73 0c		 jae	 SHORT $LN29@deflate_sl
  0017a	0f b7 c9	 movzx	 ecx, cx
  0017d	0f b6 81 00 00
	00 00		 movzx	 eax, BYTE PTR __dist_code[ecx]
  00184	eb 0d		 jmp	 SHORT $LN30@deflate_sl
$LN29@deflate_sl:
  00186	0f b7 d1	 movzx	 edx, cx
  00189	c1 ea 07	 shr	 edx, 7
  0018c	0f b6 82 00 01
	00 00		 movzx	 eax, BYTE PTR __dist_code[edx+256]
$LN30@deflate_sl:
  00193	66 01 9c 86 88
	09 00 00	 add	 WORD PTR [esi+eax*4+2440], bx
  0019b	8b 86 9c 16 00
	00		 mov	 eax, DWORD PTR [esi+5788]
  001a1	2b c3		 sub	 eax, ebx
  001a3	33 c9		 xor	 ecx, ecx
  001a5	39 86 a0 16 00
	00		 cmp	 DWORD PTR [esi+5792], eax

; 1994 : 
; 1995 :             /* Insert in hash table all strings up to the end of the match.
; 1996 :              * strstart-1 and strstart are already inserted. If there is not
; 1997 :              * enough lookahead, the last two strings are not inserted in
; 1998 :              * the hash table.
; 1999 :              */
; 2000 :             s->lookahead -= s->prev_length-1;

  001ab	8b 46 78	 mov	 eax, DWORD PTR [esi+120]
  001ae	0f 94 c1	 sete	 cl
  001b1	8b d3		 mov	 edx, ebx
  001b3	2b d0		 sub	 edx, eax
  001b5	01 56 74	 add	 DWORD PTR [esi+116], edx

; 2001 :             s->prev_length -= 2;

  001b8	83 c0 fe	 add	 eax, -2			; fffffffeH
  001bb	89 46 78	 mov	 DWORD PTR [esi+120], eax
  001be	89 4d 08	 mov	 DWORD PTR _bflush$[ebp], ecx
$LL16@deflate_sl:

; 2002 :             do {
; 2003 :                 if (++s->strstart <= max_insert) {

  001c1	01 5e 6c	 add	 DWORD PTR [esi+108], ebx
  001c4	8b 56 6c	 mov	 edx, DWORD PTR [esi+108]
  001c7	3b d7		 cmp	 edx, edi
  001c9	77 3e		 ja	 SHORT $LN15@deflate_sl

; 2004 :                     INSERT_STRING(s, s->strstart, hash_head);

  001cb	8b 46 48	 mov	 eax, DWORD PTR [esi+72]
  001ce	8b 4e 58	 mov	 ecx, DWORD PTR [esi+88]
  001d1	8b 5e 34	 mov	 ebx, DWORD PTR [esi+52]
  001d4	d3 e0		 shl	 eax, cl
  001d6	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  001d9	0f b6 4c 11 02	 movzx	 ecx, BYTE PTR [ecx+edx+2]
  001de	33 c1		 xor	 eax, ecx
  001e0	23 46 54	 and	 eax, DWORD PTR [esi+84]
  001e3	8b 4e 44	 mov	 ecx, DWORD PTR [esi+68]
  001e6	89 46 48	 mov	 DWORD PTR [esi+72], eax
  001e9	0f b7 04 41	 movzx	 eax, WORD PTR [ecx+eax*2]
  001ed	23 da		 and	 ebx, edx
  001ef	8b 56 40	 mov	 edx, DWORD PTR [esi+64]
  001f2	66 89 04 5a	 mov	 WORD PTR [edx+ebx*2], ax
  001f6	0f b7 46 6c	 movzx	 eax, WORD PTR [esi+108]
  001fa	8b 4e 48	 mov	 ecx, DWORD PTR [esi+72]
  001fd	8b 56 44	 mov	 edx, DWORD PTR [esi+68]
  00200	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  00204	bb 01 00 00 00	 mov	 ebx, 1
$LN15@deflate_sl:

; 2005 :                 }
; 2006 :             } while (--s->prev_length != 0);

  00209	ff 4e 78	 dec	 DWORD PTR [esi+120]
  0020c	75 b3		 jne	 SHORT $LL16@deflate_sl

; 2007 :             s->match_available = 0;
; 2008 :             s->match_length = MIN_MATCH-1;
; 2009 :             s->strstart++;

  0020e	01 5e 6c	 add	 DWORD PTR [esi+108], ebx

; 2010 : 
; 2011 :             if (bflush) FLUSH_BLOCK(s, 0);

  00211	83 7d 08 00	 cmp	 DWORD PTR _bflush$[ebp], 0
  00215	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  00218	c7 46 68 00 00
	00 00		 mov	 DWORD PTR [esi+104], 0
  0021f	c7 46 60 02 00
	00 00		 mov	 DWORD PTR [esi+96], 2
  00226	0f 84 e4 fd ff
	ff		 je	 $LL26@deflate_sl
  0022c	8b 56 5c	 mov	 edx, DWORD PTR [esi+92]
  0022f	85 d2		 test	 edx, edx
  00231	78 07		 js	 SHORT $LN31@deflate_sl
  00233	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  00236	03 ca		 add	 ecx, edx
  00238	eb 02		 jmp	 SHORT $LN32@deflate_sl
$LN31@deflate_sl:
  0023a	33 c9		 xor	 ecx, ecx
$LN32@deflate_sl:
  0023c	6a 00		 push	 0
  0023e	51		 push	 ecx
  0023f	2b c2		 sub	 eax, edx
  00241	8b ce		 mov	 ecx, esi
  00243	e8 00 00 00 00	 call	 __tr_flush_block
  00248	8b 4e 6c	 mov	 ecx, DWORD PTR [esi+108]
  0024b	8b 3e		 mov	 edi, DWORD PTR [esi]
  0024d	83 c4 08	 add	 esp, 8
  00250	89 4e 5c	 mov	 DWORD PTR [esi+92], ecx
  00253	e8 00 00 00 00	 call	 _flush_pending
$LN52@deflate_sl:
  00258	8b 16		 mov	 edx, DWORD PTR [esi]
  0025a	83 7a 10 00	 cmp	 DWORD PTR [edx+16], 0
  0025e	0f 85 ac fd ff
	ff		 jne	 $LL26@deflate_sl
$LN47@deflate_sl:
  00264	5f		 pop	 edi
  00265	5e		 pop	 esi

; 2025 :             if (s->strm->avail_out == 0) return need_more;

  00266	33 c0		 xor	 eax, eax
  00268	5b		 pop	 ebx

; 2049 : }

  00269	5d		 pop	 ebp
  0026a	c3		 ret	 0
$LN17@deflate_sl:

; 2012 : 
; 2013 :         } else if (s->match_available) {

  0026b	83 7e 68 00	 cmp	 DWORD PTR [esi+104], 0
  0026f	0f 84 8d 00 00
	00		 je	 $LN9@deflate_sl

; 2014 :             /* If there was no match at the previous position, output a
; 2015 :              * single literal. If there was a match but the current match
; 2016 :              * is longer, truncate the previous match to a single literal.
; 2017 :              */
; 2018 :             Tracevv((stderr,"%c", s->window[s->strstart-1]));
; 2019 :             _tr_tally_lit(s, s->window[s->strstart-1], bflush);

  00275	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  00278	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  0027b	8a 44 08 ff	 mov	 al, BYTE PTR [eax+ecx-1]
  0027f	8b 96 a0 16 00
	00		 mov	 edx, DWORD PTR [esi+5792]
  00285	8b 8e a4 16 00
	00		 mov	 ecx, DWORD PTR [esi+5796]
  0028b	33 ff		 xor	 edi, edi
  0028d	66 89 3c 51	 mov	 WORD PTR [ecx+edx*2], di
  00291	8b 96 98 16 00
	00		 mov	 edx, DWORD PTR [esi+5784]
  00297	8b 8e a0 16 00
	00		 mov	 ecx, DWORD PTR [esi+5792]
  0029d	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  002a0	01 9e a0 16 00
	00		 add	 DWORD PTR [esi+5792], ebx
  002a6	0f b6 d0	 movzx	 edx, al
  002a9	66 01 9c 96 94
	00 00 00	 add	 WORD PTR [esi+edx*4+148], bx
  002b1	8d 84 96 94 00
	00 00		 lea	 eax, DWORD PTR [esi+edx*4+148]
  002b8	8b 86 9c 16 00
	00		 mov	 eax, DWORD PTR [esi+5788]
  002be	2b c3		 sub	 eax, ebx
  002c0	39 86 a0 16 00
	00		 cmp	 DWORD PTR [esi+5792], eax

; 2020 :             if (bflush) {

  002c6	75 2f		 jne	 SHORT $LN8@deflate_sl

; 2021 :                 FLUSH_BLOCK_ONLY(s, 0);

  002c8	8b 56 5c	 mov	 edx, DWORD PTR [esi+92]
  002cb	85 d2		 test	 edx, edx
  002cd	78 07		 js	 SHORT $LN33@deflate_sl
  002cf	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  002d2	03 ca		 add	 ecx, edx
  002d4	eb 02		 jmp	 SHORT $LN34@deflate_sl
$LN33@deflate_sl:
  002d6	33 c9		 xor	 ecx, ecx
$LN34@deflate_sl:
  002d8	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  002db	6a 00		 push	 0
  002dd	51		 push	 ecx
  002de	2b c2		 sub	 eax, edx
  002e0	8b ce		 mov	 ecx, esi
  002e2	e8 00 00 00 00	 call	 __tr_flush_block
  002e7	8b 4e 6c	 mov	 ecx, DWORD PTR [esi+108]
  002ea	8b 3e		 mov	 edi, DWORD PTR [esi]
  002ec	83 c4 08	 add	 esp, 8
  002ef	89 4e 5c	 mov	 DWORD PTR [esi+92], ecx
  002f2	e8 00 00 00 00	 call	 _flush_pending
$LN8@deflate_sl:

; 2022 :             }
; 2023 :             s->strstart++;

  002f7	01 5e 6c	 add	 DWORD PTR [esi+108], ebx

; 2024 :             s->lookahead--;

  002fa	ff 4e 74	 dec	 DWORD PTR [esi+116]

; 2026 :         } else {

  002fd	e9 56 ff ff ff	 jmp	 $LN52@deflate_sl
$LN9@deflate_sl:

; 2027 :             /* There is no previous match to compare with, wait for
; 2028 :              * the next step to decide.
; 2029 :              */
; 2030 :             s->match_available = 1;
; 2031 :             s->strstart++;

  00302	01 5e 6c	 add	 DWORD PTR [esi+108], ebx

; 2032 :             s->lookahead--;

  00305	ff 4e 74	 dec	 DWORD PTR [esi+116]
  00308	89 5e 68	 mov	 DWORD PTR [esi+104], ebx

; 2033 :         }
; 2034 :     }

  0030b	e9 00 fd ff ff	 jmp	 $LL26@deflate_sl
$LN45@deflate_sl:

; 2035 :     Assert (flush != Z_NO_FLUSH, "no flush?");
; 2036 :     if (s->match_available) {

  00310	83 7e 68 00	 cmp	 DWORD PTR [esi+104], 0
  00314	74 46		 je	 SHORT $LN5@deflate_sl

; 2037 :         Tracevv((stderr,"%c", s->window[s->strstart-1]));
; 2038 :         _tr_tally_lit(s, s->window[s->strstart-1], bflush);

  00316	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  00319	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  0031c	8a 44 08 ff	 mov	 al, BYTE PTR [eax+ecx-1]
  00320	8b 96 a0 16 00
	00		 mov	 edx, DWORD PTR [esi+5792]
  00326	8b 8e a4 16 00
	00		 mov	 ecx, DWORD PTR [esi+5796]
  0032c	33 ff		 xor	 edi, edi
  0032e	66 89 3c 51	 mov	 WORD PTR [ecx+edx*2], di
  00332	8b 96 98 16 00
	00		 mov	 edx, DWORD PTR [esi+5784]
  00338	8b 8e a0 16 00
	00		 mov	 ecx, DWORD PTR [esi+5792]
  0033e	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  00341	01 9e a0 16 00
	00		 add	 DWORD PTR [esi+5792], ebx
  00347	0f b6 d0	 movzx	 edx, al
  0034a	66 01 9c 96 94
	00 00 00	 add	 WORD PTR [esi+edx*4+148], bx
  00352	8d 84 96 94 00
	00 00		 lea	 eax, DWORD PTR [esi+edx*4+148]

; 2039 :         s->match_available = 0;

  00359	89 7e 68	 mov	 DWORD PTR [esi+104], edi
$LN5@deflate_sl:

; 2040 :     }
; 2041 :     s->insert = s->strstart < MIN_MATCH-1 ? s->strstart : MIN_MATCH-1;

  0035c	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  0035f	8b c8		 mov	 ecx, eax
  00361	83 f8 02	 cmp	 eax, 2
  00364	72 05		 jb	 SHORT $LN36@deflate_sl
  00366	b9 02 00 00 00	 mov	 ecx, 2
$LN36@deflate_sl:

; 2042 :     if (flush == Z_FINISH) {

  0036b	83 7d 0c 04	 cmp	 DWORD PTR _flush$[ebp], 4
  0036f	89 8e b4 16 00
	00		 mov	 DWORD PTR [esi+5812], ecx
  00375	75 3d		 jne	 SHORT $LN4@deflate_sl

; 2043 :         FLUSH_BLOCK(s, 1);

  00377	8b 56 5c	 mov	 edx, DWORD PTR [esi+92]
  0037a	85 d2		 test	 edx, edx
  0037c	78 07		 js	 SHORT $LN37@deflate_sl
  0037e	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  00381	03 ca		 add	 ecx, edx
  00383	eb 02		 jmp	 SHORT $LN38@deflate_sl
$LN37@deflate_sl:
  00385	33 c9		 xor	 ecx, ecx
$LN38@deflate_sl:
  00387	53		 push	 ebx
  00388	51		 push	 ecx
  00389	2b c2		 sub	 eax, edx
  0038b	8b ce		 mov	 ecx, esi
  0038d	e8 00 00 00 00	 call	 __tr_flush_block
  00392	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  00395	8b 3e		 mov	 edi, DWORD PTR [esi]
  00397	83 c4 08	 add	 esp, 8
  0039a	89 46 5c	 mov	 DWORD PTR [esi+92], eax
  0039d	e8 00 00 00 00	 call	 _flush_pending
  003a2	8b 0e		 mov	 ecx, DWORD PTR [esi]
  003a4	33 c0		 xor	 eax, eax
  003a6	39 41 10	 cmp	 DWORD PTR [ecx+16], eax
  003a9	5f		 pop	 edi
  003aa	0f 95 c0	 setne	 al
  003ad	5e		 pop	 esi
  003ae	5b		 pop	 ebx
  003af	83 c0 02	 add	 eax, 2

; 2049 : }

  003b2	5d		 pop	 ebp
  003b3	c3		 ret	 0
$LN4@deflate_sl:

; 2044 :         return finish_done;
; 2045 :     }
; 2046 :     if (s->last_lit)

  003b4	83 be a0 16 00
	00 00		 cmp	 DWORD PTR [esi+5792], 0
  003bb	74 38		 je	 SHORT $LN1@deflate_sl

; 2047 :         FLUSH_BLOCK(s, 0);

  003bd	8b 56 5c	 mov	 edx, DWORD PTR [esi+92]
  003c0	85 d2		 test	 edx, edx
  003c2	78 07		 js	 SHORT $LN39@deflate_sl
  003c4	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  003c7	03 ca		 add	 ecx, edx
  003c9	eb 02		 jmp	 SHORT $LN40@deflate_sl
$LN39@deflate_sl:
  003cb	33 c9		 xor	 ecx, ecx
$LN40@deflate_sl:
  003cd	6a 00		 push	 0
  003cf	51		 push	 ecx
  003d0	2b c2		 sub	 eax, edx
  003d2	8b ce		 mov	 ecx, esi
  003d4	e8 00 00 00 00	 call	 __tr_flush_block
  003d9	8b 56 6c	 mov	 edx, DWORD PTR [esi+108]
  003dc	8b 3e		 mov	 edi, DWORD PTR [esi]
  003de	83 c4 08	 add	 esp, 8
  003e1	89 56 5c	 mov	 DWORD PTR [esi+92], edx
  003e4	e8 00 00 00 00	 call	 _flush_pending
  003e9	8b 06		 mov	 eax, DWORD PTR [esi]
  003eb	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  003ef	0f 84 6f fe ff
	ff		 je	 $LN47@deflate_sl
$LN1@deflate_sl:
  003f5	5f		 pop	 edi
  003f6	5e		 pop	 esi

; 2048 :     return block_done;

  003f7	8b c3		 mov	 eax, ebx
  003f9	5b		 pop	 ebx

; 2049 : }

  003fa	5d		 pop	 ebp
  003fb	c3		 ret	 0
_deflate_slow ENDP
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT _deflate_fast
_TEXT	SEGMENT
_s$ = 8							; size = 4
_flush$ = 12						; size = 4
_deflate_fast PROC					; COMDAT

; 1827 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]
  00008	57		 push	 edi
  00009	bb 01 00 00 00	 mov	 ebx, 1
  0000e	8b ff		 npad	 2
$LL20@deflate_fa:

; 1828 :     IPos hash_head;       /* head of the hash chain */
; 1829 :     int bflush;           /* set if current block must be flushed */
; 1830 : 
; 1831 :     for (;;) {
; 1832 :         /* Make sure that we always have enough lookahead, except
; 1833 :          * at the end of the input file. We need MAX_MATCH bytes
; 1834 :          * for the next match, plus MIN_MATCH bytes to insert the
; 1835 :          * string following the next match.
; 1836 :          */
; 1837 :         if (s->lookahead < MIN_LOOKAHEAD) {

  00010	8b 46 74	 mov	 eax, DWORD PTR [esi+116]
  00013	3d 06 01 00 00	 cmp	 eax, 262		; 00000106H
  00018	73 23		 jae	 SHORT $LN16@deflate_fa

; 1838 :             fill_window(s);

  0001a	8b c6		 mov	 eax, esi
  0001c	e8 00 00 00 00	 call	 _fill_window

; 1839 :             if (s->lookahead < MIN_LOOKAHEAD && flush == Z_NO_FLUSH) {

  00021	8b 46 74	 mov	 eax, DWORD PTR [esi+116]
  00024	3d 06 01 00 00	 cmp	 eax, 262		; 00000106H
  00029	73 0a		 jae	 SHORT $LN40@deflate_fa
  0002b	83 7d 0c 00	 cmp	 DWORD PTR _flush$[ebp], 0
  0002f	0f 84 49 02 00
	00		 je	 $LN38@deflate_fa
$LN40@deflate_fa:

; 1840 :                 return need_more;
; 1841 :             }
; 1842 :             if (s->lookahead == 0) break; /* flush the current block */

  00035	85 c0		 test	 eax, eax
  00037	0f 84 48 02 00
	00		 je	 $LN37@deflate_fa
$LN16@deflate_fa:

; 1843 :         }
; 1844 : 
; 1845 :         /* Insert the string window[strstart .. strstart+2] in the
; 1846 :          * dictionary, and set hash_head to the head of the hash chain:
; 1847 :          */
; 1848 :         hash_head = NIL;
; 1849 :         if (s->lookahead >= MIN_MATCH) {

  0003d	83 f8 03	 cmp	 eax, 3
  00040	72 6d		 jb	 SHORT $LN41@deflate_fa

; 1850 :             INSERT_STRING(s, s->strstart, hash_head);

  00042	8b 46 48	 mov	 eax, DWORD PTR [esi+72]
  00045	8b 4e 58	 mov	 ecx, DWORD PTR [esi+88]
  00048	8b 56 6c	 mov	 edx, DWORD PTR [esi+108]
  0004b	8b 7e 34	 mov	 edi, DWORD PTR [esi+52]
  0004e	d3 e0		 shl	 eax, cl
  00050	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  00053	0f b6 4c 11 02	 movzx	 ecx, BYTE PTR [ecx+edx+2]
  00058	33 c1		 xor	 eax, ecx
  0005a	23 46 54	 and	 eax, DWORD PTR [esi+84]
  0005d	8b 4e 44	 mov	 ecx, DWORD PTR [esi+68]
  00060	23 fa		 and	 edi, edx
  00062	8b 56 40	 mov	 edx, DWORD PTR [esi+64]
  00065	89 46 48	 mov	 DWORD PTR [esi+72], eax
  00068	66 8b 04 41	 mov	 ax, WORD PTR [ecx+eax*2]
  0006c	66 89 04 7a	 mov	 WORD PTR [edx+edi*2], ax
  00070	8b 4e 6c	 mov	 ecx, DWORD PTR [esi+108]
  00073	23 4e 34	 and	 ecx, DWORD PTR [esi+52]
  00076	8b 56 40	 mov	 edx, DWORD PTR [esi+64]
  00079	0f b7 04 4a	 movzx	 eax, WORD PTR [edx+ecx*2]
  0007d	8b 4e 48	 mov	 ecx, DWORD PTR [esi+72]
  00080	8b 56 44	 mov	 edx, DWORD PTR [esi+68]
  00083	66 8b 7e 6c	 mov	 di, WORD PTR [esi+108]
  00087	66 89 3c 4a	 mov	 WORD PTR [edx+ecx*2], di

; 1851 :         }
; 1852 : 
; 1853 :         /* Find the longest match, discarding those <= prev_length.
; 1854 :          * At this point we have always match_length < MIN_MATCH
; 1855 :          */
; 1856 :         if (hash_head != NIL && s->strstart - hash_head <= MAX_DIST(s)) {

  0008b	85 c0		 test	 eax, eax
  0008d	74 20		 je	 SHORT $LN41@deflate_fa
  0008f	8b 4e 6c	 mov	 ecx, DWORD PTR [esi+108]
  00092	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  00095	2b c8		 sub	 ecx, eax
  00097	81 ea 06 01 00
	00		 sub	 edx, 262		; 00000106H
  0009d	3b ca		 cmp	 ecx, edx
  0009f	77 0e		 ja	 SHORT $LN41@deflate_fa

; 1857 :             /* To simplify the code, we prevent matches with the string
; 1858 :              * of window index 0 (in particular we have to avoid a match
; 1859 :              * of the string with itself at the start of the input file).
; 1860 :              */
; 1861 :             s->match_length = longest_match (s, hash_head);

  000a1	50		 push	 eax
  000a2	8b fe		 mov	 edi, esi
  000a4	e8 00 00 00 00	 call	 _longest_match
  000a9	83 c4 04	 add	 esp, 4
  000ac	89 46 60	 mov	 DWORD PTR [esi+96], eax
$LN41@deflate_fa:

; 1862 :             /* longest_match() sets match_start */
; 1863 :         }
; 1864 :         if (s->match_length >= MIN_MATCH) {

  000af	83 7e 60 03	 cmp	 DWORD PTR [esi+96], 3
  000b3	0f 82 25 01 00
	00		 jb	 $LN13@deflate_fa

; 1865 :             check_match(s, s->strstart, s->match_start, s->match_length);
; 1866 : 
; 1867 :             _tr_tally_dist(s, s->strstart - s->match_start,
; 1868 :                            s->match_length - MIN_MATCH, bflush);

  000b9	66 8b 4e 6c	 mov	 cx, WORD PTR [esi+108]
  000bd	66 2b 4e 70	 sub	 cx, WORD PTR [esi+112]
  000c1	8b 96 a0 16 00
	00		 mov	 edx, DWORD PTR [esi+5792]
  000c7	8a 46 60	 mov	 al, BYTE PTR [esi+96]
  000ca	8b be a4 16 00
	00		 mov	 edi, DWORD PTR [esi+5796]
  000d0	0f b7 c9	 movzx	 ecx, cx
  000d3	66 89 0c 57	 mov	 WORD PTR [edi+edx*2], cx
  000d7	8b 96 98 16 00
	00		 mov	 edx, DWORD PTR [esi+5784]
  000dd	8b be a0 16 00
	00		 mov	 edi, DWORD PTR [esi+5792]
  000e3	2c 03		 sub	 al, 3
  000e5	88 04 3a	 mov	 BYTE PTR [edx+edi], al
  000e8	01 9e a0 16 00
	00		 add	 DWORD PTR [esi+5792], ebx
  000ee	0f b6 c0	 movzx	 eax, al
  000f1	0f b6 90 00 00
	00 00		 movzx	 edx, BYTE PTR __length_code[eax]
  000f8	66 01 9c 96 98
	04 00 00	 add	 WORD PTR [esi+edx*4+1176], bx
  00100	8d 84 96 98 04
	00 00		 lea	 eax, DWORD PTR [esi+edx*4+1176]
  00107	81 c1 ff ff 00
	00		 add	 ecx, 65535		; 0000ffffH
  0010d	b8 00 01 00 00	 mov	 eax, 256		; 00000100H
  00112	66 3b c8	 cmp	 cx, ax
  00115	73 0c		 jae	 SHORT $LN23@deflate_fa
  00117	0f b7 c9	 movzx	 ecx, cx
  0011a	0f b6 81 00 00
	00 00		 movzx	 eax, BYTE PTR __dist_code[ecx]
  00121	eb 0d		 jmp	 SHORT $LN24@deflate_fa
$LN23@deflate_fa:
  00123	0f b7 d1	 movzx	 edx, cx
  00126	c1 ea 07	 shr	 edx, 7
  00129	0f b6 82 00 01
	00 00		 movzx	 eax, BYTE PTR __dist_code[edx+256]
$LN24@deflate_fa:
  00130	66 01 9c 86 88
	09 00 00	 add	 WORD PTR [esi+eax*4+2440], bx
  00138	8b 86 9c 16 00
	00		 mov	 eax, DWORD PTR [esi+5788]
  0013e	33 c9		 xor	 ecx, ecx
  00140	2b c3		 sub	 eax, ebx
  00142	39 86 a0 16 00
	00		 cmp	 DWORD PTR [esi+5792], eax

; 1869 : 
; 1870 :             s->lookahead -= s->match_length;

  00148	8b 46 60	 mov	 eax, DWORD PTR [esi+96]
  0014b	0f 94 c1	 sete	 cl
  0014e	29 46 74	 sub	 DWORD PTR [esi+116], eax
  00151	8b f9		 mov	 edi, ecx
  00153	8b 4e 74	 mov	 ecx, DWORD PTR [esi+116]

; 1871 : 
; 1872 :             /* Insert new strings in the hash table only if the match length
; 1873 :              * is not too large. This saves time but degrades compression.
; 1874 :              */
; 1875 : #ifndef FASTEST
; 1876 :             if (s->match_length <= s->max_insert_length &&
; 1877 :                 s->lookahead >= MIN_MATCH) {

  00156	3b 86 80 00 00
	00		 cmp	 eax, DWORD PTR [esi+128]
  0015c	77 57		 ja	 SHORT $LN12@deflate_fa
  0015e	83 f9 03	 cmp	 ecx, 3
  00161	72 52		 jb	 SHORT $LN12@deflate_fa

; 1878 :                 s->match_length--; /* string at strstart already in table */

  00163	48		 dec	 eax
  00164	89 46 60	 mov	 DWORD PTR [esi+96], eax
$LL39@deflate_fa:

; 1879 :                 do {
; 1880 :                     s->strstart++;

  00167	01 5e 6c	 add	 DWORD PTR [esi+108], ebx
  0016a	8b 56 6c	 mov	 edx, DWORD PTR [esi+108]

; 1881 :                     INSERT_STRING(s, s->strstart, hash_head);

  0016d	8b 5e 48	 mov	 ebx, DWORD PTR [esi+72]
  00170	8b 4e 58	 mov	 ecx, DWORD PTR [esi+88]
  00173	8b 46 38	 mov	 eax, DWORD PTR [esi+56]
  00176	0f b6 44 02 02	 movzx	 eax, BYTE PTR [edx+eax+2]
  0017b	d3 e3		 shl	 ebx, cl
  0017d	8b 4e 44	 mov	 ecx, DWORD PTR [esi+68]
  00180	33 c3		 xor	 eax, ebx
  00182	23 46 54	 and	 eax, DWORD PTR [esi+84]
  00185	8b 5e 34	 mov	 ebx, DWORD PTR [esi+52]
  00188	89 46 48	 mov	 DWORD PTR [esi+72], eax
  0018b	0f b7 04 41	 movzx	 eax, WORD PTR [ecx+eax*2]
  0018f	23 da		 and	 ebx, edx
  00191	8b 56 40	 mov	 edx, DWORD PTR [esi+64]
  00194	66 89 04 5a	 mov	 WORD PTR [edx+ebx*2], ax
  00198	0f b7 46 6c	 movzx	 eax, WORD PTR [esi+108]
  0019c	8b 4e 48	 mov	 ecx, DWORD PTR [esi+72]
  0019f	8b 56 44	 mov	 edx, DWORD PTR [esi+68]
  001a2	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax

; 1882 :                     /* strstart never exceeds WSIZE-MAX_MATCH, so there are
; 1883 :                      * always MIN_MATCH bytes ahead.
; 1884 :                      */
; 1885 :                 } while (--s->match_length != 0);

  001a6	ff 4e 60	 dec	 DWORD PTR [esi+96]

; 1886 :                 s->strstart++;

  001a9	bb 01 00 00 00	 mov	 ebx, 1
  001ae	75 b7		 jne	 SHORT $LL39@deflate_fa

; 1887 :             } else

  001b0	e9 83 00 00 00	 jmp	 $LN42@deflate_fa
$LN12@deflate_fa:

; 1888 : #endif
; 1889 :             {
; 1890 :                 s->strstart += s->match_length;

  001b5	01 46 6c	 add	 DWORD PTR [esi+108], eax

; 1891 :                 s->match_length = 0;
; 1892 :                 s->ins_h = s->window[s->strstart];

  001b8	8b 56 38	 mov	 edx, DWORD PTR [esi+56]
  001bb	03 56 6c	 add	 edx, DWORD PTR [esi+108]

; 1893 :                 UPDATE_HASH(s, s->ins_h, s->window[s->strstart+1]);

  001be	8b 4e 58	 mov	 ecx, DWORD PTR [esi+88]
  001c1	c7 46 60 00 00
	00 00		 mov	 DWORD PTR [esi+96], 0
  001c8	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  001cb	89 46 48	 mov	 DWORD PTR [esi+72], eax
  001ce	d3 e0		 shl	 eax, cl
  001d0	0f b6 4a 01	 movzx	 ecx, BYTE PTR [edx+1]
  001d4	33 c1		 xor	 eax, ecx
  001d6	23 46 54	 and	 eax, DWORD PTR [esi+84]
  001d9	89 46 48	 mov	 DWORD PTR [esi+72], eax

; 1894 : #if MIN_MATCH != 3
; 1895 :                 Call UPDATE_HASH() MIN_MATCH-3 more times
; 1896 : #endif
; 1897 :                 /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not
; 1898 :                  * matter since it will be recomputed at next deflate call.
; 1899 :                  */
; 1900 :             }
; 1901 :         } else {

  001dc	eb 5d		 jmp	 SHORT $LN7@deflate_fa
$LN13@deflate_fa:

; 1902 :             /* No match, output a literal byte */
; 1903 :             Tracevv((stderr,"%c", s->window[s->strstart]));
; 1904 :             _tr_tally_lit (s, s->window[s->strstart], bflush);

  001de	8b 56 6c	 mov	 edx, DWORD PTR [esi+108]
  001e1	8b 46 38	 mov	 eax, DWORD PTR [esi+56]
  001e4	8a 04 02	 mov	 al, BYTE PTR [edx+eax]
  001e7	8b 8e a0 16 00
	00		 mov	 ecx, DWORD PTR [esi+5792]
  001ed	8b 96 a4 16 00
	00		 mov	 edx, DWORD PTR [esi+5796]
  001f3	33 ff		 xor	 edi, edi
  001f5	66 89 3c 4a	 mov	 WORD PTR [edx+ecx*2], di
  001f9	8b 96 a0 16 00
	00		 mov	 edx, DWORD PTR [esi+5792]
  001ff	8b 8e 98 16 00
	00		 mov	 ecx, DWORD PTR [esi+5784]
  00205	88 04 11	 mov	 BYTE PTR [ecx+edx], al
  00208	01 9e a0 16 00
	00		 add	 DWORD PTR [esi+5792], ebx
  0020e	0f b6 c0	 movzx	 eax, al
  00211	66 01 9c 86 94
	00 00 00	 add	 WORD PTR [esi+eax*4+148], bx
  00219	8b 8e 9c 16 00
	00		 mov	 ecx, DWORD PTR [esi+5788]
  0021f	8d 84 86 94 00
	00 00		 lea	 eax, DWORD PTR [esi+eax*4+148]
  00226	33 d2		 xor	 edx, edx
  00228	2b cb		 sub	 ecx, ebx
  0022a	39 8e a0 16 00
	00		 cmp	 DWORD PTR [esi+5792], ecx
  00230	0f 94 c2	 sete	 dl

; 1905 :             s->lookahead--;

  00233	ff 4e 74	 dec	 DWORD PTR [esi+116]
  00236	8b fa		 mov	 edi, edx
$LN42@deflate_fa:

; 1906 :             s->strstart++;

  00238	01 5e 6c	 add	 DWORD PTR [esi+108], ebx
$LN7@deflate_fa:

; 1907 :         }
; 1908 :         if (bflush) FLUSH_BLOCK(s, 0);

  0023b	85 ff		 test	 edi, edi
  0023d	0f 84 cd fd ff
	ff		 je	 $LL20@deflate_fa
  00243	8b 56 5c	 mov	 edx, DWORD PTR [esi+92]
  00246	85 d2		 test	 edx, edx
  00248	78 07		 js	 SHORT $LN25@deflate_fa
  0024a	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  0024d	03 ca		 add	 ecx, edx
  0024f	eb 02		 jmp	 SHORT $LN26@deflate_fa
$LN25@deflate_fa:
  00251	33 c9		 xor	 ecx, ecx
$LN26@deflate_fa:
  00253	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  00256	6a 00		 push	 0
  00258	51		 push	 ecx
  00259	2b c2		 sub	 eax, edx
  0025b	8b ce		 mov	 ecx, esi
  0025d	e8 00 00 00 00	 call	 __tr_flush_block
  00262	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  00265	8b 3e		 mov	 edi, DWORD PTR [esi]
  00267	83 c4 08	 add	 esp, 8
  0026a	89 46 5c	 mov	 DWORD PTR [esi+92], eax
  0026d	e8 00 00 00 00	 call	 _flush_pending
  00272	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00274	83 79 10 00	 cmp	 DWORD PTR [ecx+16], 0
  00278	0f 85 92 fd ff
	ff		 jne	 $LL20@deflate_fa
$LN38@deflate_fa:
  0027e	5f		 pop	 edi
  0027f	5e		 pop	 esi
  00280	33 c0		 xor	 eax, eax
  00282	5b		 pop	 ebx

; 1918 : }

  00283	5d		 pop	 ebp
  00284	c3		 ret	 0
$LN37@deflate_fa:

; 1909 :     }
; 1910 :     s->insert = s->strstart < MIN_MATCH-1 ? s->strstart : MIN_MATCH-1;

  00285	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  00288	8b c8		 mov	 ecx, eax
  0028a	83 f8 02	 cmp	 eax, 2
  0028d	72 05		 jb	 SHORT $LN28@deflate_fa
  0028f	b9 02 00 00 00	 mov	 ecx, 2
$LN28@deflate_fa:

; 1911 :     if (flush == Z_FINISH) {

  00294	83 7d 0c 04	 cmp	 DWORD PTR _flush$[ebp], 4
  00298	89 8e b4 16 00
	00		 mov	 DWORD PTR [esi+5812], ecx
  0029e	75 3d		 jne	 SHORT $LN4@deflate_fa

; 1912 :         FLUSH_BLOCK(s, 1);

  002a0	8b 56 5c	 mov	 edx, DWORD PTR [esi+92]
  002a3	85 d2		 test	 edx, edx
  002a5	78 07		 js	 SHORT $LN29@deflate_fa
  002a7	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  002aa	03 ca		 add	 ecx, edx
  002ac	eb 02		 jmp	 SHORT $LN30@deflate_fa
$LN29@deflate_fa:
  002ae	33 c9		 xor	 ecx, ecx
$LN30@deflate_fa:
  002b0	53		 push	 ebx
  002b1	51		 push	 ecx
  002b2	2b c2		 sub	 eax, edx
  002b4	8b ce		 mov	 ecx, esi
  002b6	e8 00 00 00 00	 call	 __tr_flush_block
  002bb	8b 56 6c	 mov	 edx, DWORD PTR [esi+108]
  002be	8b 3e		 mov	 edi, DWORD PTR [esi]
  002c0	83 c4 08	 add	 esp, 8
  002c3	89 56 5c	 mov	 DWORD PTR [esi+92], edx
  002c6	e8 00 00 00 00	 call	 _flush_pending
  002cb	8b 06		 mov	 eax, DWORD PTR [esi]
  002cd	33 c9		 xor	 ecx, ecx
  002cf	39 48 10	 cmp	 DWORD PTR [eax+16], ecx
  002d2	5f		 pop	 edi
  002d3	0f 95 c1	 setne	 cl
  002d6	5e		 pop	 esi
  002d7	5b		 pop	 ebx
  002d8	8d 41 02	 lea	 eax, DWORD PTR [ecx+2]

; 1918 : }

  002db	5d		 pop	 ebp
  002dc	c3		 ret	 0
$LN4@deflate_fa:

; 1913 :         return finish_done;
; 1914 :     }
; 1915 :     if (s->last_lit)

  002dd	83 be a0 16 00
	00 00		 cmp	 DWORD PTR [esi+5792], 0
  002e4	74 38		 je	 SHORT $LN1@deflate_fa

; 1916 :         FLUSH_BLOCK(s, 0);

  002e6	8b 56 5c	 mov	 edx, DWORD PTR [esi+92]
  002e9	85 d2		 test	 edx, edx
  002eb	78 07		 js	 SHORT $LN31@deflate_fa
  002ed	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  002f0	03 ca		 add	 ecx, edx
  002f2	eb 02		 jmp	 SHORT $LN32@deflate_fa
$LN31@deflate_fa:
  002f4	33 c9		 xor	 ecx, ecx
$LN32@deflate_fa:
  002f6	6a 00		 push	 0
  002f8	51		 push	 ecx
  002f9	2b c2		 sub	 eax, edx
  002fb	8b ce		 mov	 ecx, esi
  002fd	e8 00 00 00 00	 call	 __tr_flush_block
  00302	8b 56 6c	 mov	 edx, DWORD PTR [esi+108]
  00305	8b 3e		 mov	 edi, DWORD PTR [esi]
  00307	83 c4 08	 add	 esp, 8
  0030a	89 56 5c	 mov	 DWORD PTR [esi+92], edx
  0030d	e8 00 00 00 00	 call	 _flush_pending
  00312	8b 06		 mov	 eax, DWORD PTR [esi]
  00314	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  00318	0f 84 60 ff ff
	ff		 je	 $LN38@deflate_fa
$LN1@deflate_fa:
  0031e	5f		 pop	 edi
  0031f	5e		 pop	 esi

; 1917 :     return block_done;

  00320	8b c3		 mov	 eax, ebx
  00322	5b		 pop	 ebx

; 1918 : }

  00323	5d		 pop	 ebp
  00324	c3		 ret	 0
_deflate_fast ENDP
_TEXT	ENDS
PUBLIC	_deflate
; Function compile flags: /Ogtp
;	COMDAT _deflate
_TEXT	SEGMENT
_left$4180 = -8						; size = 4
_beg$4179 = -4						; size = 4
_strm$ = 8						; size = 4
_flush$ = 12						; size = 4
_deflate PROC						; COMDAT

; 766  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	57		 push	 edi

; 767  :     int old_flush; /* value of flush param for previous deflate call */
; 768  :     deflate_state *s;
; 769  : 
; 770  :     if (deflateStateCheck(strm) || flush > Z_BLOCK || flush < 0) {

  00007	8b 7d 08	 mov	 edi, DWORD PTR _strm$[ebp]
  0000a	8b c7		 mov	 eax, edi
  0000c	e8 00 00 00 00	 call	 _deflateStateCheck
  00011	85 c0		 test	 eax, eax
  00013	0f 85 b5 08 00
	00		 jne	 $LN94@deflate
  00019	8b 4d 0c	 mov	 ecx, DWORD PTR _flush$[ebp]
  0001c	83 f9 05	 cmp	 ecx, 5
  0001f	0f 87 a9 08 00
	00		 ja	 $LN94@deflate

; 772  :     }
; 773  :     s = strm->state;

  00025	56		 push	 esi
  00026	8b 77 1c	 mov	 esi, DWORD PTR [edi+28]

; 774  : 
; 775  :     if (strm->next_out == Z_NULL ||
; 776  :         (strm->avail_in != 0 && strm->next_in == Z_NULL) ||
; 777  :         (s->status == FINISH_STATE && flush != Z_FINISH)) {

  00029	39 47 0c	 cmp	 DWORD PTR [edi+12], eax
  0002c	0f 84 8a 08 00
	00		 je	 $LN92@deflate
  00032	39 47 04	 cmp	 DWORD PTR [edi+4], eax
  00035	74 08		 je	 SHORT $LN91@deflate
  00037	39 07		 cmp	 DWORD PTR [edi], eax
  00039	0f 84 7d 08 00
	00		 je	 $LN92@deflate
$LN91@deflate:
  0003f	81 7e 04 9a 02
	00 00		 cmp	 DWORD PTR [esi+4], 666	; 0000029aH
  00046	75 09		 jne	 SHORT $LN121@deflate
  00048	83 f9 04	 cmp	 ecx, 4
  0004b	0f 85 6b 08 00
	00		 jne	 $LN92@deflate
$LN121@deflate:

; 779  :     }
; 780  :     if (strm->avail_out == 0) ERR_RETURN(strm, Z_BUF_ERROR);

  00051	83 7f 10 00	 cmp	 DWORD PTR [edi+16], 0
  00055	75 12		 jne	 SHORT $LN90@deflate
  00057	5e		 pop	 esi
  00058	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], OFFSET ??_C@_0N@DFPGLBGC@buffer?5error?$AA@
  0005f	b8 fb ff ff ff	 mov	 eax, -5			; fffffffbH
  00064	5f		 pop	 edi

; 1073 : }

  00065	8b e5		 mov	 esp, ebp
  00067	5d		 pop	 ebp
  00068	c3		 ret	 0
$LN90@deflate:

; 781  : 
; 782  :     old_flush = s->last_flush;
; 783  :     s->last_flush = flush;
; 784  : 
; 785  :     /* Flush as much pending output as possible */
; 786  :     if (s->pending != 0) {

  00069	83 7e 14 00	 cmp	 DWORD PTR [esi+20], 0
  0006d	8b 46 28	 mov	 eax, DWORD PTR [esi+40]
  00070	53		 push	 ebx
  00071	89 4e 28	 mov	 DWORD PTR [esi+40], ecx
  00074	74 1b		 je	 SHORT $LN89@deflate

; 787  :         flush_pending(strm);

  00076	e8 00 00 00 00	 call	 _flush_pending

; 788  :         if (strm->avail_out == 0) {

  0007b	83 7f 10 00	 cmp	 DWORD PTR [edi+16], 0
  0007f	75 40		 jne	 SHORT $LN127@deflate
$LN131@deflate:

; 870  :                 s->last_flush = -1;

  00081	c7 46 28 ff ff
	ff ff		 mov	 DWORD PTR [esi+40], -1
$LN13@deflate:
  00088	5b		 pop	 ebx
  00089	5e		 pop	 esi

; 871  :                 return Z_OK;

  0008a	33 c0		 xor	 eax, eax
  0008c	5f		 pop	 edi

; 1073 : }

  0008d	8b e5		 mov	 esp, ebp
  0008f	5d		 pop	 ebp
  00090	c3		 ret	 0
$LN89@deflate:

; 789  :             /* Since avail_out is 0, deflate will be called again with
; 790  :              * more output space, but possibly with both pending and
; 791  :              * avail_in equal to zero. There won't be anything to do,
; 792  :              * but this is not an error situation so make sure we
; 793  :              * return OK instead of BUF_ERROR at next call of deflate:
; 794  :              */
; 795  :             s->last_flush = -1;
; 796  :             return Z_OK;
; 797  :         }
; 798  : 
; 799  :     /* Make sure there is something to do and avoid duplicate consecutive
; 800  :      * flushes. For repeated and useless calls with Z_FINISH, we keep
; 801  :      * returning Z_STREAM_END instead of Z_BUF_ERROR.
; 802  :      */
; 803  :     } else if (strm->avail_in == 0 && RANK(flush) <= RANK(old_flush) &&
; 804  :                flush != Z_FINISH) {

  00091	83 7f 04 00	 cmp	 DWORD PTR [edi+4], 0
  00095	75 2a		 jne	 SHORT $LN127@deflate
  00097	33 d2		 xor	 edx, edx
  00099	83 f8 04	 cmp	 eax, 4
  0009c	0f 9e c2	 setle	 dl
  0009f	03 c0		 add	 eax, eax
  000a1	8d 1c 09	 lea	 ebx, DWORD PTR [ecx+ecx]
  000a4	4a		 dec	 edx
  000a5	83 e2 09	 and	 edx, 9
  000a8	2b c2		 sub	 eax, edx
  000aa	33 d2		 xor	 edx, edx
  000ac	83 f9 04	 cmp	 ecx, 4
  000af	0f 9e c2	 setle	 dl
  000b2	4a		 dec	 edx
  000b3	83 e2 09	 and	 edx, 9
  000b6	2b da		 sub	 ebx, edx
  000b8	3b d8		 cmp	 ebx, eax
  000ba	7f 05		 jg	 SHORT $LN127@deflate
  000bc	83 f9 04	 cmp	 ecx, 4

; 805  :         ERR_RETURN(strm, Z_BUF_ERROR);

  000bf	75 10		 jne	 SHORT $LN132@deflate
$LN127@deflate:

; 806  :     }
; 807  : 
; 808  :     /* User must not provide more input after the first FINISH: */
; 809  :     if (s->status == FINISH_STATE && strm->avail_in != 0) {

  000c1	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000c4	3d 9a 02 00 00	 cmp	 eax, 666		; 0000029aH
  000c9	75 19		 jne	 SHORT $LN85@deflate
  000cb	83 7f 04 00	 cmp	 DWORD PTR [edi+4], 0
  000cf	74 13		 je	 SHORT $LN85@deflate
$LN132@deflate:
  000d1	5b		 pop	 ebx
  000d2	5e		 pop	 esi

; 810  :         ERR_RETURN(strm, Z_BUF_ERROR);

  000d3	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], OFFSET ??_C@_0N@DFPGLBGC@buffer?5error?$AA@
  000da	b8 fb ff ff ff	 mov	 eax, -5			; fffffffbH
  000df	5f		 pop	 edi

; 1073 : }

  000e0	8b e5		 mov	 esp, ebp
  000e2	5d		 pop	 ebp
  000e3	c3		 ret	 0
$LN85@deflate:

; 811  :     }
; 812  : 
; 813  :     /* Write the header */
; 814  :     if (s->status == INIT_STATE) {

  000e4	83 f8 2a	 cmp	 eax, 42			; 0000002aH
  000e7	0f 85 bd 00 00
	00		 jne	 $LN122@deflate

; 815  :         /* zlib header */
; 816  :         uInt header = (Z_DEFLATED + ((s->w_bits-8)<<4)) << 8;

  000ed	8b 4e 30	 mov	 ecx, DWORD PTR [esi+48]
  000f0	83 e9 08	 sub	 ecx, 8
  000f3	c1 e1 0c	 shl	 ecx, 12			; 0000000cH
  000f6	81 c1 00 08 00
	00		 add	 ecx, 2048		; 00000800H

; 817  :         uInt level_flags;
; 818  : 
; 819  :         if (s->strategy >= Z_HUFFMAN_ONLY || s->level < 2)

  000fc	83 be 88 00 00
	00 02		 cmp	 DWORD PTR [esi+136], 2
  00103	7d 26		 jge	 SHORT $LN82@deflate
  00105	8b 86 84 00 00
	00		 mov	 eax, DWORD PTR [esi+132]
  0010b	83 f8 02	 cmp	 eax, 2
  0010e	7c 1b		 jl	 SHORT $LN82@deflate

; 821  :         else if (s->level < 6)
; 822  :             level_flags = 1;

  00110	bb 01 00 00 00	 mov	 ebx, 1
  00115	83 f8 06	 cmp	 eax, 6
  00118	7d 04		 jge	 SHORT $LN80@deflate
  0011a	8b c3		 mov	 eax, ebx
  0011c	eb 12		 jmp	 SHORT $LN77@deflate
$LN80@deflate:

; 823  :         else if (s->level == 6)

  0011e	33 d2		 xor	 edx, edx
  00120	83 f8 06	 cmp	 eax, 6
  00123	0f 95 c2	 setne	 dl
  00126	8d 42 02	 lea	 eax, DWORD PTR [edx+2]

; 824  :             level_flags = 2;
; 825  :         else
; 826  :             level_flags = 3;

  00129	eb 05		 jmp	 SHORT $LN77@deflate
$LN82@deflate:

; 820  :             level_flags = 0;

  0012b	33 c0		 xor	 eax, eax
  0012d	8d 58 01	 lea	 ebx, DWORD PTR [eax+1]
$LN77@deflate:

; 827  :         header |= (level_flags << 6);

  00130	c1 e0 06	 shl	 eax, 6
  00133	0b c8		 or	 ecx, eax

; 828  :         if (s->strstart != 0) header |= PRESET_DICT;

  00135	83 7e 6c 00	 cmp	 DWORD PTR [esi+108], 0
  00139	74 03		 je	 SHORT $LN76@deflate
  0013b	83 c9 20	 or	 ecx, 32			; 00000020H
$LN76@deflate:

; 829  :         header += 31 - (header % 31);

  0013e	b8 85 10 42 08	 mov	 eax, 138547333		; 08421085H
  00143	f7 e1		 mul	 ecx
  00145	2b ca		 sub	 ecx, edx
  00147	d1 e9		 shr	 ecx, 1
  00149	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
  0014c	c1 e8 04	 shr	 eax, 4

; 830  : 
; 831  :         putShortMSB(s, header);

  0014f	03 c3		 add	 eax, ebx
  00151	8b c8		 mov	 ecx, eax
  00153	c1 e1 05	 shl	 ecx, 5
  00156	2b c8		 sub	 ecx, eax
  00158	8b c6		 mov	 eax, esi
  0015a	e8 00 00 00 00	 call	 _putShortMSB

; 832  : 
; 833  :         /* Save the adler32 of the preset dictionary: */
; 834  :         if (s->strstart != 0) {

  0015f	83 7e 6c 00	 cmp	 DWORD PTR [esi+108], 0
  00163	74 12		 je	 SHORT $LN75@deflate

; 835  :             putShortMSB(s, (uInt)(strm->adler >> 16));

  00165	0f b7 4f 32	 movzx	 ecx, WORD PTR [edi+50]
  00169	e8 00 00 00 00	 call	 _putShortMSB

; 836  :             putShortMSB(s, (uInt)(strm->adler & 0xffff));

  0016e	0f b7 4f 30	 movzx	 ecx, WORD PTR [edi+48]
  00172	e8 00 00 00 00	 call	 _putShortMSB
$LN75@deflate:

; 837  :         }
; 838  :         strm->adler = adler32(0L, Z_NULL, 0);

  00177	6a 00		 push	 0
  00179	6a 00		 push	 0
  0017b	6a 00		 push	 0
  0017d	e8 00 00 00 00	 call	 _adler32
  00182	89 47 30	 mov	 DWORD PTR [edi+48], eax
  00185	83 c4 0c	 add	 esp, 12			; 0000000cH

; 839  :         s->status = BUSY_STATE;

  00188	c7 46 04 71 00
	00 00		 mov	 DWORD PTR [esi+4], 113	; 00000071H

; 840  : 
; 841  :         /* Compression must start with an empty pending buffer */
; 842  :         flush_pending(strm);

  0018f	e8 00 00 00 00	 call	 _flush_pending

; 843  :         if (s->pending != 0) {

  00194	83 7e 14 00	 cmp	 DWORD PTR [esi+20], 0
  00198	74 15		 je	 SHORT $LN74@deflate

; 870  :                 s->last_flush = -1;

  0019a	5b		 pop	 ebx
  0019b	c7 46 28 ff ff
	ff ff		 mov	 DWORD PTR [esi+40], -1
  001a2	5e		 pop	 esi

; 871  :                 return Z_OK;

  001a3	33 c0		 xor	 eax, eax
  001a5	5f		 pop	 edi

; 1073 : }

  001a6	8b e5		 mov	 esp, ebp
  001a8	5d		 pop	 ebp
  001a9	c3		 ret	 0
$LN122@deflate:

; 843  :         if (s->pending != 0) {

  001aa	bb 01 00 00 00	 mov	 ebx, 1
$LN74@deflate:

; 844  :             s->last_flush = -1;
; 845  :             return Z_OK;
; 846  :         }
; 847  :     }
; 848  : #ifdef GZIP
; 849  :     if (s->status == GZIP_STATE) {

  001af	83 7e 04 39	 cmp	 DWORD PTR [esi+4], 57	; 00000039H
  001b3	0f 85 24 02 00
	00		 jne	 $LN125@deflate

; 850  :         /* gzip header */
; 851  :         strm->adler = crc32(0L, Z_NULL, 0);

  001b9	6a 00		 push	 0
  001bb	6a 00		 push	 0
  001bd	6a 00		 push	 0
  001bf	e8 00 00 00 00	 call	 _crc32
  001c4	89 47 30	 mov	 DWORD PTR [edi+48], eax

; 852  :         put_byte(s, 31);

  001c7	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  001ca	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  001cd	c6 04 08 1f	 mov	 BYTE PTR [eax+ecx], 31	; 0000001fH
  001d1	01 5e 14	 add	 DWORD PTR [esi+20], ebx
  001d4	8b 46 14	 mov	 eax, DWORD PTR [esi+20]

; 853  :         put_byte(s, 139);

  001d7	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  001da	c6 04 10 8b	 mov	 BYTE PTR [eax+edx], 139	; 0000008bH
  001de	01 5e 14	 add	 DWORD PTR [esi+20], ebx
  001e1	8b 46 14	 mov	 eax, DWORD PTR [esi+20]

; 854  :         put_byte(s, 8);

  001e4	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  001e7	c6 04 08 08	 mov	 BYTE PTR [eax+ecx], 8
  001eb	01 5e 14	 add	 DWORD PTR [esi+20], ebx

; 855  :         if (s->gzhead == Z_NULL) {

  001ee	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  001f1	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  001f4	83 c4 0c	 add	 esp, 12			; 0000000cH
  001f7	85 c0		 test	 eax, eax
  001f9	0f 85 a5 00 00
	00		 jne	 $LN72@deflate

; 856  :             put_byte(s, 0);

  001ff	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  00202	88 04 11	 mov	 BYTE PTR [ecx+edx], al
  00205	01 5e 14	 add	 DWORD PTR [esi+20], ebx
  00208	8b 46 14	 mov	 eax, DWORD PTR [esi+20]

; 857  :             put_byte(s, 0);

  0020b	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0020e	c6 04 08 00	 mov	 BYTE PTR [eax+ecx], 0
  00212	01 5e 14	 add	 DWORD PTR [esi+20], ebx
  00215	8b 46 14	 mov	 eax, DWORD PTR [esi+20]

; 858  :             put_byte(s, 0);

  00218	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  0021b	c6 04 10 00	 mov	 BYTE PTR [eax+edx], 0
  0021f	01 5e 14	 add	 DWORD PTR [esi+20], ebx
  00222	8b 46 14	 mov	 eax, DWORD PTR [esi+20]

; 859  :             put_byte(s, 0);

  00225	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00228	c6 04 08 00	 mov	 BYTE PTR [eax+ecx], 0
  0022c	01 5e 14	 add	 DWORD PTR [esi+20], ebx
  0022f	8b 46 14	 mov	 eax, DWORD PTR [esi+20]

; 860  :             put_byte(s, 0);

  00232	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  00235	c6 04 10 00	 mov	 BYTE PTR [eax+edx], 0
  00239	01 5e 14	 add	 DWORD PTR [esi+20], ebx

; 861  :             put_byte(s, s->level == 9 ? 2 :
; 862  :                      (s->strategy >= Z_HUFFMAN_ONLY || s->level < 2 ?
; 863  :                       4 : 0));

  0023c	8b 86 84 00 00
	00		 mov	 eax, DWORD PTR [esi+132]
  00242	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00245	83 f8 09	 cmp	 eax, 9
  00248	75 07		 jne	 SHORT $LN100@deflate
  0024a	b8 02 00 00 00	 mov	 eax, 2
  0024f	eb 17		 jmp	 SHORT $LN99@deflate
$LN100@deflate:
  00251	83 be 88 00 00
	00 02		 cmp	 DWORD PTR [esi+136], 2
  00258	7d 09		 jge	 SHORT $LN98@deflate
  0025a	83 f8 02	 cmp	 eax, 2
  0025d	7c 04		 jl	 SHORT $LN98@deflate
  0025f	33 c0		 xor	 eax, eax
  00261	eb 05		 jmp	 SHORT $LN99@deflate
$LN98@deflate:
  00263	b8 04 00 00 00	 mov	 eax, 4
$LN99@deflate:
  00268	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  0026b	88 04 11	 mov	 BYTE PTR [ecx+edx], al
  0026e	01 5e 14	 add	 DWORD PTR [esi+20], ebx
  00271	8b 46 14	 mov	 eax, DWORD PTR [esi+20]

; 864  :             put_byte(s, OS_CODE);

  00274	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00277	c6 04 08 0a	 mov	 BYTE PTR [eax+ecx], 10	; 0000000aH
  0027b	01 5e 14	 add	 DWORD PTR [esi+20], ebx

; 865  :             s->status = BUSY_STATE;

  0027e	c7 46 04 71 00
	00 00		 mov	 DWORD PTR [esi+4], 113	; 00000071H

; 866  : 
; 867  :             /* Compression must start with an empty pending buffer */
; 868  :             flush_pending(strm);

  00285	e8 00 00 00 00	 call	 _flush_pending

; 869  :             if (s->pending != 0) {

  0028a	83 7e 14 00	 cmp	 DWORD PTR [esi+20], 0
  0028e	0f 84 49 01 00
	00		 je	 $LN125@deflate

; 870  :                 s->last_flush = -1;

  00294	5b		 pop	 ebx
  00295	c7 46 28 ff ff
	ff ff		 mov	 DWORD PTR [esi+40], -1
  0029c	5e		 pop	 esi

; 871  :                 return Z_OK;

  0029d	33 c0		 xor	 eax, eax
  0029f	5f		 pop	 edi

; 1073 : }

  002a0	8b e5		 mov	 esp, ebp
  002a2	5d		 pop	 ebp
  002a3	c3		 ret	 0
$LN72@deflate:

; 872  :             }
; 873  :         }
; 874  :         else {
; 875  :             put_byte(s, (s->gzhead->text ? 1 : 0) +
; 876  :                      (s->gzhead->hcrc ? 2 : 0) +
; 877  :                      (s->gzhead->extra == Z_NULL ? 0 : 4) +
; 878  :                      (s->gzhead->name == Z_NULL ? 0 : 8) +
; 879  :                      (s->gzhead->comment == Z_NULL ? 0 : 16)
; 880  :                      );

  002a4	8b 50 24	 mov	 edx, DWORD PTR [eax+36]
  002a7	8b 58 2c	 mov	 ebx, DWORD PTR [eax+44]
  002aa	f7 da		 neg	 edx
  002ac	1a d2		 sbb	 dl, dl
  002ae	80 e2 10	 and	 dl, 16			; 00000010H
  002b1	f7 db		 neg	 ebx
  002b3	1a db		 sbb	 bl, bl
  002b5	80 e3 02	 and	 bl, 2
  002b8	02 d3		 add	 dl, bl
  002ba	8b 58 1c	 mov	 ebx, DWORD PTR [eax+28]
  002bd	f7 db		 neg	 ebx
  002bf	1a db		 sbb	 bl, bl
  002c1	80 e3 08	 and	 bl, 8
  002c4	02 d3		 add	 dl, bl
  002c6	8b 58 10	 mov	 ebx, DWORD PTR [eax+16]
  002c9	f7 db		 neg	 ebx
  002cb	1a db		 sbb	 bl, bl
  002cd	80 e3 04	 and	 bl, 4
  002d0	02 d3		 add	 dl, bl
  002d2	83 38 00	 cmp	 DWORD PTR [eax], 0
  002d5	0f 95 c0	 setne	 al
  002d8	02 d0		 add	 dl, al
  002da	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  002dd	88 14 01	 mov	 BYTE PTR [ecx+eax], dl

; 881  :             put_byte(s, (Byte)(s->gzhead->time & 0xff));

  002e0	8b 56 1c	 mov	 edx, DWORD PTR [esi+28]
  002e3	8b 5e 08	 mov	 ebx, DWORD PTR [esi+8]
  002e6	b9 01 00 00 00	 mov	 ecx, 1
  002eb	01 4e 14	 add	 DWORD PTR [esi+20], ecx
  002ee	0f b6 52 04	 movzx	 edx, BYTE PTR [edx+4]
  002f2	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  002f5	88 14 18	 mov	 BYTE PTR [eax+ebx], dl
  002f8	01 4e 14	 add	 DWORD PTR [esi+20], ecx

; 882  :             put_byte(s, (Byte)((s->gzhead->time >> 8) & 0xff));

  002fb	8b 56 1c	 mov	 edx, DWORD PTR [esi+28]
  002fe	0f b6 52 05	 movzx	 edx, BYTE PTR [edx+5]
  00302	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00305	8b 5e 08	 mov	 ebx, DWORD PTR [esi+8]
  00308	88 14 18	 mov	 BYTE PTR [eax+ebx], dl
  0030b	01 4e 14	 add	 DWORD PTR [esi+20], ecx

; 883  :             put_byte(s, (Byte)((s->gzhead->time >> 16) & 0xff));

  0030e	8b 56 1c	 mov	 edx, DWORD PTR [esi+28]
  00311	0f b6 52 06	 movzx	 edx, BYTE PTR [edx+6]
  00315	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00318	8b 5e 08	 mov	 ebx, DWORD PTR [esi+8]
  0031b	88 14 18	 mov	 BYTE PTR [eax+ebx], dl
  0031e	01 4e 14	 add	 DWORD PTR [esi+20], ecx

; 884  :             put_byte(s, (Byte)((s->gzhead->time >> 24) & 0xff));

  00321	8b 56 1c	 mov	 edx, DWORD PTR [esi+28]
  00324	0f b6 52 07	 movzx	 edx, BYTE PTR [edx+7]
  00328	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0032b	8b 5e 08	 mov	 ebx, DWORD PTR [esi+8]
  0032e	88 14 18	 mov	 BYTE PTR [eax+ebx], dl
  00331	01 4e 14	 add	 DWORD PTR [esi+20], ecx

; 885  :             put_byte(s, s->level == 9 ? 2 :
; 886  :                      (s->strategy >= Z_HUFFMAN_ONLY || s->level < 2 ?
; 887  :                       4 : 0));

  00334	8b 86 84 00 00
	00		 mov	 eax, DWORD PTR [esi+132]
  0033a	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0033d	83 f8 09	 cmp	 eax, 9
  00340	75 07		 jne	 SHORT $LN104@deflate
  00342	b8 02 00 00 00	 mov	 eax, 2
  00347	eb 17		 jmp	 SHORT $LN103@deflate
$LN104@deflate:
  00349	83 be 88 00 00
	00 02		 cmp	 DWORD PTR [esi+136], 2
  00350	7d 09		 jge	 SHORT $LN102@deflate
  00352	83 f8 02	 cmp	 eax, 2
  00355	7c 04		 jl	 SHORT $LN102@deflate
  00357	33 c0		 xor	 eax, eax
  00359	eb 05		 jmp	 SHORT $LN103@deflate
$LN102@deflate:
  0035b	b8 04 00 00 00	 mov	 eax, 4
$LN103@deflate:
  00360	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  00363	88 04 11	 mov	 BYTE PTR [ecx+edx], al

; 888  :             put_byte(s, s->gzhead->os & 0xff);

  00366	8b 4e 1c	 mov	 ecx, DWORD PTR [esi+28]
  00369	8b 5e 08	 mov	 ebx, DWORD PTR [esi+8]
  0036c	ba 01 00 00 00	 mov	 edx, 1
  00371	01 56 14	 add	 DWORD PTR [esi+20], edx
  00374	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00377	8a 49 0c	 mov	 cl, BYTE PTR [ecx+12]
  0037a	88 0c 18	 mov	 BYTE PTR [eax+ebx], cl
  0037d	01 56 14	 add	 DWORD PTR [esi+20], edx

; 889  :             if (s->gzhead->extra != Z_NULL) {

  00380	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00383	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  00387	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0038a	74 21		 je	 SHORT $LN69@deflate

; 890  :                 put_byte(s, s->gzhead->extra_len & 0xff);

  0038c	8a 40 14	 mov	 al, BYTE PTR [eax+20]
  0038f	8b 5e 08	 mov	 ebx, DWORD PTR [esi+8]
  00392	88 04 19	 mov	 BYTE PTR [ecx+ebx], al
  00395	01 56 14	 add	 DWORD PTR [esi+20], edx

; 891  :                 put_byte(s, (s->gzhead->extra_len >> 8) & 0xff);

  00398	8b 4e 1c	 mov	 ecx, DWORD PTR [esi+28]
  0039b	8a 49 15	 mov	 cl, BYTE PTR [ecx+21]
  0039e	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  003a1	8b 5e 08	 mov	 ebx, DWORD PTR [esi+8]
  003a4	88 0c 18	 mov	 BYTE PTR [eax+ebx], cl
  003a7	01 56 14	 add	 DWORD PTR [esi+20], edx
  003aa	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
$LN69@deflate:

; 892  :             }
; 893  :             if (s->gzhead->hcrc)

  003ad	8b 56 1c	 mov	 edx, DWORD PTR [esi+28]
  003b0	83 7a 2c 00	 cmp	 DWORD PTR [edx+44], 0
  003b4	74 14		 je	 SHORT $LN68@deflate

; 894  :                 strm->adler = crc32(strm->adler, s->pending_buf,
; 895  :                                     s->pending);

  003b6	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  003b9	51		 push	 ecx
  003ba	8b 4f 30	 mov	 ecx, DWORD PTR [edi+48]
  003bd	50		 push	 eax
  003be	51		 push	 ecx
  003bf	e8 00 00 00 00	 call	 _crc32
  003c4	83 c4 0c	 add	 esp, 12			; 0000000cH
  003c7	89 47 30	 mov	 DWORD PTR [edi+48], eax
$LN68@deflate:

; 896  :             s->gzindex = 0;

  003ca	c7 46 20 00 00
	00 00		 mov	 DWORD PTR [esi+32], 0

; 897  :             s->status = EXTRA_STATE;

  003d1	c7 46 04 45 00
	00 00		 mov	 DWORD PTR [esi+4], 69	; 00000045H
  003d8	bb 01 00 00 00	 mov	 ebx, 1
$LN125@deflate:

; 898  :         }
; 899  :     }
; 900  :     if (s->status == EXTRA_STATE) {

  003dd	83 7e 04 45	 cmp	 DWORD PTR [esi+4], 69	; 00000045H
  003e1	0f 85 02 01 00
	00		 jne	 $LN126@deflate

; 901  :         if (s->gzhead->extra != Z_NULL) {

  003e7	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  003ea	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  003ee	0f 84 ee 00 00
	00		 je	 $LN66@deflate

; 902  :             ulg beg = s->pending;   /* start of bytes to update crc */
; 903  :             uInt left = (s->gzhead->extra_len & 0xffff) - s->gzindex;

  003f4	0f b7 58 14	 movzx	 ebx, WORD PTR [eax+20]
  003f8	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  003fb	2b 5e 20	 sub	 ebx, DWORD PTR [esi+32]

; 904  :             while (s->pending + left > s->pending_buf_size) {

  003fe	8b c2		 mov	 eax, edx
  00400	03 c3		 add	 eax, ebx
  00402	89 55 fc	 mov	 DWORD PTR _beg$4179[ebp], edx
  00405	89 5d f8	 mov	 DWORD PTR _left$4180[ebp], ebx
  00408	3b 46 0c	 cmp	 eax, DWORD PTR [esi+12]
  0040b	0f 86 7d 00 00
	00		 jbe	 $LN64@deflate
$LL65@deflate:

; 905  :                 uInt copy = s->pending_buf_size - s->pending;
; 906  :                 zmemcpy(s->pending_buf + s->pending,
; 907  :                         s->gzhead->extra + s->gzindex, copy);

  00411	8b 4e 1c	 mov	 ecx, DWORD PTR [esi+28]
  00414	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00417	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0041a	8b 5e 0c	 mov	 ebx, DWORD PTR [esi+12]
  0041d	03 56 20	 add	 edx, DWORD PTR [esi+32]
  00420	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00423	2b d8		 sub	 ebx, eax
  00425	53		 push	 ebx
  00426	52		 push	 edx
  00427	03 c8		 add	 ecx, eax
  00429	51		 push	 ecx
  0042a	e8 00 00 00 00	 call	 _memcpy

; 908  :                 s->pending = s->pending_buf_size;

  0042f	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]

; 909  :                 HCRC_UPDATE(beg);

  00432	8b 56 1c	 mov	 edx, DWORD PTR [esi+28]
  00435	83 c4 0c	 add	 esp, 12			; 0000000cH
  00438	89 46 14	 mov	 DWORD PTR [esi+20], eax
  0043b	83 7a 2c 00	 cmp	 DWORD PTR [edx+44], 0
  0043f	74 20		 je	 SHORT $LN62@deflate
  00441	3b 45 fc	 cmp	 eax, DWORD PTR _beg$4179[ebp]
  00444	76 1b		 jbe	 SHORT $LN62@deflate
  00446	8b 4d fc	 mov	 ecx, DWORD PTR _beg$4179[ebp]
  00449	2b c1		 sub	 eax, ecx
  0044b	50		 push	 eax
  0044c	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0044f	03 c1		 add	 eax, ecx
  00451	8b 4f 30	 mov	 ecx, DWORD PTR [edi+48]
  00454	50		 push	 eax
  00455	51		 push	 ecx
  00456	e8 00 00 00 00	 call	 _crc32
  0045b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0045e	89 47 30	 mov	 DWORD PTR [edi+48], eax
$LN62@deflate:

; 910  :                 s->gzindex += copy;

  00461	01 5e 20	 add	 DWORD PTR [esi+32], ebx

; 911  :                 flush_pending(strm);

  00464	e8 00 00 00 00	 call	 _flush_pending

; 912  :                 if (s->pending != 0) {

  00469	83 7e 14 00	 cmp	 DWORD PTR [esi+20], 0
  0046d	0f 85 0e fc ff
	ff		 jne	 $LN131@deflate

; 913  :                     s->last_flush = -1;
; 914  :                     return Z_OK;
; 915  :                 }
; 916  :                 beg = 0;
; 917  :                 left -= copy;

  00473	8b 45 f8	 mov	 eax, DWORD PTR _left$4180[ebp]
  00476	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  00479	2b c3		 sub	 eax, ebx
  0047b	03 d0		 add	 edx, eax
  0047d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _beg$4179[ebp], 0
  00484	89 45 f8	 mov	 DWORD PTR _left$4180[ebp], eax
  00487	3b 56 0c	 cmp	 edx, DWORD PTR [esi+12]
  0048a	77 85		 ja	 SHORT $LL65@deflate

; 965  :             } while (val != 0);

  0048c	8b d8		 mov	 ebx, eax
$LN64@deflate:

; 918  :             }
; 919  :             zmemcpy(s->pending_buf + s->pending,
; 920  :                     s->gzhead->extra + s->gzindex, left);

  0048e	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00491	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00494	03 4e 20	 add	 ecx, DWORD PTR [esi+32]
  00497	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  0049a	03 56 08	 add	 edx, DWORD PTR [esi+8]
  0049d	53		 push	 ebx
  0049e	51		 push	 ecx
  0049f	52		 push	 edx
  004a0	e8 00 00 00 00	 call	 _memcpy

; 921  :             s->pending += left;

  004a5	01 5e 14	 add	 DWORD PTR [esi+20], ebx

; 922  :             HCRC_UPDATE(beg);

  004a8	8b 4e 1c	 mov	 ecx, DWORD PTR [esi+28]
  004ab	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  004ae	83 c4 0c	 add	 esp, 12			; 0000000cH
  004b1	83 79 2c 00	 cmp	 DWORD PTR [ecx+44], 0
  004b5	74 1f		 je	 SHORT $LN57@deflate
  004b7	8b 4d fc	 mov	 ecx, DWORD PTR _beg$4179[ebp]
  004ba	3b c1		 cmp	 eax, ecx
  004bc	76 18		 jbe	 SHORT $LN57@deflate
  004be	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  004c1	2b c1		 sub	 eax, ecx
  004c3	50		 push	 eax
  004c4	8b 47 30	 mov	 eax, DWORD PTR [edi+48]
  004c7	03 d1		 add	 edx, ecx
  004c9	52		 push	 edx
  004ca	50		 push	 eax
  004cb	e8 00 00 00 00	 call	 _crc32
  004d0	83 c4 0c	 add	 esp, 12			; 0000000cH
  004d3	89 47 30	 mov	 DWORD PTR [edi+48], eax
$LN57@deflate:

; 923  :             s->gzindex = 0;

  004d6	c7 46 20 00 00
	00 00		 mov	 DWORD PTR [esi+32], 0
  004dd	bb 01 00 00 00	 mov	 ebx, 1
$LN66@deflate:

; 924  :         }
; 925  :         s->status = NAME_STATE;

  004e2	c7 46 04 49 00
	00 00		 mov	 DWORD PTR [esi+4], 73	; 00000049H
$LN126@deflate:

; 926  :     }
; 927  :     if (s->status == NAME_STATE) {

  004e9	83 7e 04 49	 cmp	 DWORD PTR [esi+4], 73	; 00000049H
  004ed	0f 85 a8 00 00
	00		 jne	 $LN54@deflate

; 928  :         if (s->gzhead->name != Z_NULL) {

  004f3	8b 4e 1c	 mov	 ecx, DWORD PTR [esi+28]
  004f6	83 79 1c 00	 cmp	 DWORD PTR [ecx+28], 0
  004fa	0f 84 94 00 00
	00		 je	 $LN53@deflate

; 929  :             ulg beg = s->pending;   /* start of bytes to update crc */

  00500	8b 5e 14	 mov	 ebx, DWORD PTR [esi+20]
$LL52@deflate:

; 930  :             int val;
; 931  :             do {
; 932  :                 if (s->pending == s->pending_buf_size) {

  00503	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00506	3b 46 0c	 cmp	 eax, DWORD PTR [esi+12]
  00509	75 37		 jne	 SHORT $LN49@deflate

; 933  :                     HCRC_UPDATE(beg);

  0050b	8b 56 1c	 mov	 edx, DWORD PTR [esi+28]
  0050e	83 7a 2c 00	 cmp	 DWORD PTR [edx+44], 0
  00512	74 1c		 je	 SHORT $LN47@deflate
  00514	3b c3		 cmp	 eax, ebx
  00516	76 18		 jbe	 SHORT $LN47@deflate
  00518	8b 4f 30	 mov	 ecx, DWORD PTR [edi+48]
  0051b	2b c3		 sub	 eax, ebx
  0051d	50		 push	 eax
  0051e	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00521	03 c3		 add	 eax, ebx
  00523	50		 push	 eax
  00524	51		 push	 ecx
  00525	e8 00 00 00 00	 call	 _crc32
  0052a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0052d	89 47 30	 mov	 DWORD PTR [edi+48], eax
$LN47@deflate:

; 934  :                     flush_pending(strm);

  00530	e8 00 00 00 00	 call	 _flush_pending

; 935  :                     if (s->pending != 0) {

  00535	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00538	85 c0		 test	 eax, eax
  0053a	0f 85 41 fb ff
	ff		 jne	 $LN131@deflate

; 936  :                         s->last_flush = -1;
; 937  :                         return Z_OK;
; 938  :                     }
; 939  :                     beg = 0;

  00540	33 db		 xor	 ebx, ebx
$LN49@deflate:

; 940  :                 }
; 941  :                 val = s->gzhead->name[s->gzindex++];

  00542	8b 4e 20	 mov	 ecx, DWORD PTR [esi+32]
  00545	8b 56 1c	 mov	 edx, DWORD PTR [esi+28]
  00548	8b 52 1c	 mov	 edx, DWORD PTR [edx+28]
  0054b	0f b6 14 0a	 movzx	 edx, BYTE PTR [edx+ecx]
  0054f	41		 inc	 ecx
  00550	89 4e 20	 mov	 DWORD PTR [esi+32], ecx

; 942  :                 put_byte(s, val);

  00553	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00556	88 14 08	 mov	 BYTE PTR [eax+ecx], dl
  00559	ff 46 14	 inc	 DWORD PTR [esi+20]
  0055c	8b 46 14	 mov	 eax, DWORD PTR [esi+20]

; 943  :             } while (val != 0);

  0055f	85 d2		 test	 edx, edx
  00561	75 a0		 jne	 SHORT $LL52@deflate

; 944  :             HCRC_UPDATE(beg);

  00563	8b 56 1c	 mov	 edx, DWORD PTR [esi+28]
  00566	83 7a 2c 00	 cmp	 DWORD PTR [edx+44], 0
  0056a	74 1c		 je	 SHORT $LN42@deflate
  0056c	3b c3		 cmp	 eax, ebx
  0056e	76 18		 jbe	 SHORT $LN42@deflate
  00570	8b 4f 30	 mov	 ecx, DWORD PTR [edi+48]
  00573	2b c3		 sub	 eax, ebx
  00575	50		 push	 eax
  00576	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00579	03 c3		 add	 eax, ebx
  0057b	50		 push	 eax
  0057c	51		 push	 ecx
  0057d	e8 00 00 00 00	 call	 _crc32
  00582	83 c4 0c	 add	 esp, 12			; 0000000cH
  00585	89 47 30	 mov	 DWORD PTR [edi+48], eax
$LN42@deflate:

; 945  :             s->gzindex = 0;

  00588	c7 46 20 00 00
	00 00		 mov	 DWORD PTR [esi+32], 0
  0058f	bb 01 00 00 00	 mov	 ebx, 1
$LN53@deflate:

; 946  :         }
; 947  :         s->status = COMMENT_STATE;

  00594	c7 46 04 5b 00
	00 00		 mov	 DWORD PTR [esi+4], 91	; 0000005bH
$LN54@deflate:

; 948  :     }
; 949  :     if (s->status == COMMENT_STATE) {

  0059b	83 7e 04 5b	 cmp	 DWORD PTR [esi+4], 91	; 0000005bH
  0059f	0f 85 a1 00 00
	00		 jne	 $LN39@deflate

; 950  :         if (s->gzhead->comment != Z_NULL) {

  005a5	8b 56 1c	 mov	 edx, DWORD PTR [esi+28]
  005a8	83 7a 24 00	 cmp	 DWORD PTR [edx+36], 0
  005ac	0f 84 8d 00 00
	00		 je	 $LN26@deflate

; 951  :             ulg beg = s->pending;   /* start of bytes to update crc */

  005b2	8b 5e 14	 mov	 ebx, DWORD PTR [esi+20]
$LL37@deflate:

; 952  :             int val;
; 953  :             do {
; 954  :                 if (s->pending == s->pending_buf_size) {

  005b5	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  005b8	3b 46 0c	 cmp	 eax, DWORD PTR [esi+12]
  005bb	75 37		 jne	 SHORT $LN34@deflate

; 955  :                     HCRC_UPDATE(beg);

  005bd	8b 4e 1c	 mov	 ecx, DWORD PTR [esi+28]
  005c0	83 79 2c 00	 cmp	 DWORD PTR [ecx+44], 0
  005c4	74 1c		 je	 SHORT $LN32@deflate
  005c6	3b c3		 cmp	 eax, ebx
  005c8	76 18		 jbe	 SHORT $LN32@deflate
  005ca	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  005cd	2b c3		 sub	 eax, ebx
  005cf	50		 push	 eax
  005d0	8b 47 30	 mov	 eax, DWORD PTR [edi+48]
  005d3	03 d3		 add	 edx, ebx
  005d5	52		 push	 edx
  005d6	50		 push	 eax
  005d7	e8 00 00 00 00	 call	 _crc32
  005dc	83 c4 0c	 add	 esp, 12			; 0000000cH
  005df	89 47 30	 mov	 DWORD PTR [edi+48], eax
$LN32@deflate:

; 956  :                     flush_pending(strm);

  005e2	e8 00 00 00 00	 call	 _flush_pending

; 957  :                     if (s->pending != 0) {

  005e7	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  005ea	85 c0		 test	 eax, eax
  005ec	0f 85 8f fa ff
	ff		 jne	 $LN131@deflate

; 958  :                         s->last_flush = -1;
; 959  :                         return Z_OK;
; 960  :                     }
; 961  :                     beg = 0;

  005f2	33 db		 xor	 ebx, ebx
$LN34@deflate:

; 962  :                 }
; 963  :                 val = s->gzhead->comment[s->gzindex++];

  005f4	8b 4e 20	 mov	 ecx, DWORD PTR [esi+32]
  005f7	8b 56 1c	 mov	 edx, DWORD PTR [esi+28]
  005fa	8b 52 24	 mov	 edx, DWORD PTR [edx+36]
  005fd	0f b6 14 0a	 movzx	 edx, BYTE PTR [edx+ecx]
  00601	41		 inc	 ecx
  00602	89 4e 20	 mov	 DWORD PTR [esi+32], ecx

; 964  :                 put_byte(s, val);

  00605	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00608	88 14 08	 mov	 BYTE PTR [eax+ecx], dl
  0060b	ff 46 14	 inc	 DWORD PTR [esi+20]
  0060e	8b 46 14	 mov	 eax, DWORD PTR [esi+20]

; 965  :             } while (val != 0);

  00611	85 d2		 test	 edx, edx
  00613	75 a0		 jne	 SHORT $LL37@deflate

; 966  :             HCRC_UPDATE(beg);

  00615	8b 56 1c	 mov	 edx, DWORD PTR [esi+28]
  00618	83 7a 2c 00	 cmp	 DWORD PTR [edx+44], 0
  0061c	74 1c		 je	 SHORT $LN27@deflate
  0061e	3b c3		 cmp	 eax, ebx
  00620	76 18		 jbe	 SHORT $LN27@deflate
  00622	8b 4f 30	 mov	 ecx, DWORD PTR [edi+48]
  00625	2b c3		 sub	 eax, ebx
  00627	50		 push	 eax
  00628	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0062b	03 c3		 add	 eax, ebx
  0062d	50		 push	 eax
  0062e	51		 push	 ecx
  0062f	e8 00 00 00 00	 call	 _crc32
  00634	83 c4 0c	 add	 esp, 12			; 0000000cH
  00637	89 47 30	 mov	 DWORD PTR [edi+48], eax
$LN27@deflate:
  0063a	bb 01 00 00 00	 mov	 ebx, 1
$LN26@deflate:

; 967  :         }
; 968  :         s->status = HCRC_STATE;

  0063f	c7 46 04 67 00
	00 00		 mov	 DWORD PTR [esi+4], 103	; 00000067H
$LN39@deflate:

; 969  :     }
; 970  :     if (s->status == HCRC_STATE) {

  00646	83 7e 04 67	 cmp	 DWORD PTR [esi+4], 103	; 00000067H
  0064a	75 68		 jne	 SHORT $LN20@deflate

; 971  :         if (s->gzhead->hcrc) {

  0064c	8b 56 1c	 mov	 edx, DWORD PTR [esi+28]
  0064f	83 7a 2c 00	 cmp	 DWORD PTR [edx+44], 0
  00653	74 49		 je	 SHORT $LN23@deflate

; 972  :             if (s->pending + 2 > s->pending_buf_size) {

  00655	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00658	8d 48 02	 lea	 ecx, DWORD PTR [eax+2]
  0065b	3b 4e 0c	 cmp	 ecx, DWORD PTR [esi+12]
  0065e	76 10		 jbe	 SHORT $LN21@deflate

; 973  :                 flush_pending(strm);

  00660	e8 00 00 00 00	 call	 _flush_pending

; 974  :                 if (s->pending != 0) {

  00665	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00668	85 c0		 test	 eax, eax

; 975  :                     s->last_flush = -1;
; 976  :                     return Z_OK;

  0066a	0f 85 11 fa ff
	ff		 jne	 $LN131@deflate
$LN21@deflate:

; 977  :                 }
; 978  :             }
; 979  :             put_byte(s, (Byte)(strm->adler & 0xff));

  00670	0f b6 4f 30	 movzx	 ecx, BYTE PTR [edi+48]
  00674	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  00677	88 0c 10	 mov	 BYTE PTR [eax+edx], cl
  0067a	01 5e 14	 add	 DWORD PTR [esi+20], ebx

; 980  :             put_byte(s, (Byte)((strm->adler >> 8) & 0xff));

  0067d	0f b6 4f 31	 movzx	 ecx, BYTE PTR [edi+49]
  00681	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00684	8b 56 08	 mov	 edx, DWORD PTR [esi+8]

; 981  :             strm->adler = crc32(0L, Z_NULL, 0);

  00687	6a 00		 push	 0
  00689	6a 00		 push	 0
  0068b	88 0c 10	 mov	 BYTE PTR [eax+edx], cl
  0068e	01 5e 14	 add	 DWORD PTR [esi+20], ebx
  00691	6a 00		 push	 0
  00693	e8 00 00 00 00	 call	 _crc32
  00698	83 c4 0c	 add	 esp, 12			; 0000000cH
  0069b	89 47 30	 mov	 DWORD PTR [edi+48], eax
$LN23@deflate:

; 982  :         }
; 983  :         s->status = BUSY_STATE;

  0069e	c7 46 04 71 00
	00 00		 mov	 DWORD PTR [esi+4], 113	; 00000071H

; 984  : 
; 985  :         /* Compression must start with an empty pending buffer */
; 986  :         flush_pending(strm);

  006a5	e8 00 00 00 00	 call	 _flush_pending

; 987  :         if (s->pending != 0) {

  006aa	83 7e 14 00	 cmp	 DWORD PTR [esi+20], 0

; 988  :             s->last_flush = -1;
; 989  :             return Z_OK;

  006ae	0f 85 cd f9 ff
	ff		 jne	 $LN131@deflate
$LN20@deflate:

; 990  :         }
; 991  :     }
; 992  : #endif
; 993  : 
; 994  :     /* Start a new block or continue the current one.
; 995  :      */
; 996  :     if (strm->avail_in != 0 || s->lookahead != 0 ||
; 997  :         (flush != Z_NO_FLUSH && s->status != FINISH_STATE)) {

  006b4	83 7f 04 00	 cmp	 DWORD PTR [edi+4], 0
  006b8	75 1d		 jne	 SHORT $LN18@deflate
  006ba	83 7e 74 00	 cmp	 DWORD PTR [esi+116], 0
  006be	75 17		 jne	 SHORT $LN18@deflate
  006c0	83 7d 0c 00	 cmp	 DWORD PTR _flush$[ebp], 0
  006c4	0f 84 f8 00 00
	00		 je	 $LN6@deflate
  006ca	81 7e 04 9a 02
	00 00		 cmp	 DWORD PTR [esi+4], 666	; 0000029aH
  006d1	0f 84 eb 00 00
	00		 je	 $LN6@deflate
$LN18@deflate:

; 998  :         block_state bstate;
; 999  : 
; 1000 :         bstate = s->level == 0 ? deflate_stored(s, flush) :
; 1001 :                  s->strategy == Z_HUFFMAN_ONLY ? deflate_huff(s, flush) :
; 1002 :                  s->strategy == Z_RLE ? deflate_rle(s, flush) :
; 1003 :                  (*(configuration_table[s->level].func))(s, flush);

  006d7	8b 86 84 00 00
	00		 mov	 eax, DWORD PTR [esi+132]
  006dd	85 c0		 test	 eax, eax
  006df	75 0c		 jne	 SHORT $LN110@deflate
  006e1	8b 55 0c	 mov	 edx, DWORD PTR _flush$[ebp]
  006e4	52		 push	 edx
  006e5	56		 push	 esi
  006e6	e8 00 00 00 00	 call	 _deflate_stored
  006eb	eb 3d		 jmp	 SHORT $LN130@deflate
$LN110@deflate:
  006ed	8b 8e 88 00 00
	00		 mov	 ecx, DWORD PTR [esi+136]
  006f3	83 f9 02	 cmp	 ecx, 2
  006f6	75 0e		 jne	 SHORT $LN108@deflate
  006f8	8b 45 0c	 mov	 eax, DWORD PTR _flush$[ebp]
  006fb	50		 push	 eax
  006fc	e8 00 00 00 00	 call	 _deflate_huff
  00701	83 c4 04	 add	 esp, 4
  00704	eb 27		 jmp	 SHORT $LN107@deflate
$LN108@deflate:
  00706	83 f9 03	 cmp	 ecx, 3
  00709	75 0e		 jne	 SHORT $LN106@deflate
  0070b	8b 4d 0c	 mov	 ecx, DWORD PTR _flush$[ebp]
  0070e	51		 push	 ecx
  0070f	e8 00 00 00 00	 call	 _deflate_rle
  00714	83 c4 04	 add	 esp, 4
  00717	eb 14		 jmp	 SHORT $LN107@deflate
$LN106@deflate:
  00719	8d 14 40	 lea	 edx, DWORD PTR [eax+eax*2]
  0071c	8b 45 0c	 mov	 eax, DWORD PTR _flush$[ebp]
  0071f	8b 0c 95 08 00
	00 00		 mov	 ecx, DWORD PTR _configuration_table[edx*4+8]
  00726	50		 push	 eax
  00727	56		 push	 esi
  00728	ff d1		 call	 ecx
$LN130@deflate:
  0072a	83 c4 08	 add	 esp, 8
$LN107@deflate:

; 1004 : 
; 1005 :         if (bstate == finish_started || bstate == finish_done) {

  0072d	83 f8 02	 cmp	 eax, 2
  00730	74 05		 je	 SHORT $LN16@deflate
  00732	83 f8 03	 cmp	 eax, 3
  00735	75 07		 jne	 SHORT $LN17@deflate
$LN16@deflate:

; 1006 :             s->status = FINISH_STATE;

  00737	c7 46 04 9a 02
	00 00		 mov	 DWORD PTR [esi+4], 666	; 0000029aH
$LN17@deflate:

; 1007 :         }
; 1008 :         if (bstate == need_more || bstate == finish_started) {

  0073e	85 c0		 test	 eax, eax
  00740	0f 84 5c 01 00
	00		 je	 $LN14@deflate
  00746	83 f8 02	 cmp	 eax, 2
  00749	0f 84 53 01 00
	00		 je	 $LN14@deflate

; 1010 :                 s->last_flush = -1; /* avoid BUF_ERROR next call, see above */
; 1011 :             }
; 1012 :             return Z_OK;
; 1013 :             /* If flush != Z_NO_FLUSH && avail_out == 0, the next call
; 1014 :              * of deflate should use the same flush parameter to make sure
; 1015 :              * that the flush is complete. So we don't have to output an
; 1016 :              * empty block here, this will be done at next call. This also
; 1017 :              * ensures that for a very small output buffer, we emit at most
; 1018 :              * one empty block.
; 1019 :              */
; 1020 :         }
; 1021 :         if (bstate == block_done) {

  0074f	83 f8 01	 cmp	 eax, 1
  00752	75 6e		 jne	 SHORT $LN6@deflate

; 1022 :             if (flush == Z_PARTIAL_FLUSH) {

  00754	8b 45 0c	 mov	 eax, DWORD PTR _flush$[ebp]
  00757	83 f8 01	 cmp	 eax, 1
  0075a	75 09		 jne	 SHORT $LN11@deflate

; 1023 :                 _tr_align(s);

  0075c	8b c6		 mov	 eax, esi
  0075e	e8 00 00 00 00	 call	 __tr_align
  00763	eb 4e		 jmp	 SHORT $LN123@deflate
$LN11@deflate:

; 1024 :             } else if (flush != Z_BLOCK) { /* FULL_FLUSH or SYNC_FLUSH */

  00765	83 f8 05	 cmp	 eax, 5
  00768	74 49		 je	 SHORT $LN123@deflate

; 1025 :                 _tr_stored_block(s, (char*)0, 0L, 0);

  0076a	6a 00		 push	 0
  0076c	33 c0		 xor	 eax, eax
  0076e	33 db		 xor	 ebx, ebx
  00770	e8 00 00 00 00	 call	 __tr_stored_block
  00775	83 c4 04	 add	 esp, 4

; 1026 :                 /* For a full flush, this empty block will be recognized
; 1027 :                  * as a special marker by inflate_sync().
; 1028 :                  */
; 1029 :                 if (flush == Z_FULL_FLUSH) {

  00778	83 7d 0c 03	 cmp	 DWORD PTR _flush$[ebp], 3
  0077c	75 35		 jne	 SHORT $LN123@deflate

; 1030 :                     CLEAR_HASH(s);             /* forget history */

  0077e	8b 56 4c	 mov	 edx, DWORD PTR [esi+76]
  00781	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
  00784	33 c9		 xor	 ecx, ecx
  00786	66 89 4c 50 fe	 mov	 WORD PTR [eax+edx*2-2], cx
  0078b	8b 56 4c	 mov	 edx, DWORD PTR [esi+76]
  0078e	8d 44 12 fe	 lea	 eax, DWORD PTR [edx+edx-2]
  00792	50		 push	 eax
  00793	51		 push	 ecx
  00794	8b 4e 44	 mov	 ecx, DWORD PTR [esi+68]
  00797	51		 push	 ecx
  00798	e8 00 00 00 00	 call	 _memset
  0079d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1031 :                     if (s->lookahead == 0) {

  007a0	39 5e 74	 cmp	 DWORD PTR [esi+116], ebx
  007a3	75 0e		 jne	 SHORT $LN123@deflate

; 1032 :                         s->strstart = 0;

  007a5	33 c0		 xor	 eax, eax
  007a7	89 46 6c	 mov	 DWORD PTR [esi+108], eax

; 1033 :                         s->block_start = 0L;

  007aa	89 46 5c	 mov	 DWORD PTR [esi+92], eax

; 1034 :                         s->insert = 0;

  007ad	89 86 b4 16 00
	00		 mov	 DWORD PTR [esi+5812], eax
$LN123@deflate:

; 1035 :                     }
; 1036 :                 }
; 1037 :             }
; 1038 :             flush_pending(strm);

  007b3	e8 00 00 00 00	 call	 _flush_pending

; 1039 :             if (strm->avail_out == 0) {

  007b8	83 7f 10 00	 cmp	 DWORD PTR [edi+16], 0

; 1040 :               s->last_flush = -1; /* avoid BUF_ERROR at next call, see above */
; 1041 :               return Z_OK;

  007bc	0f 84 bf f8 ff
	ff		 je	 $LN131@deflate
$LN6@deflate:

; 1042 :             }
; 1043 :         }
; 1044 :     }
; 1045 : 
; 1046 :     if (flush != Z_FINISH) return Z_OK;

  007c2	83 7d 0c 04	 cmp	 DWORD PTR _flush$[ebp], 4
  007c6	0f 85 bc f8 ff
	ff		 jne	 $LN13@deflate

; 1047 :     if (s->wrap <= 0) return Z_STREAM_END;

  007cc	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  007cf	85 c0		 test	 eax, eax
  007d1	7f 0c		 jg	 SHORT $LN4@deflate
  007d3	5b		 pop	 ebx
  007d4	5e		 pop	 esi
  007d5	b8 01 00 00 00	 mov	 eax, 1
  007da	5f		 pop	 edi

; 1073 : }

  007db	8b e5		 mov	 esp, ebp
  007dd	5d		 pop	 ebp
  007de	c3		 ret	 0
$LN4@deflate:

; 1048 : 
; 1049 :     /* Write the trailer */
; 1050 : #ifdef GZIP
; 1051 :     if (s->wrap == 2) {

  007df	83 f8 02	 cmp	 eax, 2
  007e2	0f 85 86 00 00
	00		 jne	 $LN3@deflate

; 1052 :         put_byte(s, (Byte)(strm->adler & 0xff));

  007e8	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  007eb	8a 4f 30	 mov	 cl, BYTE PTR [edi+48]
  007ee	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  007f1	88 0c 02	 mov	 BYTE PTR [edx+eax], cl

; 1053 :         put_byte(s, (Byte)((strm->adler >> 8) & 0xff));

  007f4	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  007f7	b8 01 00 00 00	 mov	 eax, 1
  007fc	01 46 14	 add	 DWORD PTR [esi+20], eax
  007ff	0f b6 5f 31	 movzx	 ebx, BYTE PTR [edi+49]
  00803	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00806	88 1c 11	 mov	 BYTE PTR [ecx+edx], bl
  00809	01 46 14	 add	 DWORD PTR [esi+20], eax

; 1054 :         put_byte(s, (Byte)((strm->adler >> 16) & 0xff));

  0080c	0f b6 5f 32	 movzx	 ebx, BYTE PTR [edi+50]
  00810	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00813	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  00816	88 1c 11	 mov	 BYTE PTR [ecx+edx], bl
  00819	01 46 14	 add	 DWORD PTR [esi+20], eax

; 1055 :         put_byte(s, (Byte)((strm->adler >> 24) & 0xff));

  0081c	0f b6 5f 33	 movzx	 ebx, BYTE PTR [edi+51]
  00820	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00823	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  00826	88 1c 11	 mov	 BYTE PTR [ecx+edx], bl
  00829	01 46 14	 add	 DWORD PTR [esi+20], eax

; 1056 :         put_byte(s, (Byte)(strm->total_in & 0xff));

  0082c	0f b6 5f 08	 movzx	 ebx, BYTE PTR [edi+8]
  00830	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00833	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  00836	88 1c 11	 mov	 BYTE PTR [ecx+edx], bl
  00839	01 46 14	 add	 DWORD PTR [esi+20], eax

; 1057 :         put_byte(s, (Byte)((strm->total_in >> 8) & 0xff));

  0083c	0f b6 5f 09	 movzx	 ebx, BYTE PTR [edi+9]
  00840	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00843	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  00846	88 1c 11	 mov	 BYTE PTR [ecx+edx], bl
  00849	01 46 14	 add	 DWORD PTR [esi+20], eax

; 1058 :         put_byte(s, (Byte)((strm->total_in >> 16) & 0xff));

  0084c	0f b6 5f 0a	 movzx	 ebx, BYTE PTR [edi+10]
  00850	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00853	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  00856	88 1c 11	 mov	 BYTE PTR [ecx+edx], bl
  00859	01 46 14	 add	 DWORD PTR [esi+20], eax

; 1059 :         put_byte(s, (Byte)((strm->total_in >> 24) & 0xff));

  0085c	0f b6 5f 0b	 movzx	 ebx, BYTE PTR [edi+11]
  00860	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00863	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  00866	88 1c 11	 mov	 BYTE PTR [ecx+edx], bl
  00869	01 46 14	 add	 DWORD PTR [esi+20], eax

; 1060 :     }
; 1061 :     else

  0086c	eb 14		 jmp	 SHORT $LN2@deflate
$LN3@deflate:

; 1062 : #endif
; 1063 :     {
; 1064 :         putShortMSB(s, (uInt)(strm->adler >> 16));

  0086e	0f b7 4f 32	 movzx	 ecx, WORD PTR [edi+50]
  00872	8b c6		 mov	 eax, esi
  00874	e8 00 00 00 00	 call	 _putShortMSB

; 1065 :         putShortMSB(s, (uInt)(strm->adler & 0xffff));

  00879	0f b7 4f 30	 movzx	 ecx, WORD PTR [edi+48]
  0087d	e8 00 00 00 00	 call	 _putShortMSB
$LN2@deflate:

; 1066 :     }
; 1067 :     flush_pending(strm);

  00882	e8 00 00 00 00	 call	 _flush_pending

; 1068 :     /* If avail_out is zero, the application will call deflate again
; 1069 :      * to flush the rest.
; 1070 :      */
; 1071 :     if (s->wrap > 0) s->wrap = -s->wrap; /* write the trailer only once! */

  00887	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  0088a	85 c0		 test	 eax, eax
  0088c	7e 05		 jle	 SHORT $LN1@deflate
  0088e	f7 d8		 neg	 eax
  00890	89 46 18	 mov	 DWORD PTR [esi+24], eax
$LN1@deflate:

; 1072 :     return s->pending != 0 ? Z_OK : Z_STREAM_END;

  00893	33 c0		 xor	 eax, eax
  00895	39 46 14	 cmp	 DWORD PTR [esi+20], eax
  00898	5b		 pop	 ebx
  00899	5e		 pop	 esi
  0089a	0f 94 c0	 sete	 al
  0089d	5f		 pop	 edi

; 1073 : }

  0089e	8b e5		 mov	 esp, ebp
  008a0	5d		 pop	 ebp
  008a1	c3		 ret	 0
$LN14@deflate:

; 1009 :             if (strm->avail_out == 0) {

  008a2	83 7f 10 00	 cmp	 DWORD PTR [edi+16], 0
  008a6	0f 85 dc f7 ff
	ff		 jne	 $LN13@deflate

; 870  :                 s->last_flush = -1;

  008ac	5b		 pop	 ebx
  008ad	c7 46 28 ff ff
	ff ff		 mov	 DWORD PTR [esi+40], -1
  008b4	5e		 pop	 esi

; 871  :                 return Z_OK;

  008b5	33 c0		 xor	 eax, eax
  008b7	5f		 pop	 edi

; 1073 : }

  008b8	8b e5		 mov	 esp, ebp
  008ba	5d		 pop	 ebp
  008bb	c3		 ret	 0
$LN92@deflate:
  008bc	5e		 pop	 esi

; 778  :         ERR_RETURN(strm, Z_STREAM_ERROR);

  008bd	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], OFFSET ??_C@_0N@MKKNPMJD@stream?5error?$AA@
  008c4	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  008c9	5f		 pop	 edi

; 1073 : }

  008ca	8b e5		 mov	 esp, ebp
  008cc	5d		 pop	 ebp
  008cd	c3		 ret	 0
$LN94@deflate:

; 771  :         return Z_STREAM_ERROR;

  008ce	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  008d3	5f		 pop	 edi

; 1073 : }

  008d4	8b e5		 mov	 esp, ebp
  008d6	5d		 pop	 ebp
  008d7	c3		 ret	 0
_deflate ENDP
_TEXT	ENDS
PUBLIC	_deflateParams
; Function compile flags: /Ogtp
;	COMDAT _deflateParams
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_level$ = 12						; size = 4
_strategy$ = 16						; size = 4
_deflateParams PROC					; COMDAT

; 572  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 573  :     deflate_state *s;
; 574  :     compress_func func;
; 575  : 
; 576  :     if (deflateStateCheck(strm)) return Z_STREAM_ERROR;

  00004	8b 5d 08	 mov	 ebx, DWORD PTR _strm$[ebp]
  00007	8b c3		 mov	 eax, ebx
  00009	e8 00 00 00 00	 call	 _deflateStateCheck
  0000e	85 c0		 test	 eax, eax
  00010	74 08		 je	 SHORT $LN12@deflatePar
  00012	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  00017	5b		 pop	 ebx

; 614  : }

  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
$LN12@deflatePar:
  0001a	56		 push	 esi

; 577  :     s = strm->state;
; 578  : 
; 579  : #ifdef FASTEST
; 580  :     if (level != 0) level = 1;
; 581  : #else
; 582  :     if (level == Z_DEFAULT_COMPRESSION) level = 6;

  0001b	8b 75 0c	 mov	 esi, DWORD PTR _level$[ebp]
  0001e	57		 push	 edi
  0001f	8b 7b 1c	 mov	 edi, DWORD PTR [ebx+28]
  00022	83 fe ff	 cmp	 esi, -1
  00025	75 07		 jne	 SHORT $LN11@deflatePar
  00027	be 06 00 00 00	 mov	 esi, 6

; 583  : #endif
; 584  :     if (level < 0 || level > 9 || strategy < 0 || strategy > Z_FIXED) {

  0002c	eb 11		 jmp	 SHORT $LN16@deflatePar
$LN11@deflatePar:
  0002e	85 f6		 test	 esi, esi
  00030	0f 88 0a 01 00
	00		 js	 $LN9@deflatePar
  00036	83 fe 09	 cmp	 esi, 9
  00039	0f 8f 01 01 00
	00		 jg	 $LN9@deflatePar
$LN16@deflatePar:
  0003f	8b 45 10	 mov	 eax, DWORD PTR _strategy$[ebp]
  00042	83 f8 04	 cmp	 eax, 4
  00045	0f 87 f5 00 00
	00		 ja	 $LN9@deflatePar

; 588  : 
; 589  :     if ((strategy != s->strategy || func != configuration_table[level].func) &&
; 590  :         s->high_water) {

  0004b	3b 87 88 00 00
	00		 cmp	 eax, DWORD PTR [edi+136]
  00051	75 1c		 jne	 SHORT $LN7@deflatePar

; 586  :     }
; 587  :     func = configuration_table[s->level].func;

  00053	8b 87 84 00 00
	00		 mov	 eax, DWORD PTR [edi+132]
  00059	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]

; 588  : 
; 589  :     if ((strategy != s->strategy || func != configuration_table[level].func) &&
; 590  :         s->high_water) {

  0005c	8b 14 85 08 00
	00 00		 mov	 edx, DWORD PTR _configuration_table[eax*4+8]
  00063	8d 0c 76	 lea	 ecx, DWORD PTR [esi+esi*2]
  00066	3b 14 8d 08 00
	00 00		 cmp	 edx, DWORD PTR _configuration_table[ecx*4+8]
  0006d	74 2d		 je	 SHORT $LN17@deflatePar
$LN7@deflatePar:
  0006f	83 bf c0 16 00
	00 00		 cmp	 DWORD PTR [edi+5824], 0
  00076	74 24		 je	 SHORT $LN17@deflatePar

; 591  :         /* Flush the last buffer: */
; 592  :         int err = deflate(strm, Z_BLOCK);

  00078	6a 05		 push	 5
  0007a	53		 push	 ebx
  0007b	e8 00 00 00 00	 call	 _deflate
  00080	83 c4 08	 add	 esp, 8

; 593  :         if (err == Z_STREAM_ERROR)

  00083	83 f8 fe	 cmp	 eax, -2			; fffffffeH

; 594  :             return err;

  00086	0f 84 b4 00 00
	00		 je	 $LN9@deflatePar

; 595  :         if (strm->avail_out == 0)

  0008c	83 7b 10 00	 cmp	 DWORD PTR [ebx+16], 0
  00090	75 0a		 jne	 SHORT $LN17@deflatePar

; 596  :             return Z_BUF_ERROR;

  00092	5f		 pop	 edi
  00093	5e		 pop	 esi
  00094	b8 fb ff ff ff	 mov	 eax, -5			; fffffffbH
  00099	5b		 pop	 ebx

; 614  : }

  0009a	5d		 pop	 ebp
  0009b	c3		 ret	 0
$LN17@deflatePar:

; 597  :     }
; 598  :     if (s->level != level) {

  0009c	8b 87 84 00 00
	00		 mov	 eax, DWORD PTR [edi+132]
  000a2	3b c6		 cmp	 eax, esi
  000a4	0f 84 86 00 00
	00		 je	 $LN4@deflatePar

; 599  :         if (s->level == 0 && s->matches != 0) {

  000aa	85 c0		 test	 eax, eax
  000ac	75 43		 jne	 SHORT $LN3@deflatePar
  000ae	8b 87 b0 16 00
	00		 mov	 eax, DWORD PTR [edi+5808]
  000b4	85 c0		 test	 eax, eax
  000b6	74 39		 je	 SHORT $LN3@deflatePar

; 600  :             if (s->matches == 1)

  000b8	83 f8 01	 cmp	 eax, 1
  000bb	75 07		 jne	 SHORT $LN2@deflatePar

; 601  :                 slide_hash(s);

  000bd	e8 00 00 00 00	 call	 _slide_hash

; 602  :             else

  000c2	eb 0d		 jmp	 SHORT $LN1@deflatePar
$LN2@deflatePar:

; 603  :                 CLEAR_HASH(s);

  000c4	8b 47 4c	 mov	 eax, DWORD PTR [edi+76]
  000c7	8b 4f 44	 mov	 ecx, DWORD PTR [edi+68]
  000ca	33 d2		 xor	 edx, edx
  000cc	66 89 54 41 fe	 mov	 WORD PTR [ecx+eax*2-2], dx
$LN1@deflatePar:
  000d1	8b 47 4c	 mov	 eax, DWORD PTR [edi+76]
  000d4	8b 57 44	 mov	 edx, DWORD PTR [edi+68]
  000d7	8d 4c 00 fe	 lea	 ecx, DWORD PTR [eax+eax-2]
  000db	51		 push	 ecx
  000dc	6a 00		 push	 0
  000de	52		 push	 edx
  000df	e8 00 00 00 00	 call	 _memset
  000e4	83 c4 0c	 add	 esp, 12			; 0000000cH

; 604  :             s->matches = 0;

  000e7	c7 87 b0 16 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+5808], 0
$LN3@deflatePar:

; 605  :         }
; 606  :         s->level = level;
; 607  :         s->max_lazy_match   = configuration_table[level].max_lazy;

  000f1	8d 04 76	 lea	 eax, DWORD PTR [esi+esi*2]
  000f4	89 b7 84 00 00
	00		 mov	 DWORD PTR [edi+132], esi
  000fa	03 c0		 add	 eax, eax
  000fc	0f b7 8c 00 02
	00 00 00	 movzx	 ecx, WORD PTR _configuration_table[eax+eax+2]
  00104	03 c0		 add	 eax, eax
  00106	89 8f 80 00 00
	00		 mov	 DWORD PTR [edi+128], ecx

; 608  :         s->good_match       = configuration_table[level].good_length;

  0010c	0f b7 90 00 00
	00 00		 movzx	 edx, WORD PTR _configuration_table[eax]
  00113	89 97 8c 00 00
	00		 mov	 DWORD PTR [edi+140], edx

; 609  :         s->nice_match       = configuration_table[level].nice_length;

  00119	0f b7 88 04 00
	00 00		 movzx	 ecx, WORD PTR _configuration_table[eax+4]
  00120	89 8f 90 00 00
	00		 mov	 DWORD PTR [edi+144], ecx

; 610  :         s->max_chain_length = configuration_table[level].max_chain;

  00126	0f b7 90 06 00
	00 00		 movzx	 edx, WORD PTR _configuration_table[eax+6]
  0012d	89 57 7c	 mov	 DWORD PTR [edi+124], edx
$LN4@deflatePar:

; 611  :     }
; 612  :     s->strategy = strategy;

  00130	8b 45 10	 mov	 eax, DWORD PTR _strategy$[ebp]
  00133	89 87 88 00 00
	00		 mov	 DWORD PTR [edi+136], eax
  00139	5f		 pop	 edi
  0013a	5e		 pop	 esi

; 613  :     return Z_OK;

  0013b	33 c0		 xor	 eax, eax
  0013d	5b		 pop	 ebx

; 614  : }

  0013e	5d		 pop	 ebp
  0013f	c3		 ret	 0
$LN9@deflatePar:
  00140	5f		 pop	 edi
  00141	5e		 pop	 esi

; 585  :         return Z_STREAM_ERROR;

  00142	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  00147	5b		 pop	 ebx

; 614  : }

  00148	5d		 pop	 ebp
  00149	c3		 ret	 0
_deflateParams ENDP
END
