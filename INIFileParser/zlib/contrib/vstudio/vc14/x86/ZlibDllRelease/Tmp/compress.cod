; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	C:\Users\theclashingfritz\source\repos\INIFileParser\zlib\compress.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	??_C@_06CJNJFBNP@1?42?411?$AA@			; `string'
;	COMDAT ??_C@_06CJNJFBNP@1?42?411?$AA@
CONST	SEGMENT
??_C@_06CJNJFBNP@1?42?411?$AA@ DB '1.2.11', 00H		; `string'
PUBLIC	_compressBound
; Function compile flags: /Ogtp
; File c:\users\theclashingfritz\source\repos\inifileparser\zlib\compress.c
;	COMDAT _compressBound
_TEXT	SEGMENT
_sourceLen$ = 8						; size = 4
_compressBound PROC					; COMDAT

; 83   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 84   :     return sourceLen + (sourceLen >> 12) + (sourceLen >> 14) +
; 85   :            (sourceLen >> 25) + 13;

  00003	8b 45 08	 mov	 eax, DWORD PTR _sourceLen$[ebp]
  00006	8b d0		 mov	 edx, eax
  00008	8b c8		 mov	 ecx, eax
  0000a	c1 ea 0e	 shr	 edx, 14			; 0000000eH
  0000d	03 d0		 add	 edx, eax
  0000f	c1 e9 19	 shr	 ecx, 25			; 00000019H
  00012	c1 e8 0c	 shr	 eax, 12			; 0000000cH
  00015	03 d1		 add	 edx, ecx
  00017	8d 44 10 0d	 lea	 eax, DWORD PTR [eax+edx+13]

; 86   : }

  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
_compressBound ENDP
PUBLIC	_compress2
; Function compile flags: /Ogtp
;	COMDAT _compress2
_TEXT	SEGMENT
_stream$ = -56						; size = 56
_dest$ = 8						; size = 4
_destLen$ = 12						; size = 4
_source$ = 16						; size = 4
_sourceLen$ = 20					; size = 4
_level$ = 24						; size = 4
_compress2 PROC						; COMDAT

; 28   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	83 ec 3c	 sub	 esp, 60			; 0000003cH

; 29   :     z_stream stream;
; 30   :     int err;
; 31   :     const uInt max = (uInt)-1;
; 32   :     uLong left;
; 33   : 
; 34   :     left = *destLen;

  00009	8b 45 0c	 mov	 eax, DWORD PTR _destLen$[ebp]
  0000c	53		 push	 ebx
  0000d	8b 18		 mov	 ebx, DWORD PTR [eax]
  0000f	56		 push	 esi
  00010	57		 push	 edi

; 35   :     *destLen = 0;

  00011	33 f6		 xor	 esi, esi

; 36   : 
; 37   :     stream.zalloc = (alloc_func)0;
; 38   :     stream.zfree = (free_func)0;
; 39   :     stream.opaque = (voidpf)0;
; 40   : 
; 41   :     err = deflateInit(&stream, level);

  00013	6a 38		 push	 56			; 00000038H
  00015	89 30		 mov	 DWORD PTR [eax], esi
  00017	8b 45 18	 mov	 eax, DWORD PTR _level$[ebp]
  0001a	68 00 00 00 00	 push	 OFFSET ??_C@_06CJNJFBNP@1?42?411?$AA@
  0001f	50		 push	 eax
  00020	8d 4c 24 1c	 lea	 ecx, DWORD PTR _stream$[esp+84]
  00024	51		 push	 ecx
  00025	89 74 24 40	 mov	 DWORD PTR _stream$[esp+120], esi
  00029	89 74 24 44	 mov	 DWORD PTR _stream$[esp+124], esi
  0002d	89 74 24 48	 mov	 DWORD PTR _stream$[esp+128], esi
  00031	e8 00 00 00 00	 call	 _deflateInit_
  00036	83 c4 10	 add	 esp, 16			; 00000010H

; 42   :     if (err != Z_OK) return err;

  00039	3b c6		 cmp	 eax, esi
  0003b	0f 85 90 00 00
	00		 jne	 $LN7@compress2

; 43   : 
; 44   :     stream.next_out = dest;

  00041	8b 55 08	 mov	 edx, DWORD PTR _dest$[ebp]

; 45   :     stream.avail_out = 0;
; 46   :     stream.next_in = (z_const Bytef *)source;

  00044	8b 45 10	 mov	 eax, DWORD PTR _source$[ebp]

; 47   :     stream.avail_in = 0;

  00047	8b 7d 14	 mov	 edi, DWORD PTR _sourceLen$[ebp]
  0004a	89 54 24 1c	 mov	 DWORD PTR _stream$[esp+84], edx
  0004e	89 74 24 20	 mov	 DWORD PTR _stream$[esp+88], esi
  00052	89 44 24 10	 mov	 DWORD PTR _stream$[esp+72], eax
  00056	89 74 24 14	 mov	 DWORD PTR _stream$[esp+76], esi
  0005a	eb 06		 jmp	 SHORT $LN5@compress2
  0005c	8d 64 24 00	 npad	 4
$LL14@compress2:
  00060	33 f6		 xor	 esi, esi
$LN5@compress2:

; 48   : 
; 49   :     do {
; 50   :         if (stream.avail_out == 0) {

  00062	39 74 24 20	 cmp	 DWORD PTR _stream$[esp+88], esi
  00066	75 12		 jne	 SHORT $LN2@compress2

; 51   :             stream.avail_out = left > (uLong)max ? max : (uInt)left;

  00068	83 fb ff	 cmp	 ebx, -1
  0006b	76 05		 jbe	 SHORT $LN9@compress2
  0006d	83 c8 ff	 or	 eax, -1
  00070	eb 02		 jmp	 SHORT $LN16@compress2
$LN9@compress2:
  00072	8b c3		 mov	 eax, ebx
$LN16@compress2:
  00074	89 44 24 20	 mov	 DWORD PTR _stream$[esp+88], eax

; 52   :             left -= stream.avail_out;

  00078	2b d8		 sub	 ebx, eax
$LN2@compress2:

; 53   :         }
; 54   :         if (stream.avail_in == 0) {

  0007a	39 74 24 14	 cmp	 DWORD PTR _stream$[esp+76], esi
  0007e	75 12		 jne	 SHORT $LN1@compress2

; 55   :             stream.avail_in = sourceLen > (uLong)max ? max : (uInt)sourceLen;

  00080	83 ff ff	 cmp	 edi, -1
  00083	76 05		 jbe	 SHORT $LN11@compress2
  00085	83 c8 ff	 or	 eax, -1
  00088	eb 02		 jmp	 SHORT $LN17@compress2
$LN11@compress2:
  0008a	8b c7		 mov	 eax, edi
$LN17@compress2:
  0008c	89 44 24 14	 mov	 DWORD PTR _stream$[esp+76], eax

; 56   :             sourceLen -= stream.avail_in;

  00090	2b f8		 sub	 edi, eax
$LN1@compress2:

; 57   :         }
; 58   :         err = deflate(&stream, sourceLen ? Z_NO_FLUSH : Z_FINISH);

  00092	8b cf		 mov	 ecx, edi
  00094	f7 d9		 neg	 ecx
  00096	1b c9		 sbb	 ecx, ecx
  00098	83 e1 fc	 and	 ecx, -4			; fffffffcH
  0009b	83 c1 04	 add	 ecx, 4
  0009e	51		 push	 ecx
  0009f	8d 54 24 14	 lea	 edx, DWORD PTR _stream$[esp+76]
  000a3	52		 push	 edx
  000a4	e8 00 00 00 00	 call	 _deflate
  000a9	8b f0		 mov	 esi, eax
  000ab	83 c4 08	 add	 esp, 8

; 59   :     } while (err == Z_OK);

  000ae	85 f6		 test	 esi, esi
  000b0	74 ae		 je	 SHORT $LL14@compress2

; 60   : 
; 61   :     *destLen = stream.total_out;

  000b2	8b 44 24 24	 mov	 eax, DWORD PTR _stream$[esp+92]
  000b6	8b 4d 0c	 mov	 ecx, DWORD PTR _destLen$[ebp]

; 62   :     deflateEnd(&stream);

  000b9	8d 54 24 10	 lea	 edx, DWORD PTR _stream$[esp+72]
  000bd	52		 push	 edx
  000be	89 01		 mov	 DWORD PTR [ecx], eax
  000c0	e8 00 00 00 00	 call	 _deflateEnd
  000c5	83 c4 04	 add	 esp, 4

; 63   :     return err == Z_STREAM_END ? Z_OK : err;

  000c8	8d 46 ff	 lea	 eax, DWORD PTR [esi-1]
  000cb	f7 d8		 neg	 eax
  000cd	1b c0		 sbb	 eax, eax
  000cf	23 c6		 and	 eax, esi
$LN7@compress2:

; 64   : }

  000d1	5f		 pop	 edi
  000d2	5e		 pop	 esi
  000d3	5b		 pop	 ebx
  000d4	8b e5		 mov	 esp, ebp
  000d6	5d		 pop	 ebp
  000d7	c3		 ret	 0
_compress2 ENDP
PUBLIC	_compress
; Function compile flags: /Ogtp
;	COMDAT _compress
_TEXT	SEGMENT
_dest$ = 8						; size = 4
_destLen$ = 12						; size = 4
_source$ = 16						; size = 4
_sourceLen$ = 20					; size = 4
_compress PROC						; COMDAT

; 73   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 74   :     return compress2(dest, destLen, source, sourceLen, Z_DEFAULT_COMPRESSION);

  00003	8b 45 14	 mov	 eax, DWORD PTR _sourceLen$[ebp]
  00006	8b 4d 10	 mov	 ecx, DWORD PTR _source$[ebp]
  00009	8b 55 0c	 mov	 edx, DWORD PTR _destLen$[ebp]
  0000c	6a ff		 push	 -1
  0000e	50		 push	 eax
  0000f	8b 45 08	 mov	 eax, DWORD PTR _dest$[ebp]
  00012	51		 push	 ecx
  00013	52		 push	 edx
  00014	50		 push	 eax
  00015	e8 00 00 00 00	 call	 _compress2
  0001a	83 c4 14	 add	 esp, 20			; 00000014H

; 75   : }

  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
_compress ENDP
END
