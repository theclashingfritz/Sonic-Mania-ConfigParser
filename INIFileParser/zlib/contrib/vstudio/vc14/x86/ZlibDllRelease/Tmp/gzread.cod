; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	C:\Users\theclashingfritz\source\repos\INIFileParser\zlib\gzread.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	??_C@_0BH@CFIIDOJD@unexpected?5end?5of?5file?$AA@ ; `string'
PUBLIC	??_C@_0CH@CPOLIEKA@internal?5error?3?5inflate?5stream?5c@ ; `string'
PUBLIC	??_C@_0BG@HCKBMIHF@compressed?5data?5error?$AA@	; `string'
PUBLIC	??_C@_0BP@HLDABFKK@request?5does?5not?5fit?5in?5an?5int?$AA@ ; `string'
PUBLIC	??_C@_0CB@EGGJDMIK@request?5does?5not?5fit?5in?5a?5size_t@ ; `string'
PUBLIC	??_C@_0BP@IIKIGMCC@out?5of?5room?5to?5push?5characters?$AA@ ; `string'
EXTRN	_memchr:PROC
EXTRN	__errno:PROC
EXTRN	_strerror:PROC
EXTRN	_read:PROC
EXTRN	_close:PROC
;	COMDAT ??_C@_0BP@IIKIGMCC@out?5of?5room?5to?5push?5characters?$AA@
CONST	SEGMENT
??_C@_0BP@IIKIGMCC@out?5of?5room?5to?5push?5characters?$AA@ DB 'out of ro'
	DB	'om to push characters', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@EGGJDMIK@request?5does?5not?5fit?5in?5a?5size_t@
CONST	SEGMENT
??_C@_0CB@EGGJDMIK@request?5does?5not?5fit?5in?5a?5size_t@ DB 'request do'
	DB	'es not fit in a size_t', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@HLDABFKK@request?5does?5not?5fit?5in?5an?5int?$AA@
CONST	SEGMENT
??_C@_0BP@HLDABFKK@request?5does?5not?5fit?5in?5an?5int?$AA@ DB 'request '
	DB	'does not fit in an int', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@HCKBMIHF@compressed?5data?5error?$AA@
CONST	SEGMENT
??_C@_0BG@HCKBMIHF@compressed?5data?5error?$AA@ DB 'compressed data error'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@CPOLIEKA@internal?5error?3?5inflate?5stream?5c@
CONST	SEGMENT
??_C@_0CH@CPOLIEKA@internal?5error?3?5inflate?5stream?5c@ DB 'internal er'
	DB	'ror: inflate stream corrupt', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@CFIIDOJD@unexpected?5end?5of?5file?$AA@
CONST	SEGMENT
??_C@_0BH@CFIIDOJD@unexpected?5end?5of?5file?$AA@ DB 'unexpected end of f'
	DB	'ile', 00H					; `string'
PUBLIC	_gzclose_r
; Function compile flags: /Ogtp
; File c:\users\theclashingfritz\source\repos\inifileparser\zlib\gzread.c
;	COMDAT _gzclose_r
_TEXT	SEGMENT
_file$ = 8						; size = 4
_gzclose_r PROC						; COMDAT

; 629  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 630  :     int ret, err;
; 631  :     gz_statep state;
; 632  : 
; 633  :     /* get internal structure */
; 634  :     if (file == NULL)

  00004	8b 75 08	 mov	 esi, DWORD PTR _file$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	75 08		 jne	 SHORT $LN3@gzclose_r
$LN8@gzclose_r:

; 635  :         return Z_STREAM_ERROR;

  0000b	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  00010	5e		 pop	 esi

; 654  : }

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
$LN3@gzclose_r:

; 636  :     state = (gz_statep)file;
; 637  : 
; 638  :     /* check that we're reading */
; 639  :     if (state->mode != GZ_READ)

  00013	81 7e 10 4f 1c
	00 00		 cmp	 DWORD PTR [esi+16], 7247 ; 00001c4fH

; 640  :         return Z_STREAM_ERROR;

  0001a	75 ef		 jne	 SHORT $LN8@gzclose_r

; 641  : 
; 642  :     /* free memory and close file */
; 643  :     if (state->size) {

  0001c	83 7e 1c 00	 cmp	 DWORD PTR [esi+28], 0
  00020	74 1e		 je	 SHORT $LN1@gzclose_r

; 644  :         inflateEnd(&(state->strm));

  00022	8d 46 64	 lea	 eax, DWORD PTR [esi+100]
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 _inflateEnd

; 645  :         free(state->out);

  0002b	8b 4e 28	 mov	 ecx, DWORD PTR [esi+40]
  0002e	51		 push	 ecx
  0002f	e8 00 00 00 00	 call	 _free

; 646  :         free(state->in);

  00034	8b 56 24	 mov	 edx, DWORD PTR [esi+36]
  00037	52		 push	 edx
  00038	e8 00 00 00 00	 call	 _free
  0003d	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1@gzclose_r:

; 647  :     }
; 648  :     err = state->err == Z_BUF_ERROR ? Z_BUF_ERROR : Z_OK;

  00040	33 c0		 xor	 eax, eax
  00042	83 7e 5c fb	 cmp	 DWORD PTR [esi+92], -5	; fffffffbH
  00046	53		 push	 ebx
  00047	0f 95 c0	 setne	 al
  0004a	57		 push	 edi

; 649  :     gz_error(state, Z_OK, NULL);

  0004b	33 db		 xor	 ebx, ebx
  0004d	8b ce		 mov	 ecx, esi
  0004f	8d 78 ff	 lea	 edi, DWORD PTR [eax-1]
  00052	33 c0		 xor	 eax, eax
  00054	83 e7 fb	 and	 edi, -5			; fffffffbH
  00057	e8 00 00 00 00	 call	 _gz_error

; 650  :     free(state->path);

  0005c	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  0005f	51		 push	 ecx
  00060	e8 00 00 00 00	 call	 _free

; 651  :     ret = close(state->fd);

  00065	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  00068	52		 push	 edx
  00069	e8 00 00 00 00	 call	 _close

; 652  :     free(state);

  0006e	56		 push	 esi
  0006f	8b d8		 mov	 ebx, eax
  00071	e8 00 00 00 00	 call	 _free
  00076	83 c4 0c	 add	 esp, 12			; 0000000cH

; 653  :     return ret ? Z_ERRNO : err;

  00079	85 db		 test	 ebx, ebx
  0007b	74 08		 je	 SHORT $LN6@gzclose_r
  0007d	5f		 pop	 edi
  0007e	5b		 pop	 ebx
  0007f	83 c8 ff	 or	 eax, -1
  00082	5e		 pop	 esi

; 654  : }

  00083	5d		 pop	 ebp
  00084	c3		 ret	 0
$LN6@gzclose_r:

; 653  :     return ret ? Z_ERRNO : err;

  00085	8b c7		 mov	 eax, edi
  00087	5f		 pop	 edi
  00088	5b		 pop	 ebx
  00089	5e		 pop	 esi

; 654  : }

  0008a	5d		 pop	 ebp
  0008b	c3		 ret	 0
_gzclose_r ENDP
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT _gz_load
_TEXT	SEGMENT
_buf$ = 8						; size = 4
_gz_load PROC						; COMDAT
; _state$ = edi
; _len$ = eax
; _have$ = esi

; 26   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	8b d8		 mov	 ebx, eax

; 27   :     int ret;
; 28   :     unsigned get, max = ((unsigned)-1 >> 2) + 1;
; 29   : 
; 30   :     *have = 0;

  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  0000c	8d 64 24 00	 npad	 4
$LL7@gz_load:

; 31   :     do {
; 32   :         get = len - *have;

  00010	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00012	8b c3		 mov	 eax, ebx
  00014	2b c1		 sub	 eax, ecx

; 33   :         if (get > max)

  00016	3d 00 00 00 40	 cmp	 eax, 1073741824		; 40000000H
  0001b	76 05		 jbe	 SHORT $LN4@gz_load

; 34   :             get = max;

  0001d	b8 00 00 00 40	 mov	 eax, 1073741824		; 40000000H
$LN4@gz_load:

; 35   :         ret = read(state->fd, buf + *have, get);

  00022	03 4d 08	 add	 ecx, DWORD PTR _buf$[ebp]
  00025	50		 push	 eax
  00026	51		 push	 ecx
  00027	8b 4f 14	 mov	 ecx, DWORD PTR [edi+20]
  0002a	51		 push	 ecx
  0002b	e8 00 00 00 00	 call	 _read
  00030	83 c4 0c	 add	 esp, 12			; 0000000cH

; 36   :         if (ret <= 0)

  00033	85 c0		 test	 eax, eax
  00035	7e 08		 jle	 SHORT $LN12@gz_load

; 37   :             break;
; 38   :         *have += (unsigned)ret;

  00037	01 06		 add	 DWORD PTR [esi], eax

; 39   :     } while (*have < len);

  00039	39 1e		 cmp	 DWORD PTR [esi], ebx
  0003b	72 d3		 jb	 SHORT $LL7@gz_load

; 40   :     if (ret < 0) {

  0003d	85 c0		 test	 eax, eax
$LN12@gz_load:
  0003f	79 22		 jns	 SHORT $LN2@gz_load

; 41   :         gz_error(state, Z_ERRNO, zstrerror());

  00041	e8 00 00 00 00	 call	 __errno
  00046	8b 10		 mov	 edx, DWORD PTR [eax]
  00048	52		 push	 edx
  00049	e8 00 00 00 00	 call	 _strerror
  0004e	8b d8		 mov	 ebx, eax
  00050	83 c4 04	 add	 esp, 4
  00053	83 c8 ff	 or	 eax, -1
  00056	8b cf		 mov	 ecx, edi
  00058	e8 00 00 00 00	 call	 _gz_error

; 42   :         return -1;

  0005d	83 c8 ff	 or	 eax, -1
  00060	5b		 pop	 ebx

; 47   : }

  00061	5d		 pop	 ebp
  00062	c3		 ret	 0
$LN2@gz_load:

; 43   :     }
; 44   :     if (ret == 0)

  00063	85 c0		 test	 eax, eax
  00065	75 07		 jne	 SHORT $LN1@gz_load

; 45   :         state->eof = 1;

  00067	c7 47 40 01 00
	00 00		 mov	 DWORD PTR [edi+64], 1
$LN1@gz_load:

; 46   :     return 0;

  0006e	33 c0		 xor	 eax, eax
  00070	5b		 pop	 ebx

; 47   : }

  00071	5d		 pop	 ebp
  00072	c3		 ret	 0
_gz_load ENDP
; Function compile flags: /Ogtp
;	COMDAT _gz_avail
_TEXT	SEGMENT
_got$ = -4						; size = 4
_gz_avail PROC						; COMDAT
; _state$ = eax

; 58   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	57		 push	 edi
  00005	8b f8		 mov	 edi, eax

; 59   :     unsigned got;
; 60   :     z_streamp strm = &(state->strm);
; 61   : 
; 62   :     if (state->err != Z_OK && state->err != Z_BUF_ERROR)

  00007	8b 47 5c	 mov	 eax, DWORD PTR [edi+92]
  0000a	85 c0		 test	 eax, eax
  0000c	74 0d		 je	 SHORT $LN7@gz_avail
  0000e	83 f8 fb	 cmp	 eax, -5			; fffffffbH
  00011	74 08		 je	 SHORT $LN7@gz_avail
$LN11@gz_avail:

; 63   :         return -1;

  00013	83 c8 ff	 or	 eax, -1
  00016	5f		 pop	 edi

; 80   : }

  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
$LN7@gz_avail:

; 64   :     if (state->eof == 0) {

  0001b	83 7f 40 00	 cmp	 DWORD PTR [edi+64], 0
  0001f	75 43		 jne	 SHORT $LN6@gz_avail

; 65   :         if (strm->avail_in) {       /* copy what's there to the start */

  00021	56		 push	 esi
  00022	8b 77 68	 mov	 esi, DWORD PTR [edi+104]
  00025	85 f6		 test	 esi, esi
  00027	74 10		 je	 SHORT $LN2@gz_avail

; 66   :             unsigned char *p = state->in;

  00029	8b 47 24	 mov	 eax, DWORD PTR [edi+36]

; 67   :             unsigned const char *q = strm->next_in;

  0002c	8b 4f 64	 mov	 ecx, DWORD PTR [edi+100]
  0002f	90		 npad	 1
$LL4@gz_avail:

; 68   :             unsigned n = strm->avail_in;
; 69   :             do {
; 70   :                 *p++ = *q++;

  00030	8a 11		 mov	 dl, BYTE PTR [ecx]
  00032	88 10		 mov	 BYTE PTR [eax], dl
  00034	40		 inc	 eax
  00035	41		 inc	 ecx

; 71   :             } while (--n);

  00036	4e		 dec	 esi
  00037	75 f7		 jne	 SHORT $LL4@gz_avail
$LN2@gz_avail:

; 72   :         }
; 73   :         if (gz_load(state, state->in + strm->avail_in,
; 74   :                     state->size - strm->avail_in, &got) == -1)

  00039	8b 4f 68	 mov	 ecx, DWORD PTR [edi+104]
  0003c	8b 57 24	 mov	 edx, DWORD PTR [edi+36]
  0003f	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
  00042	03 d1		 add	 edx, ecx
  00044	2b c1		 sub	 eax, ecx
  00046	52		 push	 edx
  00047	8d 75 fc	 lea	 esi, DWORD PTR _got$[ebp]
  0004a	e8 00 00 00 00	 call	 _gz_load
  0004f	83 c4 04	 add	 esp, 4
  00052	5e		 pop	 esi
  00053	83 f8 ff	 cmp	 eax, -1

; 75   :             return -1;

  00056	74 bb		 je	 SHORT $LN11@gz_avail

; 76   :         strm->avail_in += got;

  00058	8b 45 fc	 mov	 eax, DWORD PTR _got$[ebp]
  0005b	01 47 68	 add	 DWORD PTR [edi+104], eax

; 77   :         strm->next_in = state->in;

  0005e	8b 4f 24	 mov	 ecx, DWORD PTR [edi+36]
  00061	89 4f 64	 mov	 DWORD PTR [edi+100], ecx
$LN6@gz_avail:

; 78   :     }
; 79   :     return 0;

  00064	33 c0		 xor	 eax, eax
  00066	5f		 pop	 edi

; 80   : }

  00067	8b e5		 mov	 esp, ebp
  00069	5d		 pop	 ebp
  0006a	c3		 ret	 0
_gz_avail ENDP
; Function compile flags: /Ogtp
;	COMDAT _gz_decomp
_TEXT	SEGMENT
_had$ = -4						; size = 4
_state$ = 8						; size = 4
_gz_decomp PROC						; COMDAT

; 177  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx

; 178  :     int ret = Z_OK;
; 179  :     unsigned had;
; 180  :     z_streamp strm = &(state->strm);

  00005	8b 5d 08	 mov	 ebx, DWORD PTR _state$[ebp]

; 181  : 
; 182  :     /* fill output buffer up to end of deflate stream */
; 183  :     had = strm->avail_out;

  00008	8b 43 74	 mov	 eax, DWORD PTR [ebx+116]
  0000b	56		 push	 esi
  0000c	57		 push	 edi
  0000d	8d 7b 64	 lea	 edi, DWORD PTR [ebx+100]
  00010	33 f6		 xor	 esi, esi
  00012	89 45 fc	 mov	 DWORD PTR _had$[ebp], eax
$LL11@gz_decomp:

; 184  :     do {
; 185  :         /* get more input for inflate() */
; 186  :         if (strm->avail_in == 0 && gz_avail(state) == -1)

  00015	83 7f 04 00	 cmp	 DWORD PTR [edi+4], 0
  00019	75 16		 jne	 SHORT $LN22@gz_decomp
  0001b	8b c3		 mov	 eax, ebx
  0001d	e8 00 00 00 00	 call	 _gz_avail
  00022	83 f8 ff	 cmp	 eax, -1
  00025	0f 84 c9 00 00
	00		 je	 $LN17@gz_decomp

; 187  :             return -1;
; 188  :         if (strm->avail_in == 0) {

  0002b	83 7f 04 00	 cmp	 DWORD PTR [edi+4], 0
  0002f	74 59		 je	 SHORT $LN18@gz_decomp
$LN22@gz_decomp:

; 191  :         }
; 192  : 
; 193  :         /* decompress and handle errors */
; 194  :         ret = inflate(strm, Z_NO_FLUSH);

  00031	6a 00		 push	 0
  00033	57		 push	 edi
  00034	e8 00 00 00 00	 call	 _inflate
  00039	8b f0		 mov	 esi, eax
  0003b	83 c4 08	 add	 esp, 8

; 195  :         if (ret == Z_STREAM_ERROR || ret == Z_NEED_DICT) {

  0003e	83 fe fe	 cmp	 esi, -2			; fffffffeH
  00041	0f 84 9b 00 00
	00		 je	 $LN5@gz_decomp
  00047	83 fe 02	 cmp	 esi, 2
  0004a	0f 84 92 00 00
	00		 je	 $LN5@gz_decomp

; 199  :         }
; 200  :         if (ret == Z_MEM_ERROR) {

  00050	83 fe fc	 cmp	 esi, -4			; fffffffcH
  00053	74 4c		 je	 SHORT $LN20@gz_decomp

; 202  :             return -1;
; 203  :         }
; 204  :         if (ret == Z_DATA_ERROR) {              /* deflate stream invalid */

  00055	83 fe fd	 cmp	 esi, -3			; fffffffdH
  00058	74 63		 je	 SHORT $LN21@gz_decomp

; 207  :             return -1;
; 208  :         }
; 209  :     } while (strm->avail_out && ret != Z_STREAM_END);

  0005a	83 7f 10 00	 cmp	 DWORD PTR [edi+16], 0
  0005e	74 05		 je	 SHORT $LN9@gz_decomp
  00060	83 fe 01	 cmp	 esi, 1
  00063	75 b0		 jne	 SHORT $LL11@gz_decomp
$LN9@gz_decomp:

; 210  : 
; 211  :     /* update available output */
; 212  :     state->x.have = had - strm->avail_out;

  00065	8b 45 fc	 mov	 eax, DWORD PTR _had$[ebp]
  00068	2b 47 10	 sub	 eax, DWORD PTR [edi+16]
  0006b	89 03		 mov	 DWORD PTR [ebx], eax

; 213  :     state->x.next = strm->next_out - state->x.have;

  0006d	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  00070	2b c8		 sub	 ecx, eax
  00072	89 4b 04	 mov	 DWORD PTR [ebx+4], ecx

; 214  : 
; 215  :     /* if the gzip stream completed successfully, look for another */
; 216  :     if (ret == Z_STREAM_END)

  00075	83 fe 01	 cmp	 esi, 1
  00078	75 07		 jne	 SHORT $LN1@gz_decomp

; 217  :         state->how = LOOK;

  0007a	c7 43 30 00 00
	00 00		 mov	 DWORD PTR [ebx+48], 0
$LN1@gz_decomp:
  00081	5f		 pop	 edi
  00082	5e		 pop	 esi

; 218  : 
; 219  :     /* good decompression */
; 220  :     return 0;

  00083	33 c0		 xor	 eax, eax
  00085	5b		 pop	 ebx

; 221  : }

  00086	8b e5		 mov	 esp, ebp
  00088	5d		 pop	 ebp
  00089	c3		 ret	 0
$LN18@gz_decomp:

; 189  :             gz_error(state, Z_BUF_ERROR, "unexpected end of file");

  0008a	8b 4d 08	 mov	 ecx, DWORD PTR _state$[ebp]
  0008d	bb 00 00 00 00	 mov	 ebx, OFFSET ??_C@_0BH@CFIIDOJD@unexpected?5end?5of?5file?$AA@
  00092	b8 fb ff ff ff	 mov	 eax, -5			; fffffffbH
  00097	e8 00 00 00 00	 call	 _gz_error

; 190  :             break;

  0009c	8b 5d 08	 mov	 ebx, DWORD PTR _state$[ebp]
  0009f	eb c4		 jmp	 SHORT $LN9@gz_decomp
$LN20@gz_decomp:

; 196  :             gz_error(state, Z_STREAM_ERROR,
; 197  :                      "internal error: inflate stream corrupt");

  000a1	8b 4d 08	 mov	 ecx, DWORD PTR _state$[ebp]

; 201  :             gz_error(state, Z_MEM_ERROR, "out of memory");

  000a4	bb 00 00 00 00	 mov	 ebx, OFFSET ??_C@_0O@BNNCBLEN@out?5of?5memory?$AA@
  000a9	b8 fc ff ff ff	 mov	 eax, -4			; fffffffcH
  000ae	e8 00 00 00 00	 call	 _gz_error
  000b3	5f		 pop	 edi
  000b4	5e		 pop	 esi
  000b5	83 c8 ff	 or	 eax, -1
  000b8	5b		 pop	 ebx

; 221  : }

  000b9	8b e5		 mov	 esp, ebp
  000bb	5d		 pop	 ebp
  000bc	c3		 ret	 0
$LN21@gz_decomp:

; 205  :             gz_error(state, Z_DATA_ERROR,
; 206  :                      strm->msg == NULL ? "compressed data error" : strm->msg);

  000bd	8b 7f 18	 mov	 edi, DWORD PTR [edi+24]
  000c0	85 ff		 test	 edi, edi
  000c2	75 05		 jne	 SHORT $LN14@gz_decomp
  000c4	bf 00 00 00 00	 mov	 edi, OFFSET ??_C@_0BG@HCKBMIHF@compressed?5data?5error?$AA@
$LN14@gz_decomp:

; 196  :             gz_error(state, Z_STREAM_ERROR,
; 197  :                      "internal error: inflate stream corrupt");

  000c9	8b 4d 08	 mov	 ecx, DWORD PTR _state$[ebp]

; 205  :             gz_error(state, Z_DATA_ERROR,
; 206  :                      strm->msg == NULL ? "compressed data error" : strm->msg);

  000cc	8b df		 mov	 ebx, edi
  000ce	b8 fd ff ff ff	 mov	 eax, -3			; fffffffdH
  000d3	e8 00 00 00 00	 call	 _gz_error
  000d8	5f		 pop	 edi
  000d9	5e		 pop	 esi
  000da	83 c8 ff	 or	 eax, -1
  000dd	5b		 pop	 ebx

; 221  : }

  000de	8b e5		 mov	 esp, ebp
  000e0	5d		 pop	 ebp
  000e1	c3		 ret	 0
$LN5@gz_decomp:

; 196  :             gz_error(state, Z_STREAM_ERROR,
; 197  :                      "internal error: inflate stream corrupt");

  000e2	8b 4d 08	 mov	 ecx, DWORD PTR _state$[ebp]
  000e5	bb 00 00 00 00	 mov	 ebx, OFFSET ??_C@_0CH@CPOLIEKA@internal?5error?3?5inflate?5stream?5c@
  000ea	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  000ef	e8 00 00 00 00	 call	 _gz_error
$LN17@gz_decomp:

; 198  :             return -1;

  000f4	5f		 pop	 edi
  000f5	5e		 pop	 esi
  000f6	83 c8 ff	 or	 eax, -1
  000f9	5b		 pop	 ebx

; 221  : }

  000fa	8b e5		 mov	 esp, ebp
  000fc	5d		 pop	 ebp
  000fd	c3		 ret	 0
_gz_decomp ENDP
; Function compile flags: /Ogtp
;	COMDAT _gz_look
_TEXT	SEGMENT
tv68 = -4						; size = 4
_gz_look PROC						; COMDAT
; _state$ = esi

; 93   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx

; 94   :     z_streamp strm = &(state->strm);
; 95   : 
; 96   :     /* allocate read buffers and inflate memory */
; 97   :     if (state->size == 0) {

  00005	33 db		 xor	 ebx, ebx
  00007	57		 push	 edi
  00008	8d 7e 64	 lea	 edi, DWORD PTR [esi+100]
  0000b	39 5e 1c	 cmp	 DWORD PTR [esi+28], ebx
  0000e	0f 85 bd 00 00
	00		 jne	 $LN7@gz_look

; 98   :         /* allocate buffers */
; 99   :         state->in = (unsigned char *)malloc(state->want);

  00014	8b 5e 20	 mov	 ebx, DWORD PTR [esi+32]
  00017	53		 push	 ebx
  00018	e8 00 00 00 00	 call	 _malloc
  0001d	89 45 fc	 mov	 DWORD PTR tv68[ebp], eax
  00020	89 46 24	 mov	 DWORD PTR [esi+36], eax

; 100  :         state->out = (unsigned char *)malloc(state->want << 1);

  00023	8d 04 1b	 lea	 eax, DWORD PTR [ebx+ebx]
  00026	50		 push	 eax
  00027	e8 00 00 00 00	 call	 _malloc

; 101  :         if (state->in == NULL || state->out == NULL) {

  0002c	33 c9		 xor	 ecx, ecx
  0002e	83 c4 08	 add	 esp, 8
  00031	89 46 28	 mov	 DWORD PTR [esi+40], eax
  00034	39 4d fc	 cmp	 DWORD PTR tv68[ebp], ecx
  00037	74 6a		 je	 SHORT $LN8@gz_look
  00039	3b c1		 cmp	 eax, ecx
  0003b	74 66		 je	 SHORT $LN8@gz_look

; 106  :         }
; 107  :         state->size = state->want;
; 108  : 
; 109  :         /* allocate inflate memory */
; 110  :         state->strm.zalloc = Z_NULL;
; 111  :         state->strm.zfree = Z_NULL;
; 112  :         state->strm.opaque = Z_NULL;
; 113  :         state->strm.avail_in = 0;
; 114  :         state->strm.next_in = Z_NULL;
; 115  :         if (inflateInit2(&(state->strm), 15 + 16) != Z_OK) {    /* gunzip */

  0003d	6a 38		 push	 56			; 00000038H
  0003f	68 00 00 00 00	 push	 OFFSET ??_C@_06CJNJFBNP@1?42?411?$AA@
  00044	6a 1f		 push	 31			; 0000001fH
  00046	57		 push	 edi
  00047	89 5e 1c	 mov	 DWORD PTR [esi+28], ebx
  0004a	89 8e 84 00 00
	00		 mov	 DWORD PTR [esi+132], ecx
  00050	89 8e 88 00 00
	00		 mov	 DWORD PTR [esi+136], ecx
  00056	89 8e 8c 00 00
	00		 mov	 DWORD PTR [esi+140], ecx
  0005c	89 4e 68	 mov	 DWORD PTR [esi+104], ecx
  0005f	89 0f		 mov	 DWORD PTR [edi], ecx
  00061	e8 00 00 00 00	 call	 _inflateInit2_
  00066	83 c4 10	 add	 esp, 16			; 00000010H
  00069	85 c0		 test	 eax, eax
  0006b	74 62		 je	 SHORT $LN13@gz_look

; 116  :             free(state->out);

  0006d	8b 4e 28	 mov	 ecx, DWORD PTR [esi+40]
  00070	51		 push	 ecx
  00071	e8 00 00 00 00	 call	 _free

; 117  :             free(state->in);

  00076	8b 56 24	 mov	 edx, DWORD PTR [esi+36]
  00079	52		 push	 edx
  0007a	e8 00 00 00 00	 call	 _free
  0007f	83 c4 08	 add	 esp, 8

; 118  :             state->size = 0;
; 119  :             gz_error(state, Z_MEM_ERROR, "out of memory");

  00082	bb 00 00 00 00	 mov	 ebx, OFFSET ??_C@_0O@BNNCBLEN@out?5of?5memory?$AA@
  00087	b8 fc ff ff ff	 mov	 eax, -4			; fffffffcH
  0008c	8b ce		 mov	 ecx, esi
  0008e	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], 0
  00095	e8 00 00 00 00	 call	 _gz_error
  0009a	5f		 pop	 edi

; 120  :             return -1;

  0009b	83 c8 ff	 or	 eax, -1
  0009e	5b		 pop	 ebx

; 168  : }

  0009f	8b e5		 mov	 esp, ebp
  000a1	5d		 pop	 ebp
  000a2	c3		 ret	 0
$LN8@gz_look:

; 102  :             free(state->out);

  000a3	50		 push	 eax
  000a4	e8 00 00 00 00	 call	 _free

; 103  :             free(state->in);

  000a9	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  000ac	50		 push	 eax
  000ad	e8 00 00 00 00	 call	 _free
  000b2	83 c4 08	 add	 esp, 8

; 104  :             gz_error(state, Z_MEM_ERROR, "out of memory");

  000b5	bb 00 00 00 00	 mov	 ebx, OFFSET ??_C@_0O@BNNCBLEN@out?5of?5memory?$AA@
  000ba	b8 fc ff ff ff	 mov	 eax, -4			; fffffffcH
  000bf	8b ce		 mov	 ecx, esi
  000c1	e8 00 00 00 00	 call	 _gz_error
$LN15@gz_look:

; 105  :             return -1;

  000c6	5f		 pop	 edi
  000c7	83 c8 ff	 or	 eax, -1
  000ca	5b		 pop	 ebx

; 168  : }

  000cb	8b e5		 mov	 esp, ebp
  000cd	5d		 pop	 ebp
  000ce	c3		 ret	 0
$LN13@gz_look:

; 120  :             return -1;

  000cf	33 db		 xor	 ebx, ebx
$LN7@gz_look:

; 121  :         }
; 122  :     }
; 123  : 
; 124  :     /* get at least the magic bytes in the input buffer */
; 125  :     if (strm->avail_in < 2) {

  000d1	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  000d4	83 f8 02	 cmp	 eax, 2
  000d7	73 13		 jae	 SHORT $LN4@gz_look

; 126  :         if (gz_avail(state) == -1)

  000d9	8b c6		 mov	 eax, esi
  000db	e8 00 00 00 00	 call	 _gz_avail
  000e0	83 f8 ff	 cmp	 eax, -1

; 127  :             return -1;

  000e3	74 e1		 je	 SHORT $LN15@gz_look

; 128  :         if (strm->avail_in == 0)

  000e5	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  000e8	3b c3		 cmp	 eax, ebx

; 129  :             return 0;

  000ea	74 73		 je	 SHORT $LN14@gz_look
$LN4@gz_look:

; 130  :     }
; 131  : 
; 132  :     /* look for gzip magic bytes -- if there, do gzip decoding (note: there is
; 133  :        a logical dilemma here when considering the case of a partially written
; 134  :        gzip file, to wit, if a single 31 byte is written, then we cannot tell
; 135  :        whether this is a single-byte file, or just a partially written gzip
; 136  :        file -- for here we assume that if a gzip file is being written, then
; 137  :        the header will be written in a single operation, so that reading a
; 138  :        single byte is sufficient indication that it is not a gzip file) */
; 139  :     if (strm->avail_in > 1 &&
; 140  :             strm->next_in[0] == 31 && strm->next_in[1] == 139) {

  000ec	ba 01 00 00 00	 mov	 edx, 1
  000f1	3b c2		 cmp	 eax, edx
  000f3	76 28		 jbe	 SHORT $LN3@gz_look
  000f5	8b 07		 mov	 eax, DWORD PTR [edi]
  000f7	80 38 1f	 cmp	 BYTE PTR [eax], 31	; 0000001fH
  000fa	75 21		 jne	 SHORT $LN3@gz_look
  000fc	80 78 01 8b	 cmp	 BYTE PTR [eax+1], 139	; 0000008bH
  00100	75 1b		 jne	 SHORT $LN3@gz_look

; 141  :         inflateReset(strm);

  00102	57		 push	 edi
  00103	e8 00 00 00 00	 call	 _inflateReset
  00108	83 c4 04	 add	 esp, 4
  0010b	5f		 pop	 edi

; 142  :         state->how = GZIP;
; 143  :         state->direct = 0;

  0010c	89 5e 2c	 mov	 DWORD PTR [esi+44], ebx
  0010f	c7 46 30 02 00
	00 00		 mov	 DWORD PTR [esi+48], 2

; 167  :     return 0;

  00116	33 c0		 xor	 eax, eax
  00118	5b		 pop	 ebx

; 168  : }

  00119	8b e5		 mov	 esp, ebp
  0011b	5d		 pop	 ebp
  0011c	c3		 ret	 0
$LN3@gz_look:

; 144  :         return 0;
; 145  :     }
; 146  : 
; 147  :     /* no gzip header -- if we were decoding gzip before, then this is trailing
; 148  :        garbage.  Ignore the trailing garbage and finish. */
; 149  :     if (state->direct == 0) {

  0011d	39 5e 2c	 cmp	 DWORD PTR [esi+44], ebx
  00120	75 10		 jne	 SHORT $LN2@gz_look

; 150  :         strm->avail_in = 0;

  00122	89 5f 04	 mov	 DWORD PTR [edi+4], ebx
  00125	5f		 pop	 edi

; 151  :         state->eof = 1;
; 152  :         state->x.have = 0;

  00126	89 1e		 mov	 DWORD PTR [esi], ebx
  00128	89 56 40	 mov	 DWORD PTR [esi+64], edx

; 167  :     return 0;

  0012b	33 c0		 xor	 eax, eax
  0012d	5b		 pop	 ebx

; 168  : }

  0012e	8b e5		 mov	 esp, ebp
  00130	5d		 pop	 ebp
  00131	c3		 ret	 0
$LN2@gz_look:

; 153  :         return 0;
; 154  :     }
; 155  : 
; 156  :     /* doing raw i/o, copy any leftover input to output -- this assumes that
; 157  :        the output buffer is larger than the input buffer, which also assures
; 158  :        space for gzungetc() */
; 159  :     state->x.next = state->out;

  00132	8b 46 28	 mov	 eax, DWORD PTR [esi+40]
  00135	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 160  :     if (strm->avail_in) {

  00138	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  0013b	3b cb		 cmp	 ecx, ebx
  0013d	74 1a		 je	 SHORT $LN1@gz_look

; 161  :         memcpy(state->x.next, strm->next_in, strm->avail_in);

  0013f	51		 push	 ecx
  00140	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00142	51		 push	 ecx
  00143	50		 push	 eax
  00144	e8 00 00 00 00	 call	 _memcpy

; 162  :         state->x.have = strm->avail_in;

  00149	8b 57 04	 mov	 edx, DWORD PTR [edi+4]
  0014c	89 16		 mov	 DWORD PTR [esi], edx
  0014e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 163  :         strm->avail_in = 0;

  00151	89 5f 04	 mov	 DWORD PTR [edi+4], ebx
  00154	ba 01 00 00 00	 mov	 edx, 1
$LN1@gz_look:

; 164  :     }
; 165  :     state->how = COPY;

  00159	89 56 30	 mov	 DWORD PTR [esi+48], edx

; 166  :     state->direct = 1;

  0015c	89 56 2c	 mov	 DWORD PTR [esi+44], edx
$LN14@gz_look:

; 167  :     return 0;

  0015f	5f		 pop	 edi
  00160	33 c0		 xor	 eax, eax
  00162	5b		 pop	 ebx

; 168  : }

  00163	8b e5		 mov	 esp, ebp
  00165	5d		 pop	 ebp
  00166	c3		 ret	 0
_gz_look ENDP
PUBLIC	_gzdirect
; Function compile flags: /Ogtp
;	COMDAT _gzdirect
_TEXT	SEGMENT
_file$ = 8						; size = 4
_gzdirect PROC						; COMDAT

; 609  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 610  :     gz_statep state;
; 611  : 
; 612  :     /* get internal structure */
; 613  :     if (file == NULL)

  00004	8b 75 08	 mov	 esi, DWORD PTR _file$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	75 05		 jne	 SHORT $LN2@gzdirect

; 614  :         return 0;

  0000b	33 c0		 xor	 eax, eax
  0000d	5e		 pop	 esi

; 624  : }

  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
$LN2@gzdirect:

; 615  :     state = (gz_statep)file;
; 616  : 
; 617  :     /* if the state is not known, but we can find out, then do so (this is
; 618  :        mainly for right after a gzopen() or gzdopen()) */
; 619  :     if (state->mode == GZ_READ && state->how == LOOK && state->x.have == 0)

  00010	81 7e 10 4f 1c
	00 00		 cmp	 DWORD PTR [esi+16], 7247 ; 00001c4fH
  00017	75 10		 jne	 SHORT $LN1@gzdirect
  00019	83 7e 30 00	 cmp	 DWORD PTR [esi+48], 0
  0001d	75 0a		 jne	 SHORT $LN1@gzdirect
  0001f	83 3e 00	 cmp	 DWORD PTR [esi], 0
  00022	75 05		 jne	 SHORT $LN1@gzdirect

; 620  :         (void)gz_look(state);

  00024	e8 00 00 00 00	 call	 _gz_look
$LN1@gzdirect:

; 621  : 
; 622  :     /* return 1 if transparent, 0 if processing a gzip stream */
; 623  :     return state->direct;

  00029	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  0002c	5e		 pop	 esi

; 624  : }

  0002d	5d		 pop	 ebp
  0002e	c3		 ret	 0
_gzdirect ENDP
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT _gz_fetch
_TEXT	SEGMENT
_gz_fetch PROC						; COMDAT
; _state$ = eax

; 231  : {

  00000	56		 push	 esi
  00001	8b f0		 mov	 esi, eax
$LL13@gz_fetch:

; 232  :     z_streamp strm = &(state->strm);
; 233  : 
; 234  :     do {
; 235  :         switch(state->how) {

  00003	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  00006	83 e8 00	 sub	 eax, 0
  00009	74 27		 je	 SHORT $LN8@gz_fetch
  0000b	48		 dec	 eax
  0000c	74 49		 je	 SHORT $LN5@gz_fetch
  0000e	48		 dec	 eax
  0000f	75 31		 jne	 SHORT $LN12@gz_fetch

; 247  :             return 0;
; 248  :         case GZIP:      /* -> GZIP or LOOK (if end of gzip stream) */
; 249  :             strm->avail_out = state->size << 1;

  00011	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00014	03 c0		 add	 eax, eax
  00016	89 46 74	 mov	 DWORD PTR [esi+116], eax

; 250  :             strm->next_out = state->out;

  00019	8b 4e 28	 mov	 ecx, DWORD PTR [esi+40]

; 251  :             if (gz_decomp(state) == -1)

  0001c	56		 push	 esi
  0001d	89 4e 70	 mov	 DWORD PTR [esi+112], ecx
  00020	e8 00 00 00 00	 call	 _gz_decomp
  00025	83 c4 04	 add	 esp, 4
  00028	83 f8 ff	 cmp	 eax, -1
  0002b	75 15		 jne	 SHORT $LN12@gz_fetch
$LN19@gz_fetch:

; 238  :                 return -1;

  0002d	83 c8 ff	 or	 eax, -1
  00030	5e		 pop	 esi

; 256  : }

  00031	c3		 ret	 0
$LN8@gz_fetch:

; 236  :         case LOOK:      /* -> LOOK, COPY (only if never GZIP), or GZIP */
; 237  :             if (gz_look(state) == -1)

  00032	e8 00 00 00 00	 call	 _gz_look
  00037	83 f8 ff	 cmp	 eax, -1
  0003a	74 f1		 je	 SHORT $LN19@gz_fetch

; 239  :             if (state->how == LOOK)

  0003c	83 7e 30 00	 cmp	 DWORD PTR [esi+48], 0
  00040	74 11		 je	 SHORT $LN1@gz_fetch
$LN12@gz_fetch:

; 252  :                 return -1;
; 253  :         }
; 254  :     } while (state->x.have == 0 && (!state->eof || strm->avail_in));

  00042	83 3e 00	 cmp	 DWORD PTR [esi], 0
  00045	75 0c		 jne	 SHORT $LN1@gz_fetch
  00047	83 7e 40 00	 cmp	 DWORD PTR [esi+64], 0
  0004b	74 b6		 je	 SHORT $LL13@gz_fetch
  0004d	83 7e 68 00	 cmp	 DWORD PTR [esi+104], 0
  00051	75 b0		 jne	 SHORT $LL13@gz_fetch
$LN1@gz_fetch:

; 255  :     return 0;

  00053	33 c0		 xor	 eax, eax
  00055	5e		 pop	 esi

; 256  : }

  00056	c3		 ret	 0
$LN5@gz_fetch:

; 240  :                 return 0;
; 241  :             break;
; 242  :         case COPY:      /* -> COPY */
; 243  :             if (gz_load(state, state->out, state->size << 1, &(state->x.have))
; 244  :                     == -1)

  00057	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  0005a	8b 56 28	 mov	 edx, DWORD PTR [esi+40]
  0005d	57		 push	 edi
  0005e	03 c0		 add	 eax, eax
  00060	52		 push	 edx
  00061	8b fe		 mov	 edi, esi
  00063	e8 00 00 00 00	 call	 _gz_load
  00068	83 c4 04	 add	 esp, 4
  0006b	5f		 pop	 edi
  0006c	83 f8 ff	 cmp	 eax, -1

; 245  :                 return -1;

  0006f	74 bc		 je	 SHORT $LN19@gz_fetch

; 246  :             state->x.next = state->out;

  00071	8b 46 28	 mov	 eax, DWORD PTR [esi+40]
  00074	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 255  :     return 0;

  00077	33 c0		 xor	 eax, eax
  00079	5e		 pop	 esi

; 256  : }

  0007a	c3		 ret	 0
_gz_fetch ENDP
; Function compile flags: /Ogtp
;	COMDAT _gz_skip
_TEXT	SEGMENT
_len$ = 8						; size = 8
_gz_skip PROC						; COMDAT
; _state$ = esi

; 262  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 263  :     unsigned n;
; 264  : 
; 265  :     /* skip over len bytes or reach end-of-file, whichever comes first */
; 266  :     while (len)

  00004	8b 5d 0c	 mov	 ebx, DWORD PTR _len$[ebp+4]
  00007	57		 push	 edi
  00008	8b 7d 08	 mov	 edi, DWORD PTR _len$[ebp]
  0000b	8b c7		 mov	 eax, edi
  0000d	0b c3		 or	 eax, ebx
  0000f	74 4b		 je	 SHORT $LN6@gz_skip
$LL7@gz_skip:

; 267  :         /* skip over whatever is in output buffer */
; 268  :         if (state->x.have) {

  00011	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00013	85 c9		 test	 ecx, ecx
  00015	74 27		 je	 SHORT $LN5@gz_skip

; 269  :             n = GT_OFF(state->x.have) || (z_off64_t)state->x.have > len ?
; 270  :                 (unsigned)len : state->x.have;

  00017	33 c0		 xor	 eax, eax
  00019	3b c3		 cmp	 eax, ebx
  0001b	7f 0a		 jg	 SHORT $LN10@gz_skip
  0001d	7c 04		 jl	 SHORT $LN15@gz_skip
  0001f	3b cf		 cmp	 ecx, edi
  00021	77 04		 ja	 SHORT $LN10@gz_skip
$LN15@gz_skip:
  00023	8b c1		 mov	 eax, ecx
  00025	eb 02		 jmp	 SHORT $LN11@gz_skip
$LN10@gz_skip:
  00027	8b c7		 mov	 eax, edi
$LN11@gz_skip:

; 271  :             state->x.have -= n;
; 272  :             state->x.next += n;

  00029	01 46 04	 add	 DWORD PTR [esi+4], eax
  0002c	2b c8		 sub	 ecx, eax
  0002e	89 0e		 mov	 DWORD PTR [esi], ecx

; 273  :             state->x.pos += n;

  00030	33 c9		 xor	 ecx, ecx
  00032	01 46 08	 add	 DWORD PTR [esi+8], eax
  00035	11 4e 0c	 adc	 DWORD PTR [esi+12], ecx

; 274  :             len -= n;

  00038	2b f8		 sub	 edi, eax
  0003a	1b d9		 sbb	 ebx, ecx
  0003c	eb 18		 jmp	 SHORT $LN1@gz_skip
$LN5@gz_skip:

; 275  :         }
; 276  : 
; 277  :         /* output buffer empty -- return if we're at the end of the input */
; 278  :         else if (state->eof && state->strm.avail_in == 0)

  0003e	83 7e 40 00	 cmp	 DWORD PTR [esi+64], 0
  00042	74 06		 je	 SHORT $LN3@gz_skip
  00044	83 7e 68 00	 cmp	 DWORD PTR [esi+104], 0
  00048	74 12		 je	 SHORT $LN6@gz_skip
$LN3@gz_skip:

; 279  :             break;
; 280  : 
; 281  :         /* need more data to skip -- load up output buffer */
; 282  :         else {
; 283  :             /* get more output, looking for header if required */
; 284  :             if (gz_fetch(state) == -1)

  0004a	8b c6		 mov	 eax, esi
  0004c	e8 00 00 00 00	 call	 _gz_fetch
  00051	83 f8 ff	 cmp	 eax, -1
  00054	74 0c		 je	 SHORT $LN14@gz_skip
$LN1@gz_skip:

; 263  :     unsigned n;
; 264  : 
; 265  :     /* skip over len bytes or reach end-of-file, whichever comes first */
; 266  :     while (len)

  00056	8b cf		 mov	 ecx, edi
  00058	0b cb		 or	 ecx, ebx
  0005a	75 b5		 jne	 SHORT $LL7@gz_skip
$LN6@gz_skip:
  0005c	5f		 pop	 edi

; 286  :         }
; 287  :     return 0;

  0005d	33 c0		 xor	 eax, eax
  0005f	5b		 pop	 ebx

; 288  : }

  00060	5d		 pop	 ebp
  00061	c3		 ret	 0
$LN14@gz_skip:
  00062	5f		 pop	 edi

; 285  :                 return -1;

  00063	83 c8 ff	 or	 eax, -1
  00066	5b		 pop	 ebx

; 288  : }

  00067	5d		 pop	 ebp
  00068	c3		 ret	 0
_gz_skip ENDP
PUBLIC	_gzgets
; Function compile flags: /Ogtp
;	COMDAT _gzgets
_TEXT	SEGMENT
_str$ = -4						; size = 4
_left$ = 8						; size = 4
_file$ = 8						; size = 4
_buf$ = 12						; size = 4
_len$ = 16						; size = 4
_gzgets	PROC						; COMDAT

; 547  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi

; 548  :     unsigned left, n;
; 549  :     char *str;
; 550  :     unsigned char *eol;
; 551  :     gz_statep state;
; 552  : 
; 553  :     /* check parameters and get internal structure */
; 554  :     if (file == NULL || buf == NULL || len < 1)

  00006	8b 75 08	 mov	 esi, DWORD PTR _file$[ebp]
  00009	57		 push	 edi
  0000a	85 f6		 test	 esi, esi
  0000c	0f 84 f6 00 00
	00		 je	 $LN14@gzgets
  00012	8b 7d 0c	 mov	 edi, DWORD PTR _buf$[ebp]
  00015	85 ff		 test	 edi, edi
  00017	0f 84 eb 00 00
	00		 je	 $LN14@gzgets
  0001d	8b 5d 10	 mov	 ebx, DWORD PTR _len$[ebp]
  00020	83 fb 01	 cmp	 ebx, 1
  00023	0f 8c df 00 00
	00		 jl	 $LN14@gzgets

; 556  :     state = (gz_statep)file;
; 557  : 
; 558  :     /* check that we're reading and that there's no (serious) error */
; 559  :     if (state->mode != GZ_READ ||
; 560  :         (state->err != Z_OK && state->err != Z_BUF_ERROR))

  00029	81 7e 10 4f 1c
	00 00		 cmp	 DWORD PTR [esi+16], 7247 ; 00001c4fH
  00030	0f 85 d2 00 00
	00		 jne	 $LN14@gzgets
  00036	8b 46 5c	 mov	 eax, DWORD PTR [esi+92]
  00039	85 c0		 test	 eax, eax
  0003b	74 09		 je	 SHORT $LN13@gzgets
  0003d	83 f8 fb	 cmp	 eax, -5			; fffffffbH
  00040	0f 85 c2 00 00
	00		 jne	 $LN14@gzgets
$LN13@gzgets:

; 561  :         return NULL;
; 562  : 
; 563  :     /* process a skip request */
; 564  :     if (state->seek) {

  00046	83 7e 58 00	 cmp	 DWORD PTR [esi+88], 0
  0004a	74 20		 je	 SHORT $LN25@gzgets

; 565  :         state->seek = 0;
; 566  :         if (gz_skip(state, state->skip) == -1)

  0004c	8b 46 54	 mov	 eax, DWORD PTR [esi+84]
  0004f	8b 4e 50	 mov	 ecx, DWORD PTR [esi+80]
  00052	50		 push	 eax
  00053	51		 push	 ecx
  00054	c7 46 58 00 00
	00 00		 mov	 DWORD PTR [esi+88], 0
  0005b	e8 00 00 00 00	 call	 _gz_skip
  00060	83 c4 08	 add	 esp, 8
  00063	83 f8 ff	 cmp	 eax, -1

; 567  :             return NULL;

  00066	0f 84 9c 00 00
	00		 je	 $LN14@gzgets
$LN25@gzgets:

; 568  :     }
; 569  : 
; 570  :     /* copy output bytes up to new line or len - 1, whichever comes first --
; 571  :        append a terminating zero to the string (we don't check for a zero in
; 572  :        the contents, let the user worry about that) */
; 573  :     str = buf;
; 574  :     left = (unsigned)len - 1;

  0006c	4b		 dec	 ebx
  0006d	89 7d fc	 mov	 DWORD PTR _str$[ebp], edi
  00070	89 5d 08	 mov	 DWORD PTR _left$[ebp], ebx

; 575  :     if (left) do {

  00073	0f 84 8f 00 00
	00		 je	 $LN14@gzgets
  00079	8d a4 24 00 00
	00 00		 npad	 7
$LL8@gzgets:

; 576  :         /* assure that something is in the output buffer */
; 577  :         if (state->x.have == 0 && gz_fetch(state) == -1)

  00080	8b 3e		 mov	 edi, DWORD PTR [esi]
  00082	85 ff		 test	 edi, edi
  00084	75 12		 jne	 SHORT $LN24@gzgets
  00086	8b c6		 mov	 eax, esi
  00088	e8 00 00 00 00	 call	 _gz_fetch
  0008d	83 f8 ff	 cmp	 eax, -1
  00090	74 76		 je	 SHORT $LN14@gzgets

; 578  :             return NULL;                /* error */
; 579  :         if (state->x.have == 0) {       /* end of file */

  00092	8b 3e		 mov	 edi, DWORD PTR [esi]
  00094	85 ff		 test	 edi, edi
  00096	74 55		 je	 SHORT $LN22@gzgets
$LN24@gzgets:

; 581  :             break;                      /* return what we have */
; 582  :         }
; 583  : 
; 584  :         /* look for end-of-line in current output buffer */
; 585  :         n = state->x.have > left ? left : state->x.have;

  00098	3b fb		 cmp	 edi, ebx
  0009a	76 02		 jbe	 SHORT $LN18@gzgets
  0009c	8b fb		 mov	 edi, ebx
$LN18@gzgets:

; 586  :         eol = (unsigned char *)memchr(state->x.next, '\n', n);

  0009e	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  000a1	57		 push	 edi
  000a2	6a 0a		 push	 10			; 0000000aH
  000a4	52		 push	 edx
  000a5	e8 00 00 00 00	 call	 _memchr
  000aa	8b d8		 mov	 ebx, eax
  000ac	83 c4 0c	 add	 esp, 12			; 0000000cH

; 587  :         if (eol != NULL)

  000af	85 db		 test	 ebx, ebx
  000b1	74 06		 je	 SHORT $LN3@gzgets

; 588  :             n = (unsigned)(eol - state->x.next) + 1;

  000b3	8b fb		 mov	 edi, ebx
  000b5	2b 7e 04	 sub	 edi, DWORD PTR [esi+4]
  000b8	47		 inc	 edi
$LN3@gzgets:

; 589  : 
; 590  :         /* copy through end-of-line, or remainder if not found */
; 591  :         memcpy(buf, state->x.next, n);

  000b9	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000bc	8b 4d 0c	 mov	 ecx, DWORD PTR _buf$[ebp]
  000bf	57		 push	 edi
  000c0	50		 push	 eax
  000c1	51		 push	 ecx
  000c2	e8 00 00 00 00	 call	 _memcpy

; 592  :         state->x.have -= n;

  000c7	29 3e		 sub	 DWORD PTR [esi], edi

; 593  :         state->x.next += n;

  000c9	01 7e 04	 add	 DWORD PTR [esi+4], edi

; 594  :         state->x.pos += n;
; 595  :         left -= n;

  000cc	8b 45 08	 mov	 eax, DWORD PTR _left$[ebp]
  000cf	83 c4 0c	 add	 esp, 12			; 0000000cH
  000d2	01 7e 08	 add	 DWORD PTR [esi+8], edi
  000d5	83 56 0c 00	 adc	 DWORD PTR [esi+12], 0

; 596  :         buf += n;

  000d9	01 7d 0c	 add	 DWORD PTR _buf$[ebp], edi
  000dc	2b c7		 sub	 eax, edi
  000de	89 45 08	 mov	 DWORD PTR _left$[ebp], eax

; 597  :     } while (left && eol == NULL);

  000e1	85 c0		 test	 eax, eax
  000e3	74 0f		 je	 SHORT $LN2@gzgets
  000e5	85 db		 test	 ebx, ebx
  000e7	75 0b		 jne	 SHORT $LN2@gzgets
  000e9	8b d8		 mov	 ebx, eax
  000eb	eb 93		 jmp	 SHORT $LL8@gzgets
$LN22@gzgets:

; 580  :             state->past = 1;            /* read past end */

  000ed	c7 46 44 01 00
	00 00		 mov	 DWORD PTR [esi+68], 1
$LN2@gzgets:

; 598  : 
; 599  :     /* return terminated string, or if nothing, end of file */
; 600  :     if (buf == str)

  000f4	8b 4d 0c	 mov	 ecx, DWORD PTR _buf$[ebp]
  000f7	8b 45 fc	 mov	 eax, DWORD PTR _str$[ebp]
  000fa	3b c8		 cmp	 ecx, eax

; 601  :         return NULL;

  000fc	74 0a		 je	 SHORT $LN14@gzgets

; 602  :     buf[0] = 0;

  000fe	5f		 pop	 edi
  000ff	5e		 pop	 esi
  00100	c6 01 00	 mov	 BYTE PTR [ecx], 0
  00103	5b		 pop	 ebx

; 603  :     return str;
; 604  : }

  00104	8b e5		 mov	 esp, ebp
  00106	5d		 pop	 ebp
  00107	c3		 ret	 0
$LN14@gzgets:
  00108	5f		 pop	 edi
  00109	5e		 pop	 esi

; 555  :         return NULL;

  0010a	33 c0		 xor	 eax, eax
  0010c	5b		 pop	 ebx

; 603  :     return str;
; 604  : }

  0010d	8b e5		 mov	 esp, ebp
  0010f	5d		 pop	 ebp
  00110	c3		 ret	 0
_gzgets	ENDP
_TEXT	ENDS
PUBLIC	_gzungetc
; Function compile flags: /Ogtp
;	COMDAT _gzungetc
_TEXT	SEGMENT
_c$ = 8							; size = 4
_file$ = 12						; size = 4
_gzungetc PROC						; COMDAT

; 486  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 487  :     gz_statep state;
; 488  : 
; 489  :     /* get internal structure */
; 490  :     if (file == NULL)

  00005	8b 75 0c	 mov	 esi, DWORD PTR _file$[ebp]
  00008	33 db		 xor	 ebx, ebx
  0000a	3b f3		 cmp	 esi, ebx
  0000c	75 07		 jne	 SHORT $LN11@gzungetc
$LN9@gzungetc:
  0000e	5e		 pop	 esi

; 491  :         return -1;

  0000f	83 c8 ff	 or	 eax, -1
  00012	5b		 pop	 ebx

; 539  :     return c;
; 540  : }

  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
$LN11@gzungetc:

; 492  :     state = (gz_statep)file;
; 493  : 
; 494  :     /* check that we're reading and that there's no (serious) error */
; 495  :     if (state->mode != GZ_READ ||
; 496  :         (state->err != Z_OK && state->err != Z_BUF_ERROR))

  00015	81 7e 10 4f 1c
	00 00		 cmp	 DWORD PTR [esi+16], 7247 ; 00001c4fH
  0001c	75 f0		 jne	 SHORT $LN9@gzungetc
  0001e	8b 46 5c	 mov	 eax, DWORD PTR [esi+92]
  00021	3b c3		 cmp	 eax, ebx
  00023	74 05		 je	 SHORT $LN10@gzungetc
  00025	83 f8 fb	 cmp	 eax, -5			; fffffffbH
  00028	75 e4		 jne	 SHORT $LN9@gzungetc
$LN10@gzungetc:
  0002a	57		 push	 edi

; 497  :         return -1;
; 498  : 
; 499  :     /* process a skip request */
; 500  :     if (state->seek) {

  0002b	83 cf ff	 or	 edi, -1
  0002e	39 5e 58	 cmp	 DWORD PTR [esi+88], ebx
  00031	74 17		 je	 SHORT $LN7@gzungetc

; 501  :         state->seek = 0;
; 502  :         if (gz_skip(state, state->skip) == -1)

  00033	8b 46 54	 mov	 eax, DWORD PTR [esi+84]
  00036	8b 4e 50	 mov	 ecx, DWORD PTR [esi+80]
  00039	50		 push	 eax
  0003a	51		 push	 ecx
  0003b	89 5e 58	 mov	 DWORD PTR [esi+88], ebx
  0003e	e8 00 00 00 00	 call	 _gz_skip
  00043	83 c4 08	 add	 esp, 8
  00046	3b c7		 cmp	 eax, edi

; 503  :             return -1;

  00048	74 48		 je	 SHORT $LN17@gzungetc
$LN7@gzungetc:

; 504  :     }
; 505  : 
; 506  :     /* can't push EOF */
; 507  :     if (c < 0)

  0004a	8b 45 08	 mov	 eax, DWORD PTR _c$[ebp]
  0004d	3b c3		 cmp	 eax, ebx

; 508  :         return -1;

  0004f	7c 41		 jl	 SHORT $LN17@gzungetc

; 509  : 
; 510  :     /* if output buffer empty, put byte at end (allows more pushing) */
; 511  :     if (state->x.have == 0) {

  00051	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 512  :         state->x.have = 1;
; 513  :         state->x.next = state->out + (state->size << 1) - 1;

  00053	8b 56 1c	 mov	 edx, DWORD PTR [esi+28]
  00056	3b cb		 cmp	 ecx, ebx
  00058	75 20		 jne	 SHORT $LN5@gzungetc
  0005a	8b 4e 28	 mov	 ecx, DWORD PTR [esi+40]
  0005d	8d 4c 51 ff	 lea	 ecx, DWORD PTR [ecx+edx*2-1]
  00061	c7 06 01 00 00
	00		 mov	 DWORD PTR [esi], 1
  00067	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 514  :         state->x.next[0] = (unsigned char)c;

  0006a	88 01		 mov	 BYTE PTR [ecx], al

; 537  :     state->x.pos--;

  0006c	01 7e 08	 add	 DWORD PTR [esi+8], edi
  0006f	89 5e 44	 mov	 DWORD PTR [esi+68], ebx
  00072	11 7e 0c	 adc	 DWORD PTR [esi+12], edi
  00075	5f		 pop	 edi
  00076	5e		 pop	 esi
  00077	5b		 pop	 ebx

; 539  :     return c;
; 540  : }

  00078	5d		 pop	 ebp
  00079	c3		 ret	 0
$LN5@gzungetc:

; 515  :         state->x.pos--;
; 516  :         state->past = 0;
; 517  :         return c;
; 518  :     }
; 519  : 
; 520  :     /* if no room, give up (must have already done a gzungetc()) */
; 521  :     if (state->x.have == (state->size << 1)) {

  0007a	8d 1c 12	 lea	 ebx, DWORD PTR [edx+edx]
  0007d	3b cb		 cmp	 ecx, ebx
  0007f	75 18		 jne	 SHORT $LN4@gzungetc

; 522  :         gz_error(state, Z_DATA_ERROR, "out of room to push characters");

  00081	bb 00 00 00 00	 mov	 ebx, OFFSET ??_C@_0BP@IIKIGMCC@out?5of?5room?5to?5push?5characters?$AA@
  00086	b8 fd ff ff ff	 mov	 eax, -3			; fffffffdH
  0008b	8b ce		 mov	 ecx, esi
  0008d	e8 00 00 00 00	 call	 _gz_error
$LN17@gzungetc:

; 523  :         return -1;

  00092	8b c7		 mov	 eax, edi
  00094	5f		 pop	 edi
  00095	5e		 pop	 esi
  00096	5b		 pop	 ebx

; 539  :     return c;
; 540  : }

  00097	5d		 pop	 ebp
  00098	c3		 ret	 0
$LN4@gzungetc:

; 524  :     }
; 525  : 
; 526  :     /* slide output data if needed and insert byte before existing data */
; 527  :     if (state->x.next == state->out) {

  00099	8b 5e 28	 mov	 ebx, DWORD PTR [esi+40]
  0009c	39 5e 04	 cmp	 DWORD PTR [esi+4], ebx
  0009f	75 1e		 jne	 SHORT $LN3@gzungetc

; 528  :         unsigned char *src = state->out + state->x.have;

  000a1	03 cb		 add	 ecx, ebx

; 529  :         unsigned char *dest = state->out + (state->size << 1);

  000a3	8d 14 53	 lea	 edx, DWORD PTR [ebx+edx*2]

; 530  :         while (src > state->out)

  000a6	3b cb		 cmp	 ecx, ebx
  000a8	76 12		 jbe	 SHORT $LN1@gzungetc
  000aa	8d 9b 00 00 00
	00		 npad	 6
$LL2@gzungetc:

; 531  :             *--dest = *--src;

  000b0	8a 59 ff	 mov	 bl, BYTE PTR [ecx-1]
  000b3	49		 dec	 ecx
  000b4	4a		 dec	 edx
  000b5	88 1a		 mov	 BYTE PTR [edx], bl
  000b7	3b 4e 28	 cmp	 ecx, DWORD PTR [esi+40]
  000ba	77 f4		 ja	 SHORT $LL2@gzungetc
$LN1@gzungetc:

; 532  :         state->x.next = dest;

  000bc	89 56 04	 mov	 DWORD PTR [esi+4], edx
$LN3@gzungetc:

; 533  :     }
; 534  :     state->x.have++;
; 535  :     state->x.next--;

  000bf	01 7e 04	 add	 DWORD PTR [esi+4], edi
  000c2	ff 06		 inc	 DWORD PTR [esi]
  000c4	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]

; 536  :     state->x.next[0] = (unsigned char)c;

  000c7	88 01		 mov	 BYTE PTR [ecx], al

; 537  :     state->x.pos--;

  000c9	01 7e 08	 add	 DWORD PTR [esi+8], edi

; 538  :     state->past = 0;

  000cc	c7 46 44 00 00
	00 00		 mov	 DWORD PTR [esi+68], 0
  000d3	11 7e 0c	 adc	 DWORD PTR [esi+12], edi
  000d6	5f		 pop	 edi
  000d7	5e		 pop	 esi
  000d8	5b		 pop	 ebx

; 539  :     return c;
; 540  : }

  000d9	5d		 pop	 ebp
  000da	c3		 ret	 0
_gzungetc ENDP
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT _gz_read
_TEXT	SEGMENT
_got$ = -8						; size = 4
_n$ = -4						; size = 4
_buf$ = 8						; size = 4
_len$ = 12						; size = 4
_gz_read PROC						; COMDAT
; _state$ = eax

; 298  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx

; 299  :     z_size_t got;
; 300  :     unsigned n;
; 301  : 
; 302  :     /* if len is zero, avoid unnecessary operations */
; 303  :     if (len == 0)

  00007	33 db		 xor	 ebx, ebx
  00009	57		 push	 edi
  0000a	8b f8		 mov	 edi, eax
  0000c	39 5d 0c	 cmp	 DWORD PTR _len$[ebp], ebx
  0000f	75 08		 jne	 SHORT $LN20@gz_read

; 304  :         return 0;

  00011	5f		 pop	 edi
  00012	33 c0		 xor	 eax, eax
  00014	5b		 pop	 ebx

; 372  : }

  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
$LN20@gz_read:
  00019	56		 push	 esi

; 305  : 
; 306  :     /* process a skip request */
; 307  :     if (state->seek) {

  0001a	39 5f 58	 cmp	 DWORD PTR [edi+88], ebx
  0001d	74 1e		 je	 SHORT $LN28@gz_read

; 308  :         state->seek = 0;
; 309  :         if (gz_skip(state, state->skip) == -1)

  0001f	8b 47 54	 mov	 eax, DWORD PTR [edi+84]
  00022	8b 4f 50	 mov	 ecx, DWORD PTR [edi+80]
  00025	50		 push	 eax
  00026	51		 push	 ecx
  00027	8b f7		 mov	 esi, edi
  00029	89 5f 58	 mov	 DWORD PTR [edi+88], ebx
  0002c	e8 00 00 00 00	 call	 _gz_skip
  00031	83 c4 08	 add	 esp, 8
  00034	83 f8 ff	 cmp	 eax, -1

; 310  :             return 0;

  00037	0f 84 df 00 00
	00		 je	 $LN27@gz_read
$LN28@gz_read:

; 311  :     }
; 312  : 
; 313  :     /* get len bytes to buf, or less than len if at the end */
; 314  :     got = 0;

  0003d	89 5d f8	 mov	 DWORD PTR _got$[ebp], ebx
$LL17@gz_read:

; 315  :     do {
; 316  :         /* set n to the maximum amount of len that fits in an unsigned int */
; 317  :         n = -1;
; 318  :         if (n > len)

  00040	8b 75 0c	 mov	 esi, DWORD PTR _len$[ebp]
  00043	83 cb ff	 or	 ebx, -1
  00046	89 5d fc	 mov	 DWORD PTR _n$[ebp], ebx
  00049	83 fe ff	 cmp	 esi, -1
  0004c	73 05		 jae	 SHORT $LN14@gz_read

; 319  :             n = len;

  0004e	8b de		 mov	 ebx, esi
  00050	89 5d fc	 mov	 DWORD PTR _n$[ebp], ebx
$LN14@gz_read:

; 320  : 
; 321  :         /* first just try copying data from the output buffer */
; 322  :         if (state->x.have) {

  00053	8b 07		 mov	 eax, DWORD PTR [edi]
  00055	85 c0		 test	 eax, eax
  00057	74 1e		 je	 SHORT $LN13@gz_read

; 323  :             if (state->x.have < n)

  00059	3b c3		 cmp	 eax, ebx
  0005b	73 02		 jae	 SHORT $LN12@gz_read

; 324  :                 n = state->x.have;

  0005d	8b d8		 mov	 ebx, eax
$LN12@gz_read:

; 325  :             memcpy(buf, state->x.next, n);

  0005f	8b 57 04	 mov	 edx, DWORD PTR [edi+4]
  00062	8b 45 08	 mov	 eax, DWORD PTR _buf$[ebp]
  00065	53		 push	 ebx
  00066	52		 push	 edx
  00067	50		 push	 eax
  00068	e8 00 00 00 00	 call	 _memcpy

; 326  :             state->x.next += n;

  0006d	01 5f 04	 add	 DWORD PTR [edi+4], ebx
  00070	83 c4 0c	 add	 esp, 12			; 0000000cH

; 327  :             state->x.have -= n;

  00073	29 1f		 sub	 DWORD PTR [edi], ebx
  00075	eb 62		 jmp	 SHORT $LN2@gz_read
$LN13@gz_read:

; 328  :         }
; 329  : 
; 330  :         /* output buffer empty -- return if we're at the end of the input */
; 331  :         else if (state->eof && state->strm.avail_in == 0) {

  00077	83 7f 40 00	 cmp	 DWORD PTR [edi+64], 0
  0007b	74 0a		 je	 SHORT $LN10@gz_read
  0007d	83 7f 68 00	 cmp	 DWORD PTR [edi+104], 0
  00081	0f 84 84 00 00
	00		 je	 $LN24@gz_read
$LN10@gz_read:

; 332  :             state->past = 1;        /* tried to read past end */
; 333  :             break;
; 334  :         }
; 335  : 
; 336  :         /* need output data -- for small len or new stream load up our output
; 337  :            buffer */
; 338  :         else if (state->how == LOOK || n < (state->size << 1)) {

  00087	8b 47 30	 mov	 eax, DWORD PTR [edi+48]
  0008a	85 c0		 test	 eax, eax
  0008c	74 5f		 je	 SHORT $LN7@gz_read
  0008e	8b 4f 1c	 mov	 ecx, DWORD PTR [edi+28]
  00091	03 c9		 add	 ecx, ecx
  00093	3b d9		 cmp	 ebx, ecx
  00095	72 56		 jb	 SHORT $LN7@gz_read

; 342  :             continue;       /* no progress yet -- go back to copy above */
; 343  :             /* the copy above assures that we will leave with space in the
; 344  :                output buffer, allowing at least one gzungetc() to succeed */
; 345  :         }
; 346  : 
; 347  :         /* large len -- read directly into user buffer */
; 348  :         else if (state->how == COPY) {      /* read directly */

  00097	83 f8 01	 cmp	 eax, 1
  0009a	75 1e		 jne	 SHORT $LN4@gz_read

; 349  :             if (gz_load(state, (unsigned char *)buf, n, &n) == -1)

  0009c	8b 55 08	 mov	 edx, DWORD PTR _buf$[ebp]
  0009f	52		 push	 edx
  000a0	8d 75 fc	 lea	 esi, DWORD PTR _n$[ebp]
  000a3	8b c3		 mov	 eax, ebx
  000a5	e8 00 00 00 00	 call	 _gz_load
  000aa	83 c4 04	 add	 esp, 4
  000ad	83 f8 ff	 cmp	 eax, -1
  000b0	74 6a		 je	 SHORT $LN27@gz_read

; 350  :                 return 0;
; 351  :         }
; 352  : 
; 353  :         /* large len -- decompress directly into user buffer */
; 354  :         else {  /* state->how == GZIP */

  000b2	8b 5d fc	 mov	 ebx, DWORD PTR _n$[ebp]
  000b5	8b 75 0c	 mov	 esi, DWORD PTR _len$[ebp]
  000b8	eb 1f		 jmp	 SHORT $LN2@gz_read
$LN4@gz_read:

; 355  :             state->strm.avail_out = n;
; 356  :             state->strm.next_out = (unsigned char *)buf;

  000ba	8b 45 08	 mov	 eax, DWORD PTR _buf$[ebp]

; 357  :             if (gz_decomp(state) == -1)

  000bd	57		 push	 edi
  000be	89 5f 74	 mov	 DWORD PTR [edi+116], ebx
  000c1	89 47 70	 mov	 DWORD PTR [edi+112], eax
  000c4	e8 00 00 00 00	 call	 _gz_decomp
  000c9	83 c4 04	 add	 esp, 4
  000cc	83 f8 ff	 cmp	 eax, -1
  000cf	74 4b		 je	 SHORT $LN27@gz_read

; 358  :                 return 0;
; 359  :             n = state->x.have;

  000d1	8b 1f		 mov	 ebx, DWORD PTR [edi]

; 360  :             state->x.have = 0;

  000d3	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
$LN2@gz_read:

; 361  :         }
; 362  : 
; 363  :         /* update progress */
; 364  :         len -= n;
; 365  :         buf = (char *)buf + n;

  000d9	01 5d 08	 add	 DWORD PTR _buf$[ebp], ebx

; 366  :         got += n;

  000dc	01 5d f8	 add	 DWORD PTR _got$[ebp], ebx
  000df	2b f3		 sub	 esi, ebx

; 367  :         state->x.pos += n;

  000e1	01 5f 08	 add	 DWORD PTR [edi+8], ebx
  000e4	89 75 0c	 mov	 DWORD PTR _len$[ebp], esi
  000e7	83 57 0c 00	 adc	 DWORD PTR [edi+12], 0
  000eb	eb 0c		 jmp	 SHORT $LN16@gz_read
$LN7@gz_read:

; 339  :             /* get more output, looking for header if required */
; 340  :             if (gz_fetch(state) == -1)

  000ed	8b c7		 mov	 eax, edi
  000ef	e8 00 00 00 00	 call	 _gz_fetch
  000f4	83 f8 ff	 cmp	 eax, -1
  000f7	74 23		 je	 SHORT $LN27@gz_read
$LN16@gz_read:

; 368  :     } while (len);

  000f9	85 f6		 test	 esi, esi
  000fb	0f 85 3f ff ff
	ff		 jne	 $LL17@gz_read

; 369  : 
; 370  :     /* return number of bytes read into user buffer */
; 371  :     return got;

  00101	8b 45 f8	 mov	 eax, DWORD PTR _got$[ebp]
  00104	5e		 pop	 esi
  00105	5f		 pop	 edi
  00106	5b		 pop	 ebx

; 372  : }

  00107	8b e5		 mov	 esp, ebp
  00109	5d		 pop	 ebp
  0010a	c3		 ret	 0
$LN24@gz_read:

; 369  : 
; 370  :     /* return number of bytes read into user buffer */
; 371  :     return got;

  0010b	8b 45 f8	 mov	 eax, DWORD PTR _got$[ebp]
  0010e	5e		 pop	 esi
  0010f	c7 47 44 01 00
	00 00		 mov	 DWORD PTR [edi+68], 1
  00116	5f		 pop	 edi
  00117	5b		 pop	 ebx

; 372  : }

  00118	8b e5		 mov	 esp, ebp
  0011a	5d		 pop	 ebp
  0011b	c3		 ret	 0
$LN27@gz_read:
  0011c	5e		 pop	 esi
  0011d	5f		 pop	 edi

; 341  :                 return 0;

  0011e	33 c0		 xor	 eax, eax
  00120	5b		 pop	 ebx

; 372  : }

  00121	8b e5		 mov	 esp, ebp
  00123	5d		 pop	 ebp
  00124	c3		 ret	 0
_gz_read ENDP
PUBLIC	_gzgetc
; Function compile flags: /Ogtp
;	COMDAT _gzgetc
_TEXT	SEGMENT
_file$ = 8						; size = 4
_buf$ = 11						; size = 1
_gzgetc	PROC						; COMDAT

; 449  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 450  :     int ret;
; 451  :     unsigned char buf[1];
; 452  :     gz_statep state;
; 453  : 
; 454  :     /* get internal structure */
; 455  :     if (file == NULL)

  00003	8b 45 08	 mov	 eax, DWORD PTR _file$[ebp]
  00006	85 c0		 test	 eax, eax

; 456  :         return -1;

  00008	74 4d		 je	 SHORT $LN2@gzgetc

; 457  :     state = (gz_statep)file;
; 458  : 
; 459  :     /* check that we're reading and that there's no (serious) error */
; 460  :     if (state->mode != GZ_READ ||
; 461  :         (state->err != Z_OK && state->err != Z_BUF_ERROR))

  0000a	81 78 10 4f 1c
	00 00		 cmp	 DWORD PTR [eax+16], 7247 ; 00001c4fH
  00011	75 44		 jne	 SHORT $LN2@gzgetc
  00013	8b 48 5c	 mov	 ecx, DWORD PTR [eax+92]
  00016	85 c9		 test	 ecx, ecx
  00018	74 05		 je	 SHORT $LN3@gzgetc
  0001a	83 f9 fb	 cmp	 ecx, -5			; fffffffbH
  0001d	75 38		 jne	 SHORT $LN2@gzgetc
$LN3@gzgetc:

; 463  : 
; 464  :     /* try output buffer (no need to check for skip request) */
; 465  :     if (state->x.have) {

  0001f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00021	85 c9		 test	 ecx, ecx
  00023	74 19		 je	 SHORT $LN1@gzgetc

; 466  :         state->x.have--;

  00025	49		 dec	 ecx

; 467  :         state->x.pos++;

  00026	83 40 08 01	 add	 DWORD PTR [eax+8], 1
  0002a	89 08		 mov	 DWORD PTR [eax], ecx

; 468  :         return *(state->x.next)++;

  0002c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0002f	83 50 0c 00	 adc	 DWORD PTR [eax+12], 0
  00033	8a 11		 mov	 dl, BYTE PTR [ecx]
  00035	41		 inc	 ecx
  00036	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00039	0f b6 c2	 movzx	 eax, dl

; 474  : }

  0003c	5d		 pop	 ebp
  0003d	c3		 ret	 0
$LN1@gzgetc:

; 469  :     }
; 470  : 
; 471  :     /* nothing there -- try gz_read() */
; 472  :     ret = gz_read(state, buf, 1);

  0003e	8d 4d 0b	 lea	 ecx, DWORD PTR _buf$[ebp]
  00041	6a 01		 push	 1
  00043	51		 push	 ecx
  00044	e8 00 00 00 00	 call	 _gz_read
  00049	83 c4 08	 add	 esp, 8

; 473  :     return ret < 1 ? -1 : buf[0];

  0004c	83 f8 01	 cmp	 eax, 1
  0004f	7c 06		 jl	 SHORT $LN2@gzgetc
  00051	0f b6 45 0b	 movzx	 eax, BYTE PTR _buf$[ebp]

; 474  : }

  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
$LN2@gzgetc:

; 462  :         return -1;

  00057	83 c8 ff	 or	 eax, -1

; 474  : }

  0005a	5d		 pop	 ebp
  0005b	c3		 ret	 0
_gzgetc	ENDP
_TEXT	ENDS
PUBLIC	_gzfread
; Function compile flags: /Ogtp
;	COMDAT _gzfread
_TEXT	SEGMENT
_buf$ = 8						; size = 4
_size$ = 12						; size = 4
_nitems$ = 16						; size = 4
_file$ = 20						; size = 4
_gzfread PROC						; COMDAT

; 416  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 417  :     z_size_t len;
; 418  :     gz_statep state;
; 419  : 
; 420  :     /* get internal structure */
; 421  :     if (file == NULL)

  00003	8b 4d 14	 mov	 ecx, DWORD PTR _file$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	75 04		 jne	 SHORT $LN4@gzfread
$LN2@gzfread:

; 422  :         return 0;

  0000a	33 c0		 xor	 eax, eax

; 439  : }

  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
$LN4@gzfread:

; 423  :     state = (gz_statep)file;
; 424  : 
; 425  :     /* check that we're reading and that there's no (serious) error */
; 426  :     if (state->mode != GZ_READ ||
; 427  :             (state->err != Z_OK && state->err != Z_BUF_ERROR))

  0000e	81 79 10 4f 1c
	00 00		 cmp	 DWORD PTR [ecx+16], 7247 ; 00001c4fH
  00015	75 f3		 jne	 SHORT $LN2@gzfread
  00017	8b 41 5c	 mov	 eax, DWORD PTR [ecx+92]
  0001a	85 c0		 test	 eax, eax
  0001c	74 05		 je	 SHORT $LN3@gzfread
  0001e	83 f8 fb	 cmp	 eax, -5			; fffffffbH
  00021	75 e7		 jne	 SHORT $LN2@gzfread
$LN3@gzfread:
  00023	53		 push	 ebx

; 428  :         return 0;
; 429  : 
; 430  :     /* compute bytes to read -- error on overflow */
; 431  :     len = nitems * size;

  00024	8b 5d 10	 mov	 ebx, DWORD PTR _nitems$[ebp]
  00027	56		 push	 esi
  00028	57		 push	 edi
  00029	8b 7d 0c	 mov	 edi, DWORD PTR _size$[ebp]
  0002c	8b f7		 mov	 esi, edi
  0002e	0f af f3	 imul	 esi, ebx

; 432  :     if (size && len / size != nitems) {

  00031	85 ff		 test	 edi, edi
  00033	74 20		 je	 SHORT $LN9@gzfread
  00035	33 d2		 xor	 edx, edx
  00037	8b c6		 mov	 eax, esi
  00039	f7 f7		 div	 edi
  0003b	3b c3		 cmp	 eax, ebx
  0003d	74 16		 je	 SHORT $LN9@gzfread

; 433  :         gz_error(state, Z_STREAM_ERROR, "request does not fit in a size_t");

  0003f	bb 00 00 00 00	 mov	 ebx, OFFSET ??_C@_0CB@EGGJDMIK@request?5does?5not?5fit?5in?5a?5size_t@
  00044	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  00049	e8 00 00 00 00	 call	 _gz_error
$LN7@gzfread:

; 434  :         return 0;

  0004e	5f		 pop	 edi
  0004f	5e		 pop	 esi
  00050	33 c0		 xor	 eax, eax
  00052	5b		 pop	 ebx

; 439  : }

  00053	5d		 pop	 ebp
  00054	c3		 ret	 0
$LN9@gzfread:

; 435  :     }
; 436  : 
; 437  :     /* read len or fewer bytes to buf, return the number of full items read */
; 438  :     return len ? gz_read(state, buf, len) / size : 0;

  00055	85 f6		 test	 esi, esi
  00057	74 f5		 je	 SHORT $LN7@gzfread
  00059	8b 45 08	 mov	 eax, DWORD PTR _buf$[ebp]
  0005c	56		 push	 esi
  0005d	50		 push	 eax
  0005e	8b c1		 mov	 eax, ecx
  00060	e8 00 00 00 00	 call	 _gz_read
  00065	83 c4 08	 add	 esp, 8
  00068	33 d2		 xor	 edx, edx
  0006a	f7 f7		 div	 edi
  0006c	5f		 pop	 edi
  0006d	5e		 pop	 esi
  0006e	5b		 pop	 ebx

; 439  : }

  0006f	5d		 pop	 ebp
  00070	c3		 ret	 0
_gzfread ENDP
_TEXT	ENDS
PUBLIC	_gzread
; Function compile flags: /Ogtp
;	COMDAT _gzread
_TEXT	SEGMENT
_file$ = 8						; size = 4
_buf$ = 12						; size = 4
_len$ = 16						; size = 4
_gzread	PROC						; COMDAT

; 379  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 380  :     gz_statep state;
; 381  : 
; 382  :     /* get internal structure */
; 383  :     if (file == NULL)

  00004	8b 75 08	 mov	 esi, DWORD PTR _file$[ebp]
  00007	85 f6		 test	 esi, esi

; 384  :         return -1;

  00009	74 54		 je	 SHORT $LN3@gzread

; 385  :     state = (gz_statep)file;
; 386  : 
; 387  :     /* check that we're reading and that there's no (serious) error */
; 388  :     if (state->mode != GZ_READ ||
; 389  :             (state->err != Z_OK && state->err != Z_BUF_ERROR))

  0000b	81 7e 10 4f 1c
	00 00		 cmp	 DWORD PTR [esi+16], 7247 ; 00001c4fH
  00012	75 4b		 jne	 SHORT $LN3@gzread
  00014	8b 46 5c	 mov	 eax, DWORD PTR [esi+92]
  00017	85 c0		 test	 eax, eax
  00019	74 05		 je	 SHORT $LN4@gzread
  0001b	83 f8 fb	 cmp	 eax, -5			; fffffffbH
  0001e	75 3f		 jne	 SHORT $LN3@gzread
$LN4@gzread:

; 391  : 
; 392  :     /* since an int is returned, make sure len fits in one, otherwise return
; 393  :        with an error (this avoids a flaw in the interface) */
; 394  :     if ((int)len < 0) {

  00020	8b 45 10	 mov	 eax, DWORD PTR _len$[ebp]
  00023	85 c0		 test	 eax, eax
  00025	79 19		 jns	 SHORT $LN2@gzread

; 395  :         gz_error(state, Z_STREAM_ERROR, "request does not fit in an int");

  00027	53		 push	 ebx
  00028	bb 00 00 00 00	 mov	 ebx, OFFSET ??_C@_0BP@HLDABFKK@request?5does?5not?5fit?5in?5an?5int?$AA@
  0002d	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  00032	8b ce		 mov	 ecx, esi
  00034	e8 00 00 00 00	 call	 _gz_error
  00039	5b		 pop	 ebx
  0003a	83 c8 ff	 or	 eax, -1
  0003d	5e		 pop	 esi

; 408  : }

  0003e	5d		 pop	 ebp
  0003f	c3		 ret	 0
$LN2@gzread:

; 396  :         return -1;
; 397  :     }
; 398  : 
; 399  :     /* read len or fewer bytes to buf */
; 400  :     len = gz_read(state, buf, len);

  00040	50		 push	 eax
  00041	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  00044	50		 push	 eax
  00045	8b c6		 mov	 eax, esi
  00047	e8 00 00 00 00	 call	 _gz_read
  0004c	83 c4 08	 add	 esp, 8

; 401  : 
; 402  :     /* check for an error */
; 403  :     if (len == 0 && state->err != Z_OK && state->err != Z_BUF_ERROR)

  0004f	85 c0		 test	 eax, eax
  00051	75 0f		 jne	 SHORT $LN6@gzread
  00053	8b 76 5c	 mov	 esi, DWORD PTR [esi+92]
  00056	85 f6		 test	 esi, esi
  00058	74 08		 je	 SHORT $LN6@gzread
  0005a	83 fe fb	 cmp	 esi, -5			; fffffffbH

; 404  :         return -1;
; 405  : 
; 406  :     /* return the number of bytes read (this is assured to fit in an int) */
; 407  :     return (int)len;

  0005d	74 03		 je	 SHORT $LN6@gzread
$LN3@gzread:

; 390  :         return -1;

  0005f	83 c8 ff	 or	 eax, -1
$LN6@gzread:
  00062	5e		 pop	 esi

; 408  : }

  00063	5d		 pop	 ebp
  00064	c3		 ret	 0
_gzread	ENDP
_TEXT	ENDS
PUBLIC	_gzgetc_
; Function compile flags: /Ogtp
;	COMDAT _gzgetc_
_TEXT	SEGMENT
_file$ = 8						; size = 4
_gzgetc_ PROC						; COMDAT

; 478  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 480  : }

  00003	5d		 pop	 ebp

; 479  :     return gzgetc(file);

  00004	e9 00 00 00 00	 jmp	 _gzgetc
_gzgetc_ ENDP
_TEXT	ENDS
END
