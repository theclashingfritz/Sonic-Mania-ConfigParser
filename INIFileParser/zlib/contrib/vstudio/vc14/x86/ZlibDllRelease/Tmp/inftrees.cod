; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	C:\Users\theclashingfritz\source\repos\INIFileParser\zlib\inftrees.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	_inflate_copyright
_inflate_copyright DB ' inflate 1.2.11 Copyright 1995-2017 Mark Adler ', 00H
?lbase@?1??inflate_table@@9@9 DW 03H			; `inflate_table'::`2'::lbase
	DW	04H
	DW	05H
	DW	06H
	DW	07H
	DW	08H
	DW	09H
	DW	0aH
	DW	0bH
	DW	0dH
	DW	0fH
	DW	011H
	DW	013H
	DW	017H
	DW	01bH
	DW	01fH
	DW	023H
	DW	02bH
	DW	033H
	DW	03bH
	DW	043H
	DW	053H
	DW	063H
	DW	073H
	DW	083H
	DW	0a3H
	DW	0c3H
	DW	0e3H
	DW	0102H
	DW	00H
	DW	00H
	ORG $+2
?lext@?1??inflate_table@@9@9 DW 010H			; `inflate_table'::`2'::lext
	DW	010H
	DW	010H
	DW	010H
	DW	010H
	DW	010H
	DW	010H
	DW	010H
	DW	011H
	DW	011H
	DW	011H
	DW	011H
	DW	012H
	DW	012H
	DW	012H
	DW	012H
	DW	013H
	DW	013H
	DW	013H
	DW	013H
	DW	014H
	DW	014H
	DW	014H
	DW	014H
	DW	015H
	DW	015H
	DW	015H
	DW	015H
	DW	010H
	DW	04dH
	DW	0caH
	ORG $+6
?dbase@?1??inflate_table@@9@9 DW 01H			; `inflate_table'::`2'::dbase
	DW	02H
	DW	03H
	DW	04H
	DW	05H
	DW	07H
	DW	09H
	DW	0dH
	DW	011H
	DW	019H
	DW	021H
	DW	031H
	DW	041H
	DW	061H
	DW	081H
	DW	0c1H
	DW	0101H
	DW	0181H
	DW	0201H
	DW	0301H
	DW	0401H
	DW	0601H
	DW	0801H
	DW	0c01H
	DW	01001H
	DW	01801H
	DW	02001H
	DW	03001H
	DW	04001H
	DW	06001H
	DW	00H
	DW	00H
?dext@?1??inflate_table@@9@9 DW 010H			; `inflate_table'::`2'::dext
	DW	010H
	DW	010H
	DW	010H
	DW	011H
	DW	011H
	DW	012H
	DW	012H
	DW	013H
	DW	013H
	DW	014H
	DW	014H
	DW	015H
	DW	015H
	DW	016H
	DW	016H
	DW	017H
	DW	017H
	DW	018H
	DW	018H
	DW	019H
	DW	019H
	DW	01aH
	DW	01aH
	DW	01bH
	DW	01bH
	DW	01cH
	DW	01cH
	DW	01dH
	DW	01dH
	DW	040H
	DW	040H
PUBLIC	_inflate_table
; Function compile flags: /Ogtp
; File c:\users\theclashingfritz\source\repos\inifileparser\zlib\inftrees.c
;	COMDAT _inflate_table
_TEXT	SEGMENT
_offs$ = -124						; size = 32
_count$ = -92						; size = 32
tv646 = -60						; size = 4
_min$ = -56						; size = 4
_mask$ = -52						; size = 4
_low$ = -48						; size = 4
tv617 = -44						; size = 4
_used$ = -40						; size = 4
_base$ = -36						; size = 4
_extra$ = -32						; size = 4
_match$ = -28						; size = 4
_next$ = -24						; size = 4
_max$ = -20						; size = 4
tv1170 = -16						; size = 4
_huff$ = -12						; size = 4
_drop$ = -8						; size = 4
_root$ = -4						; size = 4
_type$ = 8						; size = 4
_lens$ = 12						; size = 4
_here$ = 16						; size = 4
_codes$ = 16						; size = 4
_table$ = 20						; size = 4
_bits$ = 24						; size = 4
_work$ = 28						; size = 4
_inflate_table PROC					; COMDAT

; 39   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 7c	 sub	 esp, 124		; 0000007cH
  00006	8b 55 10	 mov	 edx, DWORD PTR _codes$[ebp]

; 40   :     unsigned len;               /* a code's length in bits */
; 41   :     unsigned sym;               /* index of code symbols */
; 42   :     unsigned min, max;          /* minimum and maximum code lengths */
; 43   :     unsigned root;              /* number of index bits for root table */
; 44   :     unsigned curr;              /* number of index bits for current table */
; 45   :     unsigned drop;              /* code bits to drop for sub-table */
; 46   :     int left;                   /* number of prefix codes available */
; 47   :     unsigned used;              /* code entries in table used */
; 48   :     unsigned huff;              /* Huffman code */
; 49   :     unsigned incr;              /* for incrementing code, index */
; 50   :     unsigned fill;              /* index for replicating entries */
; 51   :     unsigned low;               /* low bits for current root entry */
; 52   :     unsigned mask;              /* mask for low root bits */
; 53   :     code here;                  /* table entry for duplication */
; 54   :     code FAR *next;             /* next available space in table */
; 55   :     const unsigned short FAR *base;     /* base value table to use */
; 56   :     const unsigned short FAR *extra;    /* extra bits table to use */
; 57   :     unsigned match;             /* use base and extra for symbol >= match */
; 58   :     unsigned short count[MAXBITS+1];    /* number of codes of each length */
; 59   :     unsigned short offs[MAXBITS+1];     /* offsets in table for each length */
; 60   :     static const unsigned short lbase[31] = { /* Length codes 257..285 base */
; 61   :         3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,
; 62   :         35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0};
; 63   :     static const unsigned short lext[31] = { /* Length codes 257..285 extra */
; 64   :         16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18,
; 65   :         19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 77, 202};
; 66   :     static const unsigned short dbase[32] = { /* Distance codes 0..29 base */
; 67   :         1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,
; 68   :         257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,
; 69   :         8193, 12289, 16385, 24577, 0, 0};
; 70   :     static const unsigned short dext[32] = { /* Distance codes 0..29 extra */
; 71   :         16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22,
; 72   :         23, 23, 24, 24, 25, 25, 26, 26, 27, 27,
; 73   :         28, 28, 29, 29, 64, 64};
; 74   : 
; 75   :     /*
; 76   :        Process a set of code lengths to create a canonical Huffman code.  The
; 77   :        code lengths are lens[0..codes-1].  Each length corresponds to the
; 78   :        symbols 0..codes-1.  The Huffman code is generated by first sorting the
; 79   :        symbols by length from short to long, and retaining the symbol order
; 80   :        for codes with equal lengths.  Then the code starts with all zero bits
; 81   :        for the first code of the shortest length, and the codes are integer
; 82   :        increments for the same length, and zeros are appended as the length
; 83   :        increases.  For the deflate format, these bits are stored backwards
; 84   :        from their more natural integer increment ordering, and so when the
; 85   :        decoding tables are built in the large loop below, the integer codes
; 86   :        are incremented backwards.
; 87   : 
; 88   :        This routine assumes, but does not check, that all of the entries in
; 89   :        lens[] are in the range 0..MAXBITS.  The caller must assure this.
; 90   :        1..MAXBITS is interpreted as that code length.  zero means that that
; 91   :        symbol does not occur in this code.
; 92   : 
; 93   :        The codes are sorted by computing a count of codes for each length,
; 94   :        creating from that a table of starting indices for each length in the
; 95   :        sorted table, and then entering the symbols in order in the sorted
; 96   :        table.  The sorted table is work[], with that space being provided by
; 97   :        the caller.
; 98   : 
; 99   :        The length counts are used for other purposes as well, i.e. finding
; 100  :        the minimum and maximum length codes, determining if there are any
; 101  :        codes at all, checking for a valid set of lengths, and looking ahead
; 102  :        at length counts to determine sub-table sizes when building the
; 103  :        decoding tables.
; 104  :      */
; 105  : 
; 106  :     /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */
; 107  :     for (len = 0; len <= MAXBITS; len++)
; 108  :         count[len] = 0;

  00009	33 c0		 xor	 eax, eax
  0000b	0f b7 c8	 movzx	 ecx, ax
  0000e	8b c1		 mov	 eax, ecx
  00010	c1 e1 10	 shl	 ecx, 16			; 00000010H
  00013	0b c1		 or	 eax, ecx
  00015	53		 push	 ebx
  00016	8b 5d 18	 mov	 ebx, DWORD PTR _bits$[ebp]
  00019	56		 push	 esi
  0001a	8b 75 14	 mov	 esi, DWORD PTR _table$[ebp]
  0001d	89 45 a4	 mov	 DWORD PTR _count$[ebp], eax
  00020	89 45 a8	 mov	 DWORD PTR _count$[ebp+4], eax
  00023	89 45 ac	 mov	 DWORD PTR _count$[ebp+8], eax
  00026	89 45 b0	 mov	 DWORD PTR _count$[ebp+12], eax
  00029	89 45 b4	 mov	 DWORD PTR _count$[ebp+16], eax
  0002c	89 45 b8	 mov	 DWORD PTR _count$[ebp+20], eax
  0002f	89 45 bc	 mov	 DWORD PTR _count$[ebp+24], eax
  00032	89 45 c0	 mov	 DWORD PTR _count$[ebp+28], eax

; 109  :     for (sym = 0; sym < codes; sym++)

  00035	33 c0		 xor	 eax, eax
  00037	57		 push	 edi
  00038	8b 7d 0c	 mov	 edi, DWORD PTR _lens$[ebp]
  0003b	85 d2		 test	 edx, edx
  0003d	74 13		 je	 SHORT $LN57@inflate_ta
  0003f	90		 npad	 1
$LL59@inflate_ta:

; 110  :         count[lens[sym]]++;

  00040	0f b7 0c 47	 movzx	 ecx, WORD PTR [edi+eax*2]
  00044	66 ff 44 4d a4	 inc	 WORD PTR _count$[ebp+ecx*2]
  00049	8d 4c 4d a4	 lea	 ecx, DWORD PTR _count$[ebp+ecx*2]
  0004d	40		 inc	 eax
  0004e	3b c2		 cmp	 eax, edx
  00050	72 ee		 jb	 SHORT $LL59@inflate_ta
$LN57@inflate_ta:

; 111  : 
; 112  :     /* bound code lengths, force root to be within code lengths */
; 113  :     root = *bits;

  00052	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  00054	89 4d fc	 mov	 DWORD PTR _root$[ebp], ecx

; 114  :     for (max = MAXBITS; max >= 1; max--)

  00057	b8 0f 00 00 00	 mov	 eax, 15			; 0000000fH
  0005c	8d 64 24 00	 npad	 4
$LL56@inflate_ta:

; 115  :         if (count[max] != 0) break;

  00060	66 83 7c 45 a4
	00		 cmp	 WORD PTR _count$[ebp+eax*2], 0
  00066	75 06		 jne	 SHORT $LN105@inflate_ta

; 114  :     for (max = MAXBITS; max >= 1; max--)

  00068	48		 dec	 eax
  00069	83 f8 01	 cmp	 eax, 1
  0006c	73 f2		 jae	 SHORT $LL56@inflate_ta
$LN105@inflate_ta:
  0006e	89 45 ec	 mov	 DWORD PTR _max$[ebp], eax

; 116  :     if (root > max) root = max;

  00071	3b c8		 cmp	 ecx, eax
  00073	76 05		 jbe	 SHORT $LN52@inflate_ta
  00075	89 45 fc	 mov	 DWORD PTR _root$[ebp], eax
  00078	8b c8		 mov	 ecx, eax
$LN52@inflate_ta:

; 117  :     if (max == 0) {                     /* no symbols to code at all */

  0007a	85 c0		 test	 eax, eax
  0007c	75 27		 jne	 SHORT $LN51@inflate_ta

; 118  :         here.op = (unsigned char)64;    /* invalid code marker */
; 119  :         here.bits = (unsigned char)1;
; 120  :         here.val = (unsigned short)0;
; 121  :         *(*table)++ = here;             /* make a table to force an error */

  0007e	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00080	c7 45 10 40 01
	00 00		 mov	 DWORD PTR _here$[ebp], 320 ; 00000140H
  00087	8b 45 10	 mov	 eax, DWORD PTR _here$[ebp]
  0008a	89 01		 mov	 DWORD PTR [ecx], eax
  0008c	83 06 04	 add	 DWORD PTR [esi], 4
  0008f	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 122  :         *(*table)++ = here;

  00091	89 01		 mov	 DWORD PTR [ecx], eax
  00093	83 06 04	 add	 DWORD PTR [esi], 4
  00096	5f		 pop	 edi
  00097	5e		 pop	 esi

; 123  :         *bits = 1;

  00098	c7 03 01 00 00
	00		 mov	 DWORD PTR [ebx], 1

; 124  :         return 0;     /* no symbols, but wait for decoding to report error */

  0009e	33 c0		 xor	 eax, eax
  000a0	5b		 pop	 ebx

; 304  : }

  000a1	8b e5		 mov	 esp, ebp
  000a3	5d		 pop	 ebp
  000a4	c3		 ret	 0
$LN51@inflate_ta:

; 125  :     }
; 126  :     for (min = 1; min < max; min++)

  000a5	bb 01 00 00 00	 mov	 ebx, 1
  000aa	3b c3		 cmp	 eax, ebx
  000ac	76 0f		 jbe	 SHORT $LN78@inflate_ta
  000ae	8b ff		 npad	 2
$LL50@inflate_ta:

; 127  :         if (count[min] != 0) break;

  000b0	66 83 7c 5d a4
	00		 cmp	 WORD PTR _count$[ebp+ebx*2], 0
  000b6	75 05		 jne	 SHORT $LN78@inflate_ta

; 125  :     }
; 126  :     for (min = 1; min < max; min++)

  000b8	43		 inc	 ebx
  000b9	3b d8		 cmp	 ebx, eax
  000bb	72 f3		 jb	 SHORT $LL50@inflate_ta
$LN78@inflate_ta:

; 128  :     if (root < min) root = min;

  000bd	3b cb		 cmp	 ecx, ebx
  000bf	73 03		 jae	 SHORT $LN46@inflate_ta
  000c1	89 5d fc	 mov	 DWORD PTR _root$[ebp], ebx
$LN46@inflate_ta:

; 129  : 
; 130  :     /* check for an over-subscribed or incomplete set of lengths */
; 131  :     left = 1;

  000c4	be 01 00 00 00	 mov	 esi, 1

; 132  :     for (len = 1; len <= MAXBITS; len++) {

  000c9	8b ce		 mov	 ecx, esi
  000cb	eb 03 8d 49 00	 npad	 5
$LL45@inflate_ta:

; 133  :         left <<= 1;
; 134  :         left -= count[len];

  000d0	0f b7 54 4d a4	 movzx	 edx, WORD PTR _count$[ebp+ecx*2]
  000d5	03 f6		 add	 esi, esi
  000d7	2b f2		 sub	 esi, edx

; 135  :         if (left < 0) return -1;        /* over-subscribed */

  000d9	0f 88 88 00 00
	00		 js	 $LN79@inflate_ta

; 132  :     for (len = 1; len <= MAXBITS; len++) {

  000df	41		 inc	 ecx
  000e0	83 f9 0f	 cmp	 ecx, 15			; 0000000fH
  000e3	76 eb		 jbe	 SHORT $LL45@inflate_ta

; 136  :     }
; 137  :     if (left > 0 && (type == CODES || max != 1))

  000e5	85 f6		 test	 esi, esi
  000e7	7e 0b		 jle	 SHORT $LN102@inflate_ta
  000e9	83 7d 08 00	 cmp	 DWORD PTR _type$[ebp], 0
  000ed	74 78		 je	 SHORT $LN79@inflate_ta
  000ef	83 f8 01	 cmp	 eax, 1

; 138  :         return -1;                      /* incomplete set */

  000f2	75 73		 jne	 SHORT $LN79@inflate_ta
$LN102@inflate_ta:

; 139  : 
; 140  :     /* generate offsets into symbol table for each length for sorting */
; 141  :     offs[1] = 0;

  000f4	33 c0		 xor	 eax, eax
  000f6	66 89 45 86	 mov	 WORD PTR _offs$[ebp+2], ax

; 142  :     for (len = 1; len < MAXBITS; len++)

  000fa	b8 02 00 00 00	 mov	 eax, 2
  000ff	90		 npad	 1
$LL39@inflate_ta:

; 143  :         offs[len + 1] = offs[len] + count[len];

  00100	66 8b 4c 05 84	 mov	 cx, WORD PTR _offs$[ebp+eax]
  00105	66 03 4c 05 a4	 add	 cx, WORD PTR _count$[ebp+eax]
  0010a	83 c0 02	 add	 eax, 2
  0010d	66 89 4c 05 84	 mov	 WORD PTR _offs$[ebp+eax], cx
  00112	83 f8 1e	 cmp	 eax, 30			; 0000001eH
  00115	72 e9		 jb	 SHORT $LL39@inflate_ta

; 144  : 
; 145  :     /* sort symbols by length, by symbol order within each length */
; 146  :     for (sym = 0; sym < codes; sym++)

  00117	8b 75 10	 mov	 esi, DWORD PTR _codes$[ebp]
  0011a	8b 55 1c	 mov	 edx, DWORD PTR _work$[ebp]
  0011d	33 c0		 xor	 eax, eax
  0011f	85 f6		 test	 esi, esi
  00121	74 26		 je	 SHORT $LN34@inflate_ta
$LL104@inflate_ta:

; 147  :         if (lens[sym] != 0) work[offs[lens[sym]]++] = (unsigned short)sym;

  00123	66 83 3c 47 00	 cmp	 WORD PTR [edi+eax*2], 0
  00128	74 1a		 je	 SHORT $LN35@inflate_ta
  0012a	0f b7 0c 47	 movzx	 ecx, WORD PTR [edi+eax*2]
  0012e	0f b7 4c 4d 84	 movzx	 ecx, WORD PTR _offs$[ebp+ecx*2]
  00133	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  00137	0f b7 0c 47	 movzx	 ecx, WORD PTR [edi+eax*2]
  0013b	66 ff 44 4d 84	 inc	 WORD PTR _offs$[ebp+ecx*2]
  00140	8d 4c 4d 84	 lea	 ecx, DWORD PTR _offs$[ebp+ecx*2]
$LN35@inflate_ta:

; 144  : 
; 145  :     /* sort symbols by length, by symbol order within each length */
; 146  :     for (sym = 0; sym < codes; sym++)

  00144	40		 inc	 eax
  00145	3b c6		 cmp	 eax, esi
  00147	72 da		 jb	 SHORT $LL104@inflate_ta
$LN34@inflate_ta:

; 148  : 
; 149  :     /*
; 150  :        Create and fill in decoding tables.  In this loop, the table being
; 151  :        filled is at next and has curr index bits.  The code being used is huff
; 152  :        with length len.  That code is converted to an index by dropping drop
; 153  :        bits off of the bottom.  For codes where len is less than drop + curr,
; 154  :        those top drop + curr - len bits are incremented through all values to
; 155  :        fill the table with replicated entries.
; 156  : 
; 157  :        root is the number of index bits for the root table.  When len exceeds
; 158  :        root, sub-tables are created pointed to by the root entry with an index
; 159  :        of the low root bits of huff.  This is saved in low to check for when a
; 160  :        new sub-table should be started.  drop is zero when the root table is
; 161  :        being filled, and drop is root when sub-tables are being filled.
; 162  : 
; 163  :        When a new sub-table is needed, it is necessary to look ahead in the
; 164  :        code lengths to determine what size sub-table is needed.  The length
; 165  :        counts are used for this, and so count[] is decremented as codes are
; 166  :        entered in the tables.
; 167  : 
; 168  :        used keeps track of how many table entries have been allocated from the
; 169  :        provided *table space.  It is checked for LENS and DIST tables against
; 170  :        the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in
; 171  :        the initial root table size constants.  See the comments in inftrees.h
; 172  :        for more information.
; 173  : 
; 174  :        sym increments through all symbols, and the loop terminates when
; 175  :        all codes of length max, i.e. all codes, have been processed.  This
; 176  :        routine permits incomplete codes, so another loop after this one fills
; 177  :        in the rest of the decoding tables with invalid code markers.
; 178  :      */
; 179  : 
; 180  :     /* set up for code type */
; 181  :     switch (type) {

  00149	8b 45 08	 mov	 eax, DWORD PTR _type$[ebp]
  0014c	33 c9		 xor	 ecx, ecx
  0014e	2b c1		 sub	 eax, ecx
  00150	74 34		 je	 SHORT $LN30@inflate_ta
  00152	48		 dec	 eax
  00153	74 1c		 je	 SHORT $LN29@inflate_ta

; 191  :     default:    /* DISTS */
; 192  :         base = dbase;

  00155	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _base$[ebp], OFFSET ?dbase@?1??inflate_table@@9@9

; 193  :         extra = dext;

  0015c	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _extra$[ebp], OFFSET ?dext@?1??inflate_table@@9@9

; 194  :         match = 0;

  00163	33 f6		 xor	 esi, esi
  00165	eb 2a		 jmp	 SHORT $LN110@inflate_ta
$LN79@inflate_ta:
  00167	5f		 pop	 edi
  00168	5e		 pop	 esi

; 135  :         if (left < 0) return -1;        /* over-subscribed */

  00169	83 c8 ff	 or	 eax, -1
  0016c	5b		 pop	 ebx

; 304  : }

  0016d	8b e5		 mov	 esp, ebp
  0016f	5d		 pop	 ebp
  00170	c3		 ret	 0
$LN29@inflate_ta:

; 185  :         break;
; 186  :     case LENS:
; 187  :         base = lbase;

  00171	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _base$[ebp], OFFSET ?lbase@?1??inflate_table@@9@9

; 188  :         extra = lext;

  00178	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _extra$[ebp], OFFSET ?lext@?1??inflate_table@@9@9

; 189  :         match = 257;

  0017f	be 01 01 00 00	 mov	 esi, 257		; 00000101H

; 190  :         break;

  00184	eb 0b		 jmp	 SHORT $LN110@inflate_ta
$LN30@inflate_ta:

; 182  :     case CODES:
; 183  :         base = extra = work;    /* dummy value--not used */

  00186	89 55 e0	 mov	 DWORD PTR _extra$[ebp], edx
  00189	89 55 dc	 mov	 DWORD PTR _base$[ebp], edx

; 184  :         match = 20;

  0018c	be 14 00 00 00	 mov	 esi, 20			; 00000014H
$LN110@inflate_ta:

; 195  :     }
; 196  : 
; 197  :     /* initialize state for loop */
; 198  :     huff = 0;                   /* starting code */
; 199  :     sym = 0;                    /* starting code symbol */
; 200  :     len = min;                  /* starting code length */
; 201  :     next = *table;              /* current table to fill in */

  00191	8b 45 14	 mov	 eax, DWORD PTR _table$[ebp]
  00194	8b 00		 mov	 eax, DWORD PTR [eax]
  00196	89 4d f4	 mov	 DWORD PTR _huff$[ebp], ecx

; 202  :     curr = root;                /* current table index bits */
; 203  :     drop = 0;                   /* current bits to drop from code for index */

  00199	89 4d f8	 mov	 DWORD PTR _drop$[ebp], ecx

; 204  :     low = (unsigned)(-1);       /* trigger new sub-table when len > root */
; 205  :     used = 1U << root;          /* use root table entries */

  0019c	8b 4d fc	 mov	 ecx, DWORD PTR _root$[ebp]
  0019f	89 45 e8	 mov	 DWORD PTR _next$[ebp], eax
  001a2	b8 01 00 00 00	 mov	 eax, 1
  001a7	d3 e0		 shl	 eax, cl
  001a9	89 75 e4	 mov	 DWORD PTR _match$[ebp], esi
  001ac	c7 45 d0 ff ff
	ff ff		 mov	 DWORD PTR _low$[ebp], -1

; 206  :     mask = used - 1;            /* mask for comparing low */

  001b3	8d 48 ff	 lea	 ecx, DWORD PTR [eax-1]
  001b6	89 4d cc	 mov	 DWORD PTR _mask$[ebp], ecx

; 207  : 
; 208  :     /* check available table space */
; 209  :     if ((type == LENS && used > ENOUGH_LENS) ||
; 210  :         (type == DISTS && used > ENOUGH_DISTS))

  001b9	8b 4d 08	 mov	 ecx, DWORD PTR _type$[ebp]
  001bc	8b f8		 mov	 edi, eax
  001be	89 7d d4	 mov	 DWORD PTR tv617[ebp], edi
  001c1	89 45 d8	 mov	 DWORD PTR _used$[ebp], eax
  001c4	83 f9 01	 cmp	 ecx, 1
  001c7	75 07		 jne	 SHORT $LN25@inflate_ta
  001c9	3d 54 03 00 00	 cmp	 eax, 852		; 00000354H
  001ce	eb 0a		 jmp	 SHORT $LN114@inflate_ta
$LN25@inflate_ta:
  001d0	83 f9 02	 cmp	 ecx, 2
  001d3	75 0b		 jne	 SHORT $LN95@inflate_ta
  001d5	3d 50 02 00 00	 cmp	 eax, 592		; 00000250H
$LN114@inflate_ta:

; 211  :         return 1;

  001da	0f 87 e1 01 00
	00		 ja	 $LN3@inflate_ta
$LN95@inflate_ta:

; 212  : 
; 213  :     /* process all codes and make table entries */
; 214  :     for (;;) {
; 215  :         /* create table entry */
; 216  :         here.bits = (unsigned char)(len - drop);

  001e0	89 55 f0	 mov	 DWORD PTR tv1170[ebp], edx

; 287  :         }
; 288  :     }

  001e3	eb 0b		 jmp	 SHORT $LL24@inflate_ta
$LL99@inflate_ta:
  001e5	8b 7d d4	 mov	 edi, DWORD PTR tv617[ebp]
$LN113@inflate_ta:
  001e8	8b 75 e4	 mov	 esi, DWORD PTR _match$[ebp]
  001eb	eb 03 8d 49 00	 npad	 5
$LL24@inflate_ta:

; 217  :         if (work[sym] + 1U < match) {

  001f0	8b 45 f0	 mov	 eax, DWORD PTR tv1170[ebp]
  001f3	0f b7 00	 movzx	 eax, WORD PTR [eax]
  001f6	8a d3		 mov	 dl, bl
  001f8	2a 55 f8	 sub	 dl, BYTE PTR _drop$[ebp]
  001fb	8b c8		 mov	 ecx, eax
  001fd	88 55 11	 mov	 BYTE PTR _here$[ebp+1], dl
  00200	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
  00203	3b d6		 cmp	 edx, esi
  00205	73 06		 jae	 SHORT $LN22@inflate_ta

; 218  :             here.op = (unsigned char)0;

  00207	c6 45 10 00	 mov	 BYTE PTR _here$[ebp], 0

; 219  :             here.val = work[sym];

  0020b	eb 2a		 jmp	 SHORT $LN111@inflate_ta
$LN22@inflate_ta:

; 220  :         }
; 221  :         else if (work[sym] >= match) {

  0020d	3b ce		 cmp	 ecx, esi
  0020f	72 20		 jb	 SHORT $LN20@inflate_ta

; 222  :             here.op = (unsigned char)(extra[work[sym] - match]);

  00211	8b 45 f0	 mov	 eax, DWORD PTR tv1170[ebp]
  00214	0f b7 00	 movzx	 eax, WORD PTR [eax]
  00217	8b 4d e0	 mov	 ecx, DWORD PTR _extra$[ebp]
  0021a	2b c6		 sub	 eax, esi
  0021c	03 c0		 add	 eax, eax
  0021e	8a 14 08	 mov	 dl, BYTE PTR [eax+ecx]

; 223  :             here.val = base[work[sym] - match];

  00221	8b 4d dc	 mov	 ecx, DWORD PTR _base$[ebp]
  00224	88 55 10	 mov	 BYTE PTR _here$[ebp], dl
  00227	66 8b 14 08	 mov	 dx, WORD PTR [eax+ecx]
  0022b	66 89 55 12	 mov	 WORD PTR _here$[ebp+2], dx

; 224  :         }
; 225  :         else {

  0022f	eb 0a		 jmp	 SHORT $LN19@inflate_ta
$LN20@inflate_ta:

; 226  :             here.op = (unsigned char)(32 + 64);         /* end of block */

  00231	c6 45 10 60	 mov	 BYTE PTR _here$[ebp], 96 ; 00000060H

; 227  :             here.val = 0;

  00235	33 c0		 xor	 eax, eax
$LN111@inflate_ta:
  00237	66 89 45 12	 mov	 WORD PTR _here$[ebp+2], ax
$LN19@inflate_ta:

; 228  :         }
; 229  : 
; 230  :         /* replicate for those indices with low len bits equal to huff */
; 231  :         incr = 1U << (len - drop);

  0023b	8b cb		 mov	 ecx, ebx
  0023d	2b 4d f8	 sub	 ecx, DWORD PTR _drop$[ebp]

; 232  :         fill = 1U << curr;

  00240	8b c7		 mov	 eax, edi
  00242	8b 7d f4	 mov	 edi, DWORD PTR _huff$[ebp]
  00245	ba 01 00 00 00	 mov	 edx, 1
  0024a	d3 e2		 shl	 edx, cl
  0024c	8b 4d f8	 mov	 ecx, DWORD PTR _drop$[ebp]
  0024f	d3 ef		 shr	 edi, cl
  00251	8b 4d e8	 mov	 ecx, DWORD PTR _next$[ebp]

; 233  :         min = fill;                 /* save offset to next table */

  00254	89 45 c8	 mov	 DWORD PTR _min$[ebp], eax
  00257	8d 34 95 00 00
	00 00		 lea	 esi, DWORD PTR [edx*4]
  0025e	03 f8		 add	 edi, eax
  00260	8d 0c b9	 lea	 ecx, DWORD PTR [ecx+edi*4]
  00263	8b 7d 10	 mov	 edi, DWORD PTR _here$[ebp]
$LL18@inflate_ta:

; 234  :         do {
; 235  :             fill -= incr;

  00266	2b ce		 sub	 ecx, esi
  00268	2b c2		 sub	 eax, edx

; 236  :             next[(huff >> drop) + fill] = here;

  0026a	89 39		 mov	 DWORD PTR [ecx], edi

; 237  :         } while (fill != 0);

  0026c	75 f8		 jne	 SHORT $LL18@inflate_ta

; 238  : 
; 239  :         /* backwards increment the len-bit code huff */
; 240  :         incr = 1U << (len - 1);

  0026e	8d 4b ff	 lea	 ecx, DWORD PTR [ebx-1]
  00271	b8 01 00 00 00	 mov	 eax, 1
  00276	d3 e0		 shl	 eax, cl

; 241  :         while (huff & incr)

  00278	8b 4d f4	 mov	 ecx, DWORD PTR _huff$[ebp]
  0027b	85 c1		 test	 eax, ecx
  0027d	74 07		 je	 SHORT $LN14@inflate_ta
  0027f	90		 npad	 1
$LL15@inflate_ta:

; 242  :             incr >>= 1;

  00280	d1 e8		 shr	 eax, 1
  00282	85 c1		 test	 eax, ecx
  00284	75 fa		 jne	 SHORT $LL15@inflate_ta
$LN14@inflate_ta:

; 243  :         if (incr != 0) {

  00286	85 c0		 test	 eax, eax
  00288	74 0c		 je	 SHORT $LN13@inflate_ta

; 244  :             huff &= incr - 1;

  0028a	8d 50 ff	 lea	 edx, DWORD PTR [eax-1]
  0028d	23 d1		 and	 edx, ecx

; 245  :             huff += incr;

  0028f	03 d0		 add	 edx, eax
  00291	89 55 f4	 mov	 DWORD PTR _huff$[ebp], edx

; 246  :         }
; 247  :         else

  00294	eb 07		 jmp	 SHORT $LN12@inflate_ta
$LN13@inflate_ta:

; 248  :             huff = 0;

  00296	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _huff$[ebp], 0
$LN12@inflate_ta:

; 249  : 
; 250  :         /* go to next symbol, update count, len */
; 251  :         sym++;

  0029d	83 45 f0 02	 add	 DWORD PTR tv1170[ebp], 2

; 252  :         if (--(count[len]) == 0) {

  002a1	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH
  002a6	66 01 44 5d a4	 add	 WORD PTR _count$[ebp+ebx*2], ax
  002ab	75 16		 jne	 SHORT $LN100@inflate_ta

; 253  :             if (len == max) break;

  002ad	3b 5d ec	 cmp	 ebx, DWORD PTR _max$[ebp]
  002b0	0f 84 cb 00 00
	00		 je	 $LN81@inflate_ta

; 254  :             len = lens[work[sym]];

  002b6	8b 4d f0	 mov	 ecx, DWORD PTR tv1170[ebp]
  002b9	0f b7 11	 movzx	 edx, WORD PTR [ecx]
  002bc	8b 45 0c	 mov	 eax, DWORD PTR _lens$[ebp]
  002bf	0f b7 1c 50	 movzx	 ebx, WORD PTR [eax+edx*2]
$LN100@inflate_ta:

; 255  :         }
; 256  : 
; 257  :         /* create new sub-table if needed */
; 258  :         if (len > root && (huff & mask) != low) {

  002c3	3b 5d fc	 cmp	 ebx, DWORD PTR _root$[ebp]
  002c6	0f 86 19 ff ff
	ff		 jbe	 $LL99@inflate_ta
  002cc	8b 75 cc	 mov	 esi, DWORD PTR _mask$[ebp]
  002cf	23 75 f4	 and	 esi, DWORD PTR _huff$[ebp]
  002d2	89 75 c4	 mov	 DWORD PTR tv646[ebp], esi
  002d5	3b 75 d0	 cmp	 esi, DWORD PTR _low$[ebp]
  002d8	0f 84 07 ff ff
	ff		 je	 $LL99@inflate_ta

; 259  :             /* if first time, transition to sub-tables */
; 260  :             if (drop == 0)

  002de	8b 55 f8	 mov	 edx, DWORD PTR _drop$[ebp]
  002e1	85 d2		 test	 edx, edx
  002e3	75 08		 jne	 SHORT $LN8@inflate_ta

; 261  :                 drop = root;

  002e5	8b 4d fc	 mov	 ecx, DWORD PTR _root$[ebp]
  002e8	89 4d f8	 mov	 DWORD PTR _drop$[ebp], ecx
  002eb	8b d1		 mov	 edx, ecx
$LN8@inflate_ta:

; 262  : 
; 263  :             /* increment past last table */
; 264  :             next += min;            /* here min is 1 << curr */

  002ed	8b 45 e8	 mov	 eax, DWORD PTR _next$[ebp]
  002f0	8b 4d c8	 mov	 ecx, DWORD PTR _min$[ebp]
  002f3	8d 04 88	 lea	 eax, DWORD PTR [eax+ecx*4]

; 265  : 
; 266  :             /* determine length of next table */
; 267  :             curr = len - drop;

  002f6	8b cb		 mov	 ecx, ebx
  002f8	2b ca		 sub	 ecx, edx
  002fa	89 45 e8	 mov	 DWORD PTR _next$[ebp], eax

; 268  :             left = (int)(1 << curr);

  002fd	b8 01 00 00 00	 mov	 eax, 1

; 269  :             while (curr + drop < max) {

  00302	03 d1		 add	 edx, ecx
  00304	d3 e0		 shl	 eax, cl
  00306	3b 55 ec	 cmp	 edx, DWORD PTR _max$[ebp]
  00309	73 1d		 jae	 SHORT $LN80@inflate_ta

; 262  : 
; 263  :             /* increment past last table */
; 264  :             next += min;            /* here min is 1 << curr */

  0030b	8d 74 55 a4	 lea	 esi, DWORD PTR _count$[ebp+edx*2]
  0030f	90		 npad	 1
$LL7@inflate_ta:

; 270  :                 left -= count[curr + drop];

  00310	0f b7 3e	 movzx	 edi, WORD PTR [esi]
  00313	2b c7		 sub	 eax, edi

; 271  :                 if (left <= 0) break;

  00315	85 c0		 test	 eax, eax
  00317	7e 0c		 jle	 SHORT $LN101@inflate_ta

; 272  :                 curr++;

  00319	42		 inc	 edx
  0031a	41		 inc	 ecx
  0031b	83 c6 02	 add	 esi, 2

; 273  :                 left <<= 1;

  0031e	03 c0		 add	 eax, eax
  00320	3b 55 ec	 cmp	 edx, DWORD PTR _max$[ebp]
  00323	72 eb		 jb	 SHORT $LL7@inflate_ta
$LN101@inflate_ta:

; 269  :             while (curr + drop < max) {

  00325	8b 75 c4	 mov	 esi, DWORD PTR tv646[ebp]
$LN80@inflate_ta:

; 274  :             }
; 275  : 
; 276  :             /* check for enough space */
; 277  :             used += 1U << curr;

  00328	8b 55 d8	 mov	 edx, DWORD PTR _used$[ebp]

; 278  :             if ((type == LENS && used > ENOUGH_LENS) ||
; 279  :                 (type == DISTS && used > ENOUGH_DISTS))

  0032b	8b 45 08	 mov	 eax, DWORD PTR _type$[ebp]
  0032e	bf 01 00 00 00	 mov	 edi, 1
  00333	d3 e7		 shl	 edi, cl
  00335	03 d7		 add	 edx, edi
  00337	89 7d d4	 mov	 DWORD PTR tv617[ebp], edi
  0033a	89 55 d8	 mov	 DWORD PTR _used$[ebp], edx
  0033d	83 f8 01	 cmp	 eax, 1
  00340	75 08		 jne	 SHORT $LN2@inflate_ta
  00342	81 fa 54 03 00
	00		 cmp	 edx, 852		; 00000354H
  00348	eb 0b		 jmp	 SHORT $LN112@inflate_ta
$LN2@inflate_ta:
  0034a	83 f8 02	 cmp	 eax, 2
  0034d	75 08		 jne	 SHORT $LN4@inflate_ta
  0034f	81 fa 50 02 00
	00		 cmp	 edx, 592		; 00000250H
$LN112@inflate_ta:
  00355	77 6a		 ja	 SHORT $LN3@inflate_ta
$LN4@inflate_ta:

; 281  : 
; 282  :             /* point entry in root table to sub-table */
; 283  :             low = huff & mask;

  00357	8b d6		 mov	 edx, esi

; 284  :             (*table)[low].op = (unsigned char)curr;

  00359	8b 75 14	 mov	 esi, DWORD PTR _table$[ebp]
  0035c	8b 06		 mov	 eax, DWORD PTR [esi]
  0035e	88 0c 90	 mov	 BYTE PTR [eax+edx*4], cl

; 285  :             (*table)[low].bits = (unsigned char)root;

  00361	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00363	8a 45 fc	 mov	 al, BYTE PTR _root$[ebp]
  00366	88 44 91 01	 mov	 BYTE PTR [ecx+edx*4+1], al

; 286  :             (*table)[low].val = (unsigned short)(next - *table);

  0036a	8b 06		 mov	 eax, DWORD PTR [esi]
  0036c	8b 4d e8	 mov	 ecx, DWORD PTR _next$[ebp]
  0036f	2b c8		 sub	 ecx, eax
  00371	c1 f9 02	 sar	 ecx, 2
  00374	89 55 d0	 mov	 DWORD PTR _low$[ebp], edx
  00377	66 89 4c 90 02	 mov	 WORD PTR [eax+edx*4+2], cx

; 287  :         }
; 288  :     }

  0037c	e9 67 fe ff ff	 jmp	 $LN113@inflate_ta
$LN81@inflate_ta:

; 289  : 
; 290  :     /* fill in remaining table entry if code is incomplete (guaranteed to have
; 291  :        at most one remaining entry, since if the code is incomplete, the
; 292  :        maximum code length that was allowed to get this far is one bit) */
; 293  :     if (huff != 0) {

  00381	8b 45 f4	 mov	 eax, DWORD PTR _huff$[ebp]
  00384	85 c0		 test	 eax, eax
  00386	74 19		 je	 SHORT $LN1@inflate_ta

; 294  :         here.op = (unsigned char)64;            /* invalid code marker */
; 295  :         here.bits = (unsigned char)(len - drop);

  00388	2a 5d f8	 sub	 bl, BYTE PTR _drop$[ebp]

; 296  :         here.val = (unsigned short)0;

  0038b	33 d2		 xor	 edx, edx
  0038d	66 89 55 12	 mov	 WORD PTR _here$[ebp+2], dx

; 297  :         next[huff] = here;

  00391	8b 55 e8	 mov	 edx, DWORD PTR _next$[ebp]
  00394	c6 45 10 40	 mov	 BYTE PTR _here$[ebp], 64 ; 00000040H
  00398	88 5d 11	 mov	 BYTE PTR _here$[ebp+1], bl
  0039b	8b 4d 10	 mov	 ecx, DWORD PTR _here$[ebp]
  0039e	89 0c 82	 mov	 DWORD PTR [edx+eax*4], ecx
$LN1@inflate_ta:

; 298  :     }
; 299  : 
; 300  :     /* set return parameters */
; 301  :     *table += used;

  003a1	8b 45 d8	 mov	 eax, DWORD PTR _used$[ebp]

; 302  :     *bits = root;

  003a4	8b 55 fc	 mov	 edx, DWORD PTR _root$[ebp]
  003a7	8d 0c 85 00 00
	00 00		 lea	 ecx, DWORD PTR [eax*4]
  003ae	8b 45 14	 mov	 eax, DWORD PTR _table$[ebp]
  003b1	01 08		 add	 DWORD PTR [eax], ecx
  003b3	8b 45 18	 mov	 eax, DWORD PTR _bits$[ebp]
  003b6	5f		 pop	 edi
  003b7	5e		 pop	 esi
  003b8	89 10		 mov	 DWORD PTR [eax], edx

; 303  :     return 0;

  003ba	33 c0		 xor	 eax, eax
  003bc	5b		 pop	 ebx

; 304  : }

  003bd	8b e5		 mov	 esp, ebp
  003bf	5d		 pop	 ebp
  003c0	c3		 ret	 0
$LN3@inflate_ta:
  003c1	5f		 pop	 edi
  003c2	5e		 pop	 esi

; 280  :                 return 1;

  003c3	b8 01 00 00 00	 mov	 eax, 1
  003c8	5b		 pop	 ebx

; 304  : }

  003c9	8b e5		 mov	 esp, ebp
  003cb	5d		 pop	 ebp
  003cc	c3		 ret	 0
_inflate_table ENDP
END
