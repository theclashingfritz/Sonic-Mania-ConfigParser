; Listing generated by Microsoft (R) Optimizing Compiler Version 19.11.25508.2 

	TITLE	c:\users\theclashingfritz\source\repos\inifileparser\zlib\gzwrite.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	??_C@_0CH@DEEGAHIB@internal?5error?3?5deflate?5stream?5c@ ; `string'
PUBLIC	??_C@_0CF@MLPJFDMM@requested?5length?5does?5not?5fit?5in@ ; `string'
EXTRN	__imp__write:PROC
;	COMDAT ??_C@_0CF@MLPJFDMM@requested?5length?5does?5not?5fit?5in@
CONST	SEGMENT
??_C@_0CF@MLPJFDMM@requested?5length?5does?5not?5fit?5in@ DB 'requested l'
	DB	'ength does not fit in int', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@DEEGAHIB@internal?5error?3?5deflate?5stream?5c@
CONST	SEGMENT
??_C@_0CH@DEEGAHIB@internal?5error?3?5deflate?5stream?5c@ DB 'internal er'
	DB	'ror: deflate stream corrupt', 00H		; `string'
PUBLIC	_gzsetparams
PUBLIC	_gzflush
PUBLIC	_gzprintf
PUBLIC	_gzvprintf
PUBLIC	_gzputs
PUBLIC	_gzputc
PUBLIC	_gzfwrite
PUBLIC	_gzwrite
PUBLIC	_gzclose_w
; Function compile flags: /Ogtp
; File c:\users\theclashingfritz\source\repos\inifileparser\zlib\gzwrite.c
;	COMDAT _gzclose_w
_TEXT	SEGMENT
_file$ = 8						; size = 4
_gzclose_w PROC						; COMDAT

; 629  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	51		 push	 ecx
  00007	53		 push	 ebx
  00008	56		 push	 esi

; 630  :     int ret = Z_OK;
; 631  :     gz_statep state;
; 632  : 
; 633  :     /* get internal structure */
; 634  :     if (file == NULL)

  00009	8b 75 08	 mov	 esi, DWORD PTR _file$[ebp]
  0000c	57		 push	 edi
  0000d	33 ff		 xor	 edi, edi
  0000f	85 f6		 test	 esi, esi
  00011	75 0c		 jne	 SHORT $LN2@gzclose_w
$LN11@gzclose_w:

; 635  :         return Z_STREAM_ERROR;

  00013	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH

; 665  : }

  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
$LN2@gzclose_w:

; 636  :     state = (gz_statep)file;
; 637  : 
; 638  :     /* check that we're writing */
; 639  :     if (state->mode != GZ_WRITE)

  0001f	81 7e 10 b1 79
	00 00		 cmp	 DWORD PTR [esi+16], 31153 ; 000079b1H
  00026	75 eb		 jne	 SHORT $LN11@gzclose_w

; 640  :         return Z_STREAM_ERROR;
; 641  : 
; 642  :     /* check for seek request */
; 643  :     if (state->seek) {

  00028	39 7e 58	 cmp	 DWORD PTR [esi+88], edi
  0002b	74 1b		 je	 SHORT $LN5@gzclose_w

; 644  :         state->seek = 0;
; 645  :         if (gz_zero(state, state->skip) == -1)

  0002d	ff 76 54	 push	 DWORD PTR [esi+84]
  00030	8b ce		 mov	 ecx, esi
  00032	89 7e 58	 mov	 DWORD PTR [esi+88], edi
  00035	ff 76 50	 push	 DWORD PTR [esi+80]
  00038	e8 00 00 00 00	 call	 _gz_zero
  0003d	83 c4 08	 add	 esp, 8
  00040	83 f8 ff	 cmp	 eax, -1
  00043	75 03		 jne	 SHORT $LN5@gzclose_w

; 646  :             ret = state->err;

  00045	8b 7e 5c	 mov	 edi, DWORD PTR [esi+92]
$LN5@gzclose_w:

; 647  :     }
; 648  : 
; 649  :     /* flush, free memory, and close file */
; 650  :     if (gz_comp(state, Z_FINISH) == -1)

  00048	ba 04 00 00 00	 mov	 edx, 4
  0004d	8b ce		 mov	 ecx, esi
  0004f	e8 00 00 00 00	 call	 _gz_comp
  00054	83 f8 ff	 cmp	 eax, -1
  00057	75 03		 jne	 SHORT $LN6@gzclose_w

; 651  :         ret = state->err;

  00059	8b 7e 5c	 mov	 edi, DWORD PTR [esi+92]
$LN6@gzclose_w:

; 652  :     if (state->size) {

  0005c	83 7e 1c 00	 cmp	 DWORD PTR [esi+28], 0
  00060	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__free
  00066	74 22		 je	 SHORT $LN7@gzclose_w

; 653  :         if (!state->direct) {

  00068	83 7e 2c 00	 cmp	 DWORD PTR [esi+44], 0
  0006c	75 14		 jne	 SHORT $LN8@gzclose_w

; 654  :             (void)deflateEnd(&(state->strm));

  0006e	8d 46 64	 lea	 eax, DWORD PTR [esi+100]
  00071	50		 push	 eax
  00072	e8 00 00 00 00	 call	 _deflateEnd
  00077	83 c4 04	 add	 esp, 4

; 655  :             free(state->out);

  0007a	ff 76 28	 push	 DWORD PTR [esi+40]
  0007d	ff d3		 call	 ebx
  0007f	83 c4 04	 add	 esp, 4
$LN8@gzclose_w:

; 656  :         }
; 657  :         free(state->in);

  00082	ff 76 24	 push	 DWORD PTR [esi+36]
  00085	ff d3		 call	 ebx
  00087	83 c4 04	 add	 esp, 4
$LN7@gzclose_w:

; 658  :     }
; 659  :     gz_error(state, Z_OK, NULL);

  0008a	6a 00		 push	 0
  0008c	33 d2		 xor	 edx, edx
  0008e	8b ce		 mov	 ecx, esi
  00090	e8 00 00 00 00	 call	 _gz_error
  00095	83 c4 04	 add	 esp, 4

; 660  :     free(state->path);

  00098	ff 76 18	 push	 DWORD PTR [esi+24]
  0009b	ff d3		 call	 ebx
  0009d	83 c4 04	 add	 esp, 4

; 661  :     if (close(state->fd) == -1)

  000a0	ff 76 14	 push	 DWORD PTR [esi+20]
  000a3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__close
  000a9	83 c4 04	 add	 esp, 4
  000ac	83 c9 ff	 or	 ecx, -1
  000af	3b c1		 cmp	 eax, ecx
  000b1	0f 44 f9	 cmove	 edi, ecx

; 662  :         ret = Z_ERRNO;
; 663  :     free(state);

  000b4	56		 push	 esi
  000b5	ff d3		 call	 ebx
  000b7	83 c4 04	 add	 esp, 4

; 664  :     return ret;

  000ba	8b c7		 mov	 eax, edi

; 665  : }

  000bc	5f		 pop	 edi
  000bd	5e		 pop	 esi
  000be	5b		 pop	 ebx
  000bf	8b e5		 mov	 esp, ebp
  000c1	5d		 pop	 ebp
  000c2	c3		 ret	 0
_gzclose_w ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\theclashingfritz\source\repos\inifileparser\zlib\gzwrite.c
;	COMDAT _gz_init
_TEXT	SEGMENT
_gz_init PROC						; COMDAT
; _state$ = ecx

; 19   : {

  00000	51		 push	 ecx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f9		 mov	 edi, ecx

; 20   :     int ret;
; 21   :     z_streamp strm = &(state->strm);
; 22   : 
; 23   :     /* allocate input buffer (double size for gzprintf) */
; 24   :     state->in = (unsigned char *)malloc(state->want << 1);

  00005	8b 47 20	 mov	 eax, DWORD PTR [edi+32]
  00008	8d 77 64	 lea	 esi, DWORD PTR [edi+100]
  0000b	03 c0		 add	 eax, eax
  0000d	50		 push	 eax
  0000e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  00014	83 c4 04	 add	 esp, 4
  00017	89 47 24	 mov	 DWORD PTR [edi+36], eax

; 25   :     if (state->in == NULL) {

  0001a	85 c0		 test	 eax, eax
  0001c	74 29		 je	 SHORT $LN8@gz_init

; 26   :         gz_error(state, Z_MEM_ERROR, "out of memory");
; 27   :         return -1;
; 28   :     }
; 29   : 
; 30   :     /* only need output buffer and deflate state if compressing */
; 31   :     if (!state->direct) {

  0001e	83 7f 2c 00	 cmp	 DWORD PTR [edi+44], 0
  00022	0f 85 a6 00 00
	00		 jne	 $LN3@gz_init

; 32   :         /* allocate output buffer */
; 33   :         state->out = (unsigned char *)malloc(state->want);

  00028	ff 77 20	 push	 DWORD PTR [edi+32]
  0002b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  00031	83 c4 04	 add	 esp, 4
  00034	89 47 28	 mov	 DWORD PTR [edi+40], eax

; 34   :         if (state->out == NULL) {

  00037	85 c0		 test	 eax, eax
  00039	75 27		 jne	 SHORT $LN4@gz_init

; 35   :             free(state->in);

  0003b	ff 77 24	 push	 DWORD PTR [edi+36]
  0003e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  00044	83 c4 04	 add	 esp, 4
$LN8@gz_init:

; 36   :             gz_error(state, Z_MEM_ERROR, "out of memory");

  00047	68 00 00 00 00	 push	 OFFSET ??_C@_0O@BNNCBLEN@out?5of?5memory?$AA@
  0004c	ba fc ff ff ff	 mov	 edx, -4			; fffffffcH
  00051	8b cf		 mov	 ecx, edi
  00053	e8 00 00 00 00	 call	 _gz_error
  00058	83 c4 04	 add	 esp, 4

; 37   :             return -1;

  0005b	83 c8 ff	 or	 eax, -1

; 63   :     }
; 64   :     return 0;
; 65   : }

  0005e	5f		 pop	 edi
  0005f	5e		 pop	 esi
  00060	59		 pop	 ecx
  00061	c3		 ret	 0
$LN4@gz_init:

; 38   :         }
; 39   : 
; 40   :         /* allocate deflate memory, set up for gzip compression */
; 41   :         strm->zalloc = Z_NULL;
; 42   :         strm->zfree = Z_NULL;
; 43   :         strm->opaque = Z_NULL;
; 44   :         ret = deflateInit2(strm, state->level, Z_DEFLATED,

  00062	6a 38		 push	 56			; 00000038H
  00064	68 00 00 00 00	 push	 OFFSET ??_C@_06CJNJFBNP@1?42?411?$AA@
  00069	c7 46 20 00 00
	00 00		 mov	 DWORD PTR [esi+32], 0
  00070	c7 46 24 00 00
	00 00		 mov	 DWORD PTR [esi+36], 0
  00077	c7 46 28 00 00
	00 00		 mov	 DWORD PTR [esi+40], 0
  0007e	ff 77 4c	 push	 DWORD PTR [edi+76]
  00081	6a 08		 push	 8
  00083	6a 1f		 push	 31			; 0000001fH
  00085	6a 08		 push	 8
  00087	ff 77 48	 push	 DWORD PTR [edi+72]
  0008a	56		 push	 esi
  0008b	e8 00 00 00 00	 call	 _deflateInit2_
  00090	83 c4 20	 add	 esp, 32			; 00000020H

; 45   :                            MAX_WBITS + 16, DEF_MEM_LEVEL, state->strategy);
; 46   :         if (ret != Z_OK) {

  00093	85 c0		 test	 eax, eax
  00095	74 31		 je	 SHORT $LN5@gz_init

; 47   :             free(state->out);

  00097	ff 77 28	 push	 DWORD PTR [edi+40]
  0009a	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__free
  000a0	ff d6		 call	 esi
  000a2	83 c4 04	 add	 esp, 4

; 48   :             free(state->in);

  000a5	ff 77 24	 push	 DWORD PTR [edi+36]
  000a8	ff d6		 call	 esi
  000aa	83 c4 04	 add	 esp, 4

; 49   :             gz_error(state, Z_MEM_ERROR, "out of memory");

  000ad	ba fc ff ff ff	 mov	 edx, -4			; fffffffcH
  000b2	8b cf		 mov	 ecx, edi
  000b4	68 00 00 00 00	 push	 OFFSET ??_C@_0O@BNNCBLEN@out?5of?5memory?$AA@
  000b9	e8 00 00 00 00	 call	 _gz_error
  000be	83 c4 04	 add	 esp, 4

; 50   :             return -1;

  000c1	83 c8 ff	 or	 eax, -1

; 63   :     }
; 64   :     return 0;
; 65   : }

  000c4	5f		 pop	 edi
  000c5	5e		 pop	 esi
  000c6	59		 pop	 ecx
  000c7	c3		 ret	 0
$LN5@gz_init:

; 51   :         }
; 52   :         strm->next_in = NULL;

  000c8	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
$LN3@gz_init:

; 53   :     }
; 54   : 
; 55   :     /* mark state as initialized */
; 56   :     state->size = state->want;
; 57   : 
; 58   :     /* initialize write buffer if compressing */
; 59   :     if (!state->direct) {

  000ce	83 7f 2c 00	 cmp	 DWORD PTR [edi+44], 0
  000d2	8b 47 20	 mov	 eax, DWORD PTR [edi+32]
  000d5	89 47 1c	 mov	 DWORD PTR [edi+28], eax
  000d8	75 0c		 jne	 SHORT $LN6@gz_init

; 60   :         strm->avail_out = state->size;

  000da	89 46 10	 mov	 DWORD PTR [esi+16], eax

; 61   :         strm->next_out = state->out;

  000dd	8b 47 28	 mov	 eax, DWORD PTR [edi+40]
  000e0	89 46 0c	 mov	 DWORD PTR [esi+12], eax

; 62   :         state->x.next = strm->next_out;

  000e3	89 47 04	 mov	 DWORD PTR [edi+4], eax
$LN6@gz_init:

; 63   :     }
; 64   :     return 0;
; 65   : }

  000e6	5f		 pop	 edi
  000e7	33 c0		 xor	 eax, eax
  000e9	5e		 pop	 esi
  000ea	59		 pop	 ecx
  000eb	c3		 ret	 0
_gz_init ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\theclashingfritz\source\repos\inifileparser\zlib\gzwrite.c
;	COMDAT _gz_comp
_TEXT	SEGMENT
_flush$1$ = -4						; size = 4
_gz_comp PROC						; COMDAT
; _state$ = ecx
; _flush$ = edx

; 76   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b f9		 mov	 edi, ecx
  00009	8b da		 mov	 ebx, edx
  0000b	89 5d fc	 mov	 DWORD PTR _flush$1$[ebp], ebx

; 77   :     int ret, writ;
; 78   :     unsigned have, put, max = ((unsigned)-1 >> 2) + 1;
; 79   :     z_streamp strm = &(state->strm);
; 80   : 
; 81   :     /* allocate memory if this is the first time through */
; 82   :     if (state->size == 0 && gz_init(state) == -1)

  0000e	83 7f 1c 00	 cmp	 DWORD PTR [edi+28], 0
  00012	8d 77 64	 lea	 esi, DWORD PTR [edi+100]
  00015	75 0e		 jne	 SHORT $LN9@gz_comp
  00017	e8 00 00 00 00	 call	 _gz_init
  0001c	83 f8 ff	 cmp	 eax, -1
  0001f	0f 84 32 01 00
	00		 je	 $LN39@gz_comp
$LN9@gz_comp:

; 83   :         return -1;
; 84   : 
; 85   :     /* write directly if requested */
; 86   :     if (state->direct) {

  00025	83 7f 2c 00	 cmp	 DWORD PTR [edi+44], 0
  00029	74 71		 je	 SHORT $LN10@gz_comp

; 87   :         while (strm->avail_in) {

  0002b	83 7e 04 00	 cmp	 DWORD PTR [esi+4], 0
  0002f	0f 84 05 01 00
	00		 je	 $LN18@gz_comp
  00035	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__write
  0003b	b9 00 00 00 40	 mov	 ecx, 1073741824		; 40000000H
$LL2@gz_comp:

; 88   :             put = strm->avail_in > max ? max : strm->avail_in;

  00040	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00043	3d 00 00 00 40	 cmp	 eax, 1073741824		; 40000000H
  00048	0f 47 c1	 cmova	 eax, ecx

; 89   :             writ = write(state->fd, strm->next_in, put);

  0004b	50		 push	 eax
  0004c	ff 36		 push	 DWORD PTR [esi]
  0004e	ff 77 14	 push	 DWORD PTR [edi+20]
  00051	ff d3		 call	 ebx
  00053	83 c4 0c	 add	 esp, 12			; 0000000cH

; 90   :             if (writ < 0) {

  00056	85 c0		 test	 eax, eax
  00058	78 19		 js	 SHORT $LN27@gz_comp

; 92   :                 return -1;
; 93   :             }
; 94   :             strm->avail_in -= (unsigned)writ;

  0005a	29 46 04	 sub	 DWORD PTR [esi+4], eax
  0005d	b9 00 00 00 40	 mov	 ecx, 1073741824		; 40000000H

; 95   :             strm->next_in += writ;

  00062	01 06		 add	 DWORD PTR [esi], eax
  00064	83 7e 04 00	 cmp	 DWORD PTR [esi+4], 0
  00068	75 d6		 jne	 SHORT $LL2@gz_comp

; 138  : 
; 139  :     /* all done, no errors */
; 140  :     return 0;

  0006a	33 c0		 xor	 eax, eax

; 141  : }

  0006c	5f		 pop	 edi
  0006d	5e		 pop	 esi
  0006e	5b		 pop	 ebx
  0006f	8b e5		 mov	 esp, ebp
  00071	5d		 pop	 ebp
  00072	c3		 ret	 0
$LN27@gz_comp:

; 91   :                 gz_error(state, Z_ERRNO, zstrerror());

  00073	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___errno
  00079	ff 30		 push	 DWORD PTR [eax]
  0007b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strerror
  00081	83 c4 04	 add	 esp, 4
  00084	83 ca ff	 or	 edx, -1

; 128  :             gz_error(state, Z_STREAM_ERROR,

  00087	8b cf		 mov	 ecx, edi
  00089	50		 push	 eax
  0008a	e8 00 00 00 00	 call	 _gz_error
  0008f	83 c4 04	 add	 esp, 4

; 129  :                       "internal error: deflate stream corrupt");
; 130  :             return -1;

  00092	83 c8 ff	 or	 eax, -1

; 141  : }

  00095	5f		 pop	 edi
  00096	5e		 pop	 esi
  00097	5b		 pop	 ebx
  00098	8b e5		 mov	 esp, ebp
  0009a	5d		 pop	 ebp
  0009b	c3		 ret	 0
$LN10@gz_comp:

; 96   :         }
; 97   :         return 0;
; 98   :     }
; 99   : 
; 100  :     /* run deflate() on provided input until it produces no more output */
; 101  :     ret = Z_OK;

  0009c	33 c0		 xor	 eax, eax
$LN41@gz_comp:

; 102  :     do {
; 103  :         /* write out current buffer contents if full, or if flushing, but if
; 104  :            doing Z_FINISH then don't write until we get to Z_STREAM_END */
; 105  :         if (strm->avail_out == 0 || (flush != Z_NO_FLUSH &&

  0009e	83 7e 10 00	 cmp	 DWORD PTR [esi+16], 0
  000a2	ba 00 00 00 40	 mov	 edx, 1073741824		; 40000000H
  000a7	74 0e		 je	 SHORT $LN26@gz_comp
  000a9	85 db		 test	 ebx, ebx
  000ab	74 5d		 je	 SHORT $LN16@gz_comp
  000ad	83 fb 04	 cmp	 ebx, 4
  000b0	75 05		 jne	 SHORT $LN26@gz_comp
  000b2	83 f8 01	 cmp	 eax, 1
  000b5	75 53		 jne	 SHORT $LN16@gz_comp
$LN26@gz_comp:

; 106  :             (flush != Z_FINISH || ret == Z_STREAM_END))) {
; 107  :             while (strm->next_out > state->x.next) {

  000b7	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  000ba	3b 47 04	 cmp	 eax, DWORD PTR [edi+4]
  000bd	76 33		 jbe	 SHORT $LN8@gz_comp
  000bf	90		 npad	 1
$LL7@gz_comp:

; 108  :                 put = strm->next_out - state->x.next > (int)max ? max :

  000c0	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  000c3	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  000c6	2b c1		 sub	 eax, ecx
  000c8	3d 00 00 00 40	 cmp	 eax, 1073741824		; 40000000H
  000cd	0f 4f c2	 cmovg	 eax, edx

; 109  :                       (unsigned)(strm->next_out - state->x.next);
; 110  :                 writ = write(state->fd, state->x.next, put);

  000d0	50		 push	 eax
  000d1	51		 push	 ecx
  000d2	ff 77 14	 push	 DWORD PTR [edi+20]
  000d5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__write
  000db	83 c4 0c	 add	 esp, 12			; 0000000cH

; 111  :                 if (writ < 0) {

  000de	85 c0		 test	 eax, eax
  000e0	78 91		 js	 SHORT $LN27@gz_comp

; 112  :                     gz_error(state, Z_ERRNO, zstrerror());
; 113  :                     return -1;
; 114  :                 }
; 115  :                 state->x.next += writ;

  000e2	01 47 04	 add	 DWORD PTR [edi+4], eax
  000e5	ba 00 00 00 40	 mov	 edx, 1073741824		; 40000000H
  000ea	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  000ed	39 46 0c	 cmp	 DWORD PTR [esi+12], eax
  000f0	77 ce		 ja	 SHORT $LL7@gz_comp
$LN8@gz_comp:

; 116  :             }
; 117  :             if (strm->avail_out == 0) {

  000f2	83 7e 10 00	 cmp	 DWORD PTR [esi+16], 0
  000f6	75 12		 jne	 SHORT $LN16@gz_comp

; 118  :                 strm->avail_out = state->size;

  000f8	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
  000fb	89 46 10	 mov	 DWORD PTR [esi+16], eax

; 119  :                 strm->next_out = state->out;

  000fe	8b 47 28	 mov	 eax, DWORD PTR [edi+40]
  00101	89 46 0c	 mov	 DWORD PTR [esi+12], eax

; 120  :                 state->x.next = state->out;

  00104	8b 47 28	 mov	 eax, DWORD PTR [edi+40]
  00107	89 47 04	 mov	 DWORD PTR [edi+4], eax
$LN16@gz_comp:

; 121  :             }
; 122  :         }
; 123  : 
; 124  :         /* compress */
; 125  :         have = strm->avail_out;
; 126  :         ret = deflate(strm, flush);

  0010a	ff 75 fc	 push	 DWORD PTR _flush$1$[ebp]
  0010d	8b 5e 10	 mov	 ebx, DWORD PTR [esi+16]
  00110	56		 push	 esi
  00111	e8 00 00 00 00	 call	 _deflate
  00116	83 c4 08	 add	 esp, 8

; 127  :         if (ret == Z_STREAM_ERROR) {

  00119	83 f8 fe	 cmp	 eax, -2			; fffffffeH
  0011c	74 25		 je	 SHORT $LN30@gz_comp

; 131  :         }
; 132  :         have -= strm->avail_out;

  0011e	2b 5e 10	 sub	 ebx, DWORD PTR [esi+16]

; 133  :     } while (have);

  00121	74 08		 je	 SHORT $LN29@gz_comp
  00123	8b 5d fc	 mov	 ebx, DWORD PTR _flush$1$[ebp]
  00126	e9 73 ff ff ff	 jmp	 $LN41@gz_comp
$LN29@gz_comp:

; 134  : 
; 135  :     /* if that completed a deflate stream, allow another to start */
; 136  :     if (flush == Z_FINISH)

  0012b	83 7d fc 04	 cmp	 DWORD PTR _flush$1$[ebp], 4
  0012f	75 09		 jne	 SHORT $LN18@gz_comp

; 137  :         deflateReset(strm);

  00131	56		 push	 esi
  00132	e8 00 00 00 00	 call	 _deflateReset
  00137	83 c4 04	 add	 esp, 4
$LN18@gz_comp:

; 138  : 
; 139  :     /* all done, no errors */
; 140  :     return 0;

  0013a	33 c0		 xor	 eax, eax

; 141  : }

  0013c	5f		 pop	 edi
  0013d	5e		 pop	 esi
  0013e	5b		 pop	 ebx
  0013f	8b e5		 mov	 esp, ebp
  00141	5d		 pop	 ebp
  00142	c3		 ret	 0
$LN30@gz_comp:

; 128  :             gz_error(state, Z_STREAM_ERROR,

  00143	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@DEEGAHIB@internal?5error?3?5deflate?5stream?5c@
  00148	ba fe ff ff ff	 mov	 edx, -2			; fffffffeH
  0014d	8b cf		 mov	 ecx, edi
  0014f	e8 00 00 00 00	 call	 _gz_error
  00154	83 c4 04	 add	 esp, 4
$LN39@gz_comp:

; 141  : }

  00157	5f		 pop	 edi
  00158	5e		 pop	 esi
  00159	83 c8 ff	 or	 eax, -1
  0015c	5b		 pop	 ebx
  0015d	8b e5		 mov	 esp, ebp
  0015f	5d		 pop	 ebp
  00160	c3		 ret	 0
_gz_comp ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\theclashingfritz\source\repos\inifileparser\zlib\gzwrite.c
;	COMDAT _gz_zero
_TEXT	SEGMENT
_first$1$ = -8						; size = 4
_len$2$ = -4						; size = 4
_len$ = 8						; size = 8
_gz_zero PROC						; COMDAT
; _state$ = ecx

; 148  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	57		 push	 edi

; 149  :     int first;
; 150  :     unsigned n;
; 151  :     z_streamp strm = &(state->strm);
; 152  : 
; 153  :     /* consume whatever's left in the input buffer */
; 154  :     if (strm->avail_in && gz_comp(state, Z_NO_FLUSH) == -1)

  0000b	83 7e 68 00	 cmp	 DWORD PTR [esi+104], 0
  0000f	74 16		 je	 SHORT $LN4@gz_zero
  00011	33 d2		 xor	 edx, edx
  00013	e8 00 00 00 00	 call	 _gz_comp
  00018	83 f8 ff	 cmp	 eax, -1
  0001b	75 0a		 jne	 SHORT $LN4@gz_zero
$LN11@gz_zero:

; 155  :         return -1;

  0001d	83 c8 ff	 or	 eax, -1

; 172  :     }
; 173  :     return 0;
; 174  : }

  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
$LN4@gz_zero:

; 156  : 
; 157  :     /* compress len zeros (len guaranteed > 0) */
; 158  :     first = 1;
; 159  :     while (len) {

  00027	8b 5d 08	 mov	 ebx, DWORD PTR _len$[ebp]
  0002a	ba 01 00 00 00	 mov	 edx, 1
  0002f	8b 4d 0c	 mov	 ecx, DWORD PTR _len$[ebp+4]
  00032	8b c3		 mov	 eax, ebx
  00034	0b c1		 or	 eax, ecx
  00036	89 55 f8	 mov	 DWORD PTR _first$1$[ebp], edx
  00039	89 4d fc	 mov	 DWORD PTR _len$2$[ebp], ecx
  0003c	74 5e		 je	 SHORT $LN3@gz_zero
  0003e	66 90		 npad	 2
$LL2@gz_zero:

; 160  :         n = GT_OFF(state->size) || (z_off64_t)state->size > len ?

  00040	8b 7e 1c	 mov	 edi, DWORD PTR [esi+28]
  00043	33 c0		 xor	 eax, eax
  00045	3b c1		 cmp	 eax, ecx
  00047	7f 06		 jg	 SHORT $LN8@gz_zero
  00049	7c 06		 jl	 SHORT $LN9@gz_zero
  0004b	3b fb		 cmp	 edi, ebx
  0004d	76 02		 jbe	 SHORT $LN9@gz_zero
$LN8@gz_zero:
  0004f	8b fb		 mov	 edi, ebx
$LN9@gz_zero:

; 161  :             (unsigned)len : state->size;
; 162  :         if (first) {

  00051	85 d2		 test	 edx, edx
  00053	74 15		 je	 SHORT $LN5@gz_zero

; 163  :             memset(state->in, 0, n);

  00055	57		 push	 edi
  00056	6a 00		 push	 0
  00058	ff 76 24	 push	 DWORD PTR [esi+36]
  0005b	e8 00 00 00 00	 call	 _memset
  00060	83 c4 0c	 add	 esp, 12			; 0000000cH

; 164  :             first = 0;

  00063	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _first$1$[ebp], 0
$LN5@gz_zero:

; 165  :         }
; 166  :         strm->avail_in = n;

  0006a	89 7e 68	 mov	 DWORD PTR [esi+104], edi

; 167  :         strm->next_in = state->in;
; 168  :         state->x.pos += n;
; 169  :         if (gz_comp(state, Z_NO_FLUSH) == -1)

  0006d	8b ce		 mov	 ecx, esi
  0006f	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  00072	89 46 64	 mov	 DWORD PTR [esi+100], eax
  00075	01 7e 08	 add	 DWORD PTR [esi+8], edi
  00078	83 56 0c 00	 adc	 DWORD PTR [esi+12], 0
  0007c	33 d2		 xor	 edx, edx
  0007e	e8 00 00 00 00	 call	 _gz_comp
  00083	83 f8 ff	 cmp	 eax, -1
  00086	74 95		 je	 SHORT $LN11@gz_zero

; 170  :             return -1;
; 171  :         len -= n;

  00088	8b 4d fc	 mov	 ecx, DWORD PTR _len$2$[ebp]
  0008b	2b df		 sub	 ebx, edi
  0008d	8b 55 f8	 mov	 edx, DWORD PTR _first$1$[ebp]
  00090	8b c3		 mov	 eax, ebx
  00092	83 d9 00	 sbb	 ecx, 0
  00095	0b c1		 or	 eax, ecx
  00097	89 4d fc	 mov	 DWORD PTR _len$2$[ebp], ecx
  0009a	75 a4		 jne	 SHORT $LL2@gz_zero
$LN3@gz_zero:

; 172  :     }
; 173  :     return 0;
; 174  : }

  0009c	5f		 pop	 edi
  0009d	5e		 pop	 esi
  0009e	33 c0		 xor	 eax, eax
  000a0	5b		 pop	 ebx
  000a1	8b e5		 mov	 esp, ebp
  000a3	5d		 pop	 ebp
  000a4	c3		 ret	 0
_gz_zero ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\theclashingfritz\source\repos\inifileparser\zlib\gzwrite.c
;	COMDAT _gz_write
_TEXT	SEGMENT
_buf$1$ = -8						; size = 4
_put$1$ = -4						; size = 4
_len$ = 8						; size = 4
_gz_write PROC						; COMDAT
; _state$ = ecx
; _buf$ = edx

; 182  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	53		 push	 ebx

; 183  :     z_size_t put = len;

  0000a	8b 5d 08	 mov	 ebx, DWORD PTR _len$[ebp]
  0000d	89 5c 24 0c	 mov	 DWORD PTR _put$1$[esp+16], ebx
  00011	56		 push	 esi
  00012	8b f1		 mov	 esi, ecx
  00014	57		 push	 edi
  00015	8b fa		 mov	 edi, edx
  00017	89 7c 24 10	 mov	 DWORD PTR _buf$1$[esp+24], edi

; 184  : 
; 185  :     /* if len is zero, avoid unnecessary operations */
; 186  :     if (len == 0)

  0001b	85 db		 test	 ebx, ebx
  0001d	0f 84 8c 00 00
	00		 je	 $LN25@gz_write

; 187  :         return 0;
; 188  : 
; 189  :     /* allocate memory if this is the first time through */
; 190  :     if (state->size == 0 && gz_init(state) == -1)

  00023	83 7e 1c 00	 cmp	 DWORD PTR [esi+28], 0
  00027	75 0a		 jne	 SHORT $LN9@gz_write
  00029	e8 00 00 00 00	 call	 _gz_init
  0002e	83 f8 ff	 cmp	 eax, -1
  00031	74 7c		 je	 SHORT $LN25@gz_write
$LN9@gz_write:

; 191  :         return 0;
; 192  : 
; 193  :     /* check for seek request */
; 194  :     if (state->seek) {

  00033	83 7e 58 00	 cmp	 DWORD PTR [esi+88], 0
  00037	74 1c		 je	 SHORT $LN11@gz_write

; 195  :         state->seek = 0;
; 196  :         if (gz_zero(state, state->skip) == -1)

  00039	ff 76 54	 push	 DWORD PTR [esi+84]
  0003c	8b ce		 mov	 ecx, esi
  0003e	c7 46 58 00 00
	00 00		 mov	 DWORD PTR [esi+88], 0
  00045	ff 76 50	 push	 DWORD PTR [esi+80]
  00048	e8 00 00 00 00	 call	 _gz_zero
  0004d	83 c4 08	 add	 esp, 8
  00050	83 f8 ff	 cmp	 eax, -1
  00053	74 5a		 je	 SHORT $LN25@gz_write
$LN11@gz_write:

; 197  :             return 0;
; 198  :     }
; 199  : 
; 200  :     /* for small len, copy to input buffer, otherwise compress directly */
; 201  :     if (len < state->size) {

  00055	3b 5e 1c	 cmp	 ebx, DWORD PTR [esi+28]
  00058	73 5e		 jae	 SHORT $LN12@gz_write
  0005a	66 0f 1f 44 00
	00		 npad	 6
$LL4@gz_write:

; 202  :         /* copy to input buffer, compress when full */
; 203  :         do {
; 204  :             unsigned have, copy;
; 205  : 
; 206  :             if (state->strm.avail_in == 0)

  00060	8b 4e 68	 mov	 ecx, DWORD PTR [esi+104]
  00063	85 c9		 test	 ecx, ecx
  00065	75 06		 jne	 SHORT $LN14@gz_write

; 207  :                 state->strm.next_in = state->in;

  00067	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  0006a	89 46 64	 mov	 DWORD PTR [esi+100], eax
$LN14@gz_write:

; 208  :             have = (unsigned)((state->strm.next_in + state->strm.avail_in) -

  0006d	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  00070	2b c8		 sub	 ecx, eax
  00072	03 4e 64	 add	 ecx, DWORD PTR [esi+100]

; 209  :                               state->in);
; 210  :             copy = state->size - have;

  00075	8b 7e 1c	 mov	 edi, DWORD PTR [esi+28]
  00078	2b f9		 sub	 edi, ecx

; 211  :             if (copy > len)

  0007a	3b fb		 cmp	 edi, ebx
  0007c	0f 47 fb	 cmova	 edi, ebx

; 212  :                 copy = len;
; 213  :             memcpy(state->in + have, buf, copy);

  0007f	03 c1		 add	 eax, ecx
  00081	57		 push	 edi
  00082	ff 74 24 14	 push	 DWORD PTR _buf$1$[esp+28]
  00086	50		 push	 eax
  00087	e8 00 00 00 00	 call	 _memcpy

; 214  :             state->strm.avail_in += copy;

  0008c	01 7e 68	 add	 DWORD PTR [esi+104], edi
  0008f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 215  :             state->x.pos += copy;

  00092	01 7e 08	 add	 DWORD PTR [esi+8], edi
  00095	83 56 0c 00	 adc	 DWORD PTR [esi+12], 0

; 216  :             buf = (const char *)buf + copy;

  00099	01 7c 24 10	 add	 DWORD PTR _buf$1$[esp+24], edi

; 217  :             len -= copy;

  0009d	2b df		 sub	 ebx, edi

; 218  :             if (len && gz_comp(state, Z_NO_FLUSH) == -1)

  0009f	74 54		 je	 SHORT $LN6@gz_write
  000a1	33 d2		 xor	 edx, edx
  000a3	8b ce		 mov	 ecx, esi
  000a5	e8 00 00 00 00	 call	 _gz_comp
  000aa	83 f8 ff	 cmp	 eax, -1
  000ad	75 b1		 jne	 SHORT $LL4@gz_write
$LN25@gz_write:

; 236  :                 return 0;

  000af	33 c0		 xor	 eax, eax

; 243  : }

  000b1	5f		 pop	 edi
  000b2	5e		 pop	 esi
  000b3	5b		 pop	 ebx
  000b4	8b e5		 mov	 esp, ebp
  000b6	5d		 pop	 ebp
  000b7	c3		 ret	 0
$LN12@gz_write:

; 219  :                 return 0;
; 220  :         } while (len);
; 221  :     }
; 222  :     else {
; 223  :         /* consume whatever's left in the input buffer */
; 224  :         if (state->strm.avail_in && gz_comp(state, Z_NO_FLUSH) == -1)

  000b8	83 7e 68 00	 cmp	 DWORD PTR [esi+104], 0
  000bc	74 0e		 je	 SHORT $LN17@gz_write
  000be	33 d2		 xor	 edx, edx
  000c0	8b ce		 mov	 ecx, esi
  000c2	e8 00 00 00 00	 call	 _gz_comp
  000c7	83 f8 ff	 cmp	 eax, -1
  000ca	74 e3		 je	 SHORT $LN25@gz_write
$LN17@gz_write:

; 225  :             return 0;
; 226  : 
; 227  :         /* directly compress user buffer to file */
; 228  :         state->strm.next_in = (z_const Bytef *)buf;

  000cc	89 7e 64	 mov	 DWORD PTR [esi+100], edi
  000cf	90		 npad	 1
$LL7@gz_write:

; 229  :         do {
; 230  :             unsigned n = (unsigned)-1;

  000d0	83 cf ff	 or	 edi, -1

; 231  :             if (n > len)
; 232  :                 n = len;
; 233  :             state->strm.avail_in = n;
; 234  :             state->x.pos += n;
; 235  :             if (gz_comp(state, Z_NO_FLUSH) == -1)

  000d3	8b ce		 mov	 ecx, esi
  000d5	83 fb ff	 cmp	 ebx, -1
  000d8	0f 42 fb	 cmovb	 edi, ebx
  000db	01 7e 08	 add	 DWORD PTR [esi+8], edi
  000de	89 7e 68	 mov	 DWORD PTR [esi+104], edi
  000e1	83 56 0c 00	 adc	 DWORD PTR [esi+12], 0
  000e5	33 d2		 xor	 edx, edx
  000e7	e8 00 00 00 00	 call	 _gz_comp
  000ec	83 f8 ff	 cmp	 eax, -1
  000ef	74 be		 je	 SHORT $LN25@gz_write

; 237  :             len -= n;

  000f1	2b df		 sub	 ebx, edi

; 238  :         } while (len);

  000f3	75 db		 jne	 SHORT $LL7@gz_write
$LN6@gz_write:

; 239  :     }
; 240  : 
; 241  :     /* input was all buffered or compressed */
; 242  :     return put;

  000f5	8b 44 24 14	 mov	 eax, DWORD PTR _put$1$[esp+24]

; 243  : }

  000f9	5f		 pop	 edi
  000fa	5e		 pop	 esi
  000fb	5b		 pop	 ebx
  000fc	8b e5		 mov	 esp, ebp
  000fe	5d		 pop	 ebp
  000ff	c3		 ret	 0
_gz_write ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\theclashingfritz\source\repos\inifileparser\zlib\gzwrite.c
;	COMDAT _gzwrite
_TEXT	SEGMENT
_file$ = 8						; size = 4
_buf$ = 12						; size = 4
_len$ = 16						; size = 4
_gzwrite PROC						; COMDAT

; 250  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 251  :     gz_statep state;
; 252  : 
; 253  :     /* get internal structure */
; 254  :     if (file == NULL)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _file$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 28		 je	 SHORT $LN4@gzwrite

; 255  :         return 0;
; 256  :     state = (gz_statep)file;
; 257  : 
; 258  :     /* check that we're writing and that there's no error */
; 259  :     if (state->mode != GZ_WRITE || state->err != Z_OK)

  0000a	81 79 10 b1 79
	00 00		 cmp	 DWORD PTR [ecx+16], 31153 ; 000079b1H
  00011	75 1f		 jne	 SHORT $LN4@gzwrite
  00013	83 79 5c 00	 cmp	 DWORD PTR [ecx+92], 0
  00017	75 19		 jne	 SHORT $LN4@gzwrite

; 261  : 
; 262  :     /* since an int is returned, make sure len fits in one, otherwise return
; 263  :        with an error (this avoids a flaw in the interface) */
; 264  :     if ((int)len < 0) {

  00019	8b 45 10	 mov	 eax, DWORD PTR _len$[ebp]
  0001c	85 c0		 test	 eax, eax
  0001e	79 16		 jns	 SHORT $LN5@gzwrite

; 265  :         gz_error(state, Z_DATA_ERROR, "requested length does not fit in int");

  00020	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@MLPJFDMM@requested?5length?5does?5not?5fit?5in@
  00025	ba fd ff ff ff	 mov	 edx, -3			; fffffffdH
  0002a	e8 00 00 00 00	 call	 _gz_error
  0002f	83 c4 04	 add	 esp, 4
$LN4@gzwrite:

; 260  :         return 0;

  00032	33 c0		 xor	 eax, eax

; 271  : }

  00034	5d		 pop	 ebp
  00035	c3		 ret	 0
$LN5@gzwrite:

; 266  :         return 0;
; 267  :     }
; 268  : 
; 269  :     /* write len bytes from buf (the return value will fit in an int) */
; 270  :     return (int)gz_write(state, buf, len);

  00036	8b 55 0c	 mov	 edx, DWORD PTR _buf$[ebp]
  00039	50		 push	 eax
  0003a	e8 00 00 00 00	 call	 _gz_write
  0003f	83 c4 04	 add	 esp, 4

; 271  : }

  00042	5d		 pop	 ebp
  00043	c3		 ret	 0
_gzwrite ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\theclashingfritz\source\repos\inifileparser\zlib\gzwrite.c
;	COMDAT _gzfwrite
_TEXT	SEGMENT
_buf$ = 8						; size = 4
_size$ = 12						; size = 4
_nitems$ = 16						; size = 4
_file$ = 20						; size = 4
_gzfwrite PROC						; COMDAT

; 279  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  :     z_size_t len;
; 281  :     gz_statep state;
; 282  : 
; 283  :     /* get internal structure */
; 284  :     if (file == NULL)

  00003	8b 4d 14	 mov	 ecx, DWORD PTR _file$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	75 04		 jne	 SHORT $LN2@gzfwrite
$LN4@gzfwrite:

; 285  :         return 0;

  0000a	33 c0		 xor	 eax, eax

; 301  : }

  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
$LN2@gzfwrite:

; 286  :     state = (gz_statep)file;
; 287  : 
; 288  :     /* check that we're writing and that there's no error */
; 289  :     if (state->mode != GZ_WRITE || state->err != Z_OK)

  0000e	81 79 10 b1 79
	00 00		 cmp	 DWORD PTR [ecx+16], 31153 ; 000079b1H
  00015	75 f3		 jne	 SHORT $LN4@gzfwrite
  00017	83 79 5c 00	 cmp	 DWORD PTR [ecx+92], 0
  0001b	75 ed		 jne	 SHORT $LN4@gzfwrite

; 290  :         return 0;
; 291  : 
; 292  :     /* compute bytes to read -- error on overflow */
; 293  :     len = nitems * size;

  0001d	56		 push	 esi
  0001e	57		 push	 edi
  0001f	8b 7d 0c	 mov	 edi, DWORD PTR _size$[ebp]
  00022	8b f7		 mov	 esi, edi
  00024	0f af 75 10	 imul	 esi, DWORD PTR _nitems$[ebp]

; 294  :     if (size && len / size != nitems) {

  00028	85 ff		 test	 edi, edi
  0002a	74 23		 je	 SHORT $LN5@gzfwrite
  0002c	33 d2		 xor	 edx, edx
  0002e	8b c6		 mov	 eax, esi
  00030	f7 f7		 div	 edi
  00032	3b 45 10	 cmp	 eax, DWORD PTR _nitems$[ebp]
  00035	74 18		 je	 SHORT $LN5@gzfwrite

; 295  :         gz_error(state, Z_STREAM_ERROR, "request does not fit in a size_t");

  00037	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@EGGJDMIK@request?5does?5not?5fit?5in?5a?5size_t@
  0003c	ba fe ff ff ff	 mov	 edx, -2			; fffffffeH
  00041	e8 00 00 00 00	 call	 _gz_error
  00046	83 c4 04	 add	 esp, 4
$LN7@gzfwrite:

; 296  :         return 0;

  00049	5f		 pop	 edi
  0004a	33 c0		 xor	 eax, eax
  0004c	5e		 pop	 esi

; 301  : }

  0004d	5d		 pop	 ebp
  0004e	c3		 ret	 0
$LN5@gzfwrite:

; 297  :     }
; 298  : 
; 299  :     /* write len bytes to buf, return the number of full items written */
; 300  :     return len ? gz_write(state, buf, len) / size : 0;

  0004f	85 f6		 test	 esi, esi
  00051	74 f6		 je	 SHORT $LN7@gzfwrite
  00053	8b 55 08	 mov	 edx, DWORD PTR _buf$[ebp]
  00056	56		 push	 esi
  00057	e8 00 00 00 00	 call	 _gz_write
  0005c	83 c4 04	 add	 esp, 4
  0005f	33 d2		 xor	 edx, edx
  00061	f7 f7		 div	 edi
  00063	5f		 pop	 edi
  00064	5e		 pop	 esi

; 301  : }

  00065	5d		 pop	 ebp
  00066	c3		 ret	 0
_gzfwrite ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\theclashingfritz\source\repos\inifileparser\zlib\gzwrite.c
;	COMDAT _gzputc
_TEXT	SEGMENT
_buf$ = -1						; size = 1
_file$ = 8						; size = 4
_c$ = 12						; size = 4
_gzputc	PROC						; COMDAT

; 307  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	51		 push	 ecx
  00007	53		 push	 ebx
  00008	56		 push	 esi

; 308  :     unsigned have;
; 309  :     unsigned char buf[1];
; 310  :     gz_statep state;
; 311  :     z_streamp strm;
; 312  : 
; 313  :     /* get internal structure */
; 314  :     if (file == NULL)

  00009	8b 75 08	 mov	 esi, DWORD PTR _file$[ebp]
  0000c	57		 push	 edi
  0000d	85 f6		 test	 esi, esi
  0000f	0f 84 9c 00 00
	00		 je	 $LN4@gzputc

; 315  :         return -1;
; 316  :     state = (gz_statep)file;
; 317  :     strm = &(state->strm);
; 318  : 
; 319  :     /* check that we're writing and that there's no error */
; 320  :     if (state->mode != GZ_WRITE || state->err != Z_OK)

  00015	81 7e 10 b1 79
	00 00		 cmp	 DWORD PTR [esi+16], 31153 ; 000079b1H
  0001c	0f 85 8f 00 00
	00		 jne	 $LN4@gzputc
  00022	83 7e 5c 00	 cmp	 DWORD PTR [esi+92], 0
  00026	0f 85 85 00 00
	00		 jne	 $LN4@gzputc

; 321  :         return -1;
; 322  : 
; 323  :     /* check for seek request */
; 324  :     if (state->seek) {

  0002c	83 7e 58 00	 cmp	 DWORD PTR [esi+88], 0
  00030	74 1c		 je	 SHORT $LN6@gzputc

; 325  :         state->seek = 0;
; 326  :         if (gz_zero(state, state->skip) == -1)

  00032	ff 76 54	 push	 DWORD PTR [esi+84]
  00035	8b ce		 mov	 ecx, esi
  00037	c7 46 58 00 00
	00 00		 mov	 DWORD PTR [esi+88], 0
  0003e	ff 76 50	 push	 DWORD PTR [esi+80]
  00041	e8 00 00 00 00	 call	 _gz_zero
  00046	83 c4 08	 add	 esp, 8
  00049	83 f8 ff	 cmp	 eax, -1
  0004c	74 63		 je	 SHORT $LN4@gzputc
$LN6@gzputc:

; 327  :             return -1;
; 328  :     }
; 329  : 
; 330  :     /* try writing to input buffer for speed (state->size == 0 if buffer not
; 331  :        initialized) */
; 332  :     if (state->size) {

  0004e	83 7e 1c 00	 cmp	 DWORD PTR [esi+28], 0
  00052	74 37		 je	 SHORT $LN9@gzputc

; 333  :         if (strm->avail_in == 0)

  00054	8b 56 68	 mov	 edx, DWORD PTR [esi+104]
  00057	85 d2		 test	 edx, edx
  00059	75 06		 jne	 SHORT $LN8@gzputc

; 334  :             strm->next_in = state->in;

  0005b	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  0005e	89 46 64	 mov	 DWORD PTR [esi+100], eax
$LN8@gzputc:

; 335  :         have = (unsigned)((strm->next_in + strm->avail_in) - state->in);

  00061	8b 4e 64	 mov	 ecx, DWORD PTR [esi+100]
  00064	8b 7e 24	 mov	 edi, DWORD PTR [esi+36]
  00067	2b cf		 sub	 ecx, edi
  00069	03 ca		 add	 ecx, edx

; 336  :         if (have < state->size) {

  0006b	3b 4e 1c	 cmp	 ecx, DWORD PTR [esi+28]
  0006e	73 1b		 jae	 SHORT $LN9@gzputc

; 337  :             state->in[have] = (unsigned char)c;

  00070	8b 45 0c	 mov	 eax, DWORD PTR _c$[ebp]
  00073	88 04 0f	 mov	 BYTE PTR [edi+ecx], al

; 338  :             strm->avail_in++;

  00076	ff 46 68	 inc	 DWORD PTR [esi+104]

; 339  :             state->x.pos++;

  00079	83 46 08 01	 add	 DWORD PTR [esi+8], 1

; 340  :             return c & 0xff;

  0007d	0f b6 c0	 movzx	 eax, al
  00080	83 56 0c 00	 adc	 DWORD PTR [esi+12], 0

; 349  : }

  00084	5f		 pop	 edi
  00085	5e		 pop	 esi
  00086	5b		 pop	 ebx
  00087	8b e5		 mov	 esp, ebp
  00089	5d		 pop	 ebp
  0008a	c3		 ret	 0
$LN9@gzputc:

; 341  :         }
; 342  :     }
; 343  : 
; 344  :     /* no room in buffer or not initialized, use gz_write() */
; 345  :     buf[0] = (unsigned char)c;

  0008b	8b 5d 0c	 mov	 ebx, DWORD PTR _c$[ebp]

; 346  :     if (gz_write(state, buf, 1) != 1)

  0008e	8d 54 24 0f	 lea	 edx, DWORD PTR _buf$[esp+16]
  00092	6a 01		 push	 1
  00094	8b ce		 mov	 ecx, esi
  00096	88 5c 24 13	 mov	 BYTE PTR _buf$[esp+20], bl
  0009a	e8 00 00 00 00	 call	 _gz_write
  0009f	83 c4 04	 add	 esp, 4
  000a2	83 f8 01	 cmp	 eax, 1
  000a5	75 0a		 jne	 SHORT $LN4@gzputc

; 347  :         return -1;
; 348  :     return c & 0xff;

  000a7	0f b6 c3	 movzx	 eax, bl

; 349  : }

  000aa	5f		 pop	 edi
  000ab	5e		 pop	 esi
  000ac	5b		 pop	 ebx
  000ad	8b e5		 mov	 esp, ebp
  000af	5d		 pop	 ebp
  000b0	c3		 ret	 0
$LN4@gzputc:
  000b1	5f		 pop	 edi
  000b2	5e		 pop	 esi
  000b3	83 c8 ff	 or	 eax, -1
  000b6	5b		 pop	 ebx
  000b7	8b e5		 mov	 esp, ebp
  000b9	5d		 pop	 ebp
  000ba	c3		 ret	 0
_gzputc	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\theclashingfritz\source\repos\inifileparser\zlib\gzwrite.c
;	COMDAT _gzputs
_TEXT	SEGMENT
_file$ = 8						; size = 4
_str$ = 12						; size = 4
_gzputs	PROC						; COMDAT

; 355  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 356  :     int ret;
; 357  :     z_size_t len;
; 358  :     gz_statep state;
; 359  : 
; 360  :     /* get internal structure */
; 361  :     if (file == NULL)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _file$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 3a		 je	 SHORT $LN4@gzputs

; 362  :         return -1;
; 363  :     state = (gz_statep)file;
; 364  : 
; 365  :     /* check that we're writing and that there's no error */
; 366  :     if (state->mode != GZ_WRITE || state->err != Z_OK)

  0000a	81 79 10 b1 79
	00 00		 cmp	 DWORD PTR [ecx+16], 31153 ; 000079b1H
  00011	75 31		 jne	 SHORT $LN4@gzputs
  00013	83 79 5c 00	 cmp	 DWORD PTR [ecx+92], 0
  00017	75 2b		 jne	 SHORT $LN4@gzputs

; 368  : 
; 369  :     /* write string */
; 370  :     len = strlen(str);

  00019	8b 55 0c	 mov	 edx, DWORD PTR _str$[ebp]
  0001c	56		 push	 esi
  0001d	8b f2		 mov	 esi, edx
  0001f	57		 push	 edi
  00020	8d 7e 01	 lea	 edi, DWORD PTR [esi+1]
$LL8@gzputs:
  00023	8a 06		 mov	 al, BYTE PTR [esi]
  00025	46		 inc	 esi
  00026	84 c0		 test	 al, al
  00028	75 f9		 jne	 SHORT $LL8@gzputs
  0002a	2b f7		 sub	 esi, edi

; 371  :     ret = gz_write(state, str, len);

  0002c	56		 push	 esi
  0002d	e8 00 00 00 00	 call	 _gz_write
  00032	83 c4 04	 add	 esp, 4

; 372  :     return ret == 0 && len != 0 ? -1 : ret;

  00035	85 c0		 test	 eax, eax
  00037	75 07		 jne	 SHORT $LN6@gzputs
  00039	85 f6		 test	 esi, esi
  0003b	74 03		 je	 SHORT $LN6@gzputs
  0003d	83 c8 ff	 or	 eax, -1
$LN6@gzputs:
  00040	5f		 pop	 edi
  00041	5e		 pop	 esi

; 373  : }

  00042	5d		 pop	 ebp
  00043	c3		 ret	 0
$LN4@gzputs:

; 367  :         return -1;

  00044	83 c8 ff	 or	 eax, -1

; 373  : }

  00047	5d		 pop	 ebp
  00048	c3		 ret	 0
_gzputs	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\theclashingfritz\source\repos\inifileparser\zlib\gzwrite.c
; File c:\program files (x86)\windows kits\10\include\10.0.10586.0\ucrt\stdio.h
; File c:\users\theclashingfritz\source\repos\inifileparser\zlib\gzwrite.c
; File c:\program files (x86)\windows kits\10\include\10.0.10586.0\ucrt\stdio.h
; File c:\users\theclashingfritz\source\repos\inifileparser\zlib\gzwrite.c
; File c:\program files (x86)\windows kits\10\include\10.0.10586.0\ucrt\stdio.h
; File c:\users\theclashingfritz\source\repos\inifileparser\zlib\gzwrite.c
;	COMDAT _gzvprintf
_TEXT	SEGMENT
_file$ = 8						; size = 4
_format$ = 12						; size = 4
_va$ = 16						; size = 4
_gzvprintf PROC						; COMDAT

; 380  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	51		 push	 ecx
  00007	53		 push	 ebx
  00008	56		 push	 esi

; 381  :     int len;
; 382  :     unsigned left;
; 383  :     char *next;
; 384  :     gz_statep state;
; 385  :     z_streamp strm;
; 386  : 
; 387  :     /* get internal structure */
; 388  :     if (file == NULL)

  00009	8b 75 08	 mov	 esi, DWORD PTR _file$[ebp]
  0000c	57		 push	 edi
  0000d	85 f6		 test	 esi, esi
  0000f	0f 84 09 01 00
	00		 je	 $LN4@gzvprintf

; 389  :         return Z_STREAM_ERROR;
; 390  :     state = (gz_statep)file;
; 391  :     strm = &(state->strm);
; 392  : 
; 393  :     /* check that we're writing and that there's no error */
; 394  :     if (state->mode != GZ_WRITE || state->err != Z_OK)

  00015	81 7e 10 b1 79
	00 00		 cmp	 DWORD PTR [esi+16], 31153 ; 000079b1H
  0001c	0f 85 fc 00 00
	00		 jne	 $LN4@gzvprintf
  00022	83 7e 5c 00	 cmp	 DWORD PTR [esi+92], 0
  00026	0f 85 f2 00 00
	00		 jne	 $LN4@gzvprintf

; 395  :         return Z_STREAM_ERROR;
; 396  : 
; 397  :     /* make sure we have some buffer space */
; 398  :     if (state->size == 0 && gz_init(state) == -1)

  0002c	83 7e 1c 00	 cmp	 DWORD PTR [esi+28], 0
  00030	75 16		 jne	 SHORT $LN5@gzvprintf
  00032	8b ce		 mov	 ecx, esi
  00034	e8 00 00 00 00	 call	 _gz_init
  00039	83 f8 ff	 cmp	 eax, -1
  0003c	75 0a		 jne	 SHORT $LN5@gzvprintf
$LN16@gzvprintf:

; 399  :         return state->err;

  0003e	8b 46 5c	 mov	 eax, DWORD PTR [esi+92]

; 449  : }

  00041	5f		 pop	 edi
  00042	5e		 pop	 esi
  00043	5b		 pop	 ebx
  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c3		 ret	 0
$LN5@gzvprintf:

; 400  : 
; 401  :     /* check for seek request */
; 402  :     if (state->seek) {

  00048	83 7e 58 00	 cmp	 DWORD PTR [esi+88], 0
  0004c	74 1c		 je	 SHORT $LN7@gzvprintf

; 403  :         state->seek = 0;
; 404  :         if (gz_zero(state, state->skip) == -1)

  0004e	ff 76 54	 push	 DWORD PTR [esi+84]
  00051	8b ce		 mov	 ecx, esi
  00053	c7 46 58 00 00
	00 00		 mov	 DWORD PTR [esi+88], 0
  0005a	ff 76 50	 push	 DWORD PTR [esi+80]
  0005d	e8 00 00 00 00	 call	 _gz_zero
  00062	83 c4 08	 add	 esp, 8
  00065	83 f8 ff	 cmp	 eax, -1
  00068	74 d4		 je	 SHORT $LN16@gzvprintf
$LN7@gzvprintf:

; 405  :             return state->err;
; 406  :     }
; 407  : 
; 408  :     /* do the printf() into the input buffer, put length in len -- the input
; 409  :        buffer is double-sized just for this function, so there is guaranteed to
; 410  :        be state->size bytes available after the current contents */
; 411  :     if (strm->avail_in == 0)

  0006a	8b 4e 68	 mov	 ecx, DWORD PTR [esi+104]
  0006d	85 c9		 test	 ecx, ecx
  0006f	75 06		 jne	 SHORT $LN8@gzvprintf

; 412  :         strm->next_in = state->in;

  00071	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  00074	89 46 64	 mov	 DWORD PTR [esi+100], eax
$LN8@gzvprintf:
; File c:\program files (x86)\windows kits\10\include\10.0.10586.0\ucrt\stdio.h

; 1436 :     int const _Result = __stdio_common_vsprintf(

  00077	ff 75 10	 push	 DWORD PTR _va$[ebp]
; File c:\users\theclashingfritz\source\repos\inifileparser\zlib\gzwrite.c

; 413  :     next = (char *)(state->in + (strm->next_in - state->in) + strm->avail_in);

  0007a	8b 5e 64	 mov	 ebx, DWORD PTR [esi+100]

; 414  :     next[state->size - 1] = 0;

  0007d	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00080	03 d9		 add	 ebx, ecx
; File c:\program files (x86)\windows kits\10\include\10.0.10586.0\ucrt\stdio.h

; 1436 :     int const _Result = __stdio_common_vsprintf(

  00082	6a 00		 push	 0
  00084	ff 75 0c	 push	 DWORD PTR _format$[ebp]
; File c:\users\theclashingfritz\source\repos\inifileparser\zlib\gzwrite.c

; 414  :     next[state->size - 1] = 0;

  00087	c6 44 18 ff 00	 mov	 BYTE PTR [eax+ebx-1], 0
; File c:\program files (x86)\windows kits\10\include\10.0.10586.0\ucrt\stdio.h

; 1436 :     int const _Result = __stdio_common_vsprintf(

  0008c	ff 76 1c	 push	 DWORD PTR [esi+28]
  0008f	53		 push	 ebx
  00090	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00095	8b 08		 mov	 ecx, DWORD PTR [eax]
  00097	ff 70 04	 push	 DWORD PTR [eax+4]
  0009a	83 c9 02	 or	 ecx, 2
  0009d	51		 push	 ecx
  0009e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vsprintf
  000a4	8b f8		 mov	 edi, eax
  000a6	83 c4 1c	 add	 esp, 28			; 0000001cH

; 1437 :         _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_STANDARD_SNPRINTF_BEHAVIOR,
; 1438 :         _Buffer, _BufferCount, _Format, NULL, _ArgList);
; 1439 : 
; 1440 :     return _Result < 0 ? -1 : _Result;

  000a9	83 c8 ff	 or	 eax, -1
  000ac	85 ff		 test	 edi, edi
  000ae	0f 48 f8	 cmovs	 edi, eax
; File c:\users\theclashingfritz\source\repos\inifileparser\zlib\gzwrite.c

; 433  :     if (len == 0 || (unsigned)len >= state->size || next[state->size - 1] != 0)

  000b1	85 ff		 test	 edi, edi
  000b3	74 60		 je	 SHORT $LN10@gzvprintf
  000b5	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  000b8	3b f8		 cmp	 edi, eax
  000ba	73 59		 jae	 SHORT $LN10@gzvprintf
  000bc	80 7c 18 ff 00	 cmp	 BYTE PTR [eax+ebx-1], 0
  000c1	75 52		 jne	 SHORT $LN10@gzvprintf

; 435  : 
; 436  :     /* update buffer and position, compress first half if past that */
; 437  :     strm->avail_in += (unsigned)len;

  000c3	01 7e 68	 add	 DWORD PTR [esi+104], edi

; 438  :     state->x.pos += len;

  000c6	8b c7		 mov	 eax, edi
  000c8	99		 cdq
  000c9	01 46 08	 add	 DWORD PTR [esi+8], eax

; 439  :     if (strm->avail_in >= state->size) {

  000cc	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  000cf	11 56 0c	 adc	 DWORD PTR [esi+12], edx
  000d2	8b 5e 68	 mov	 ebx, DWORD PTR [esi+104]
  000d5	3b d8		 cmp	 ebx, eax
  000d7	72 33		 jb	 SHORT $LN11@gzvprintf

; 440  :         left = strm->avail_in - state->size;
; 441  :         strm->avail_in = state->size;
; 442  :         if (gz_comp(state, Z_NO_FLUSH) == -1)

  000d9	33 d2		 xor	 edx, edx
  000db	89 46 68	 mov	 DWORD PTR [esi+104], eax
  000de	8b ce		 mov	 ecx, esi
  000e0	2b d8		 sub	 ebx, eax
  000e2	e8 00 00 00 00	 call	 _gz_comp
  000e7	83 f8 ff	 cmp	 eax, -1
  000ea	0f 84 4e ff ff
	ff		 je	 $LN16@gzvprintf

; 443  :             return state->err;
; 444  :         memcpy(state->in, state->in + state->size, left);

  000f0	8b 56 24	 mov	 edx, DWORD PTR [esi+36]
  000f3	8b 4e 1c	 mov	 ecx, DWORD PTR [esi+28]
  000f6	53		 push	 ebx
  000f7	03 ca		 add	 ecx, edx
  000f9	51		 push	 ecx
  000fa	52		 push	 edx
  000fb	e8 00 00 00 00	 call	 _memcpy

; 445  :         strm->next_in = state->in;

  00100	8b 4e 24	 mov	 ecx, DWORD PTR [esi+36]
  00103	83 c4 0c	 add	 esp, 12			; 0000000cH
  00106	89 4e 64	 mov	 DWORD PTR [esi+100], ecx

; 446  :         strm->avail_in = left;

  00109	89 5e 68	 mov	 DWORD PTR [esi+104], ebx
$LN11@gzvprintf:

; 447  :     }
; 448  :     return len;

  0010c	8b c7		 mov	 eax, edi

; 449  : }

  0010e	5f		 pop	 edi
  0010f	5e		 pop	 esi
  00110	5b		 pop	 ebx
  00111	8b e5		 mov	 esp, ebp
  00113	5d		 pop	 ebp
  00114	c3		 ret	 0
$LN10@gzvprintf:

; 434  :         return 0;

  00115	33 c0		 xor	 eax, eax

; 449  : }

  00117	5f		 pop	 edi
  00118	5e		 pop	 esi
  00119	5b		 pop	 ebx
  0011a	8b e5		 mov	 esp, ebp
  0011c	5d		 pop	 ebp
  0011d	c3		 ret	 0
$LN4@gzvprintf:
  0011e	5f		 pop	 edi
  0011f	5e		 pop	 esi
  00120	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  00125	5b		 pop	 ebx
  00126	8b e5		 mov	 esp, ebp
  00128	5d		 pop	 ebp
  00129	c3		 ret	 0
_gzvprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\theclashingfritz\source\repos\inifileparser\zlib\gzwrite.c
;	COMDAT _gzprintf
_TEXT	SEGMENT
_file$ = 8						; size = 4
_format$ = 12						; size = 4
_gzprintf PROC						; COMDAT

; 452  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 453  :     va_list va;
; 454  :     int ret;
; 455  : 
; 456  :     va_start(va, format);
; 457  :     ret = gzvprintf(file, format, va);

  00003	8d 45 10	 lea	 eax, DWORD PTR _format$[ebp+4]
  00006	50		 push	 eax
  00007	ff 75 0c	 push	 DWORD PTR _format$[ebp]
  0000a	ff 75 08	 push	 DWORD PTR _file$[ebp]
  0000d	e8 00 00 00 00	 call	 _gzvprintf
  00012	83 c4 0c	 add	 esp, 12			; 0000000cH

; 458  :     va_end(va);
; 459  :     return ret;
; 460  : }

  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
_gzprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\theclashingfritz\source\repos\inifileparser\zlib\gzwrite.c
;	COMDAT _gzflush
_TEXT	SEGMENT
_file$ = 8						; size = 4
_flush$ = 12						; size = 4
_gzflush PROC						; COMDAT

; 556  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	51		 push	 ecx
  00007	56		 push	 esi

; 557  :     gz_statep state;
; 558  : 
; 559  :     /* get internal structure */
; 560  :     if (file == NULL)

  00008	8b 75 08	 mov	 esi, DWORD PTR _file$[ebp]
  0000b	85 f6		 test	 esi, esi
  0000d	74 49		 je	 SHORT $LN4@gzflush

; 561  :         return Z_STREAM_ERROR;
; 562  :     state = (gz_statep)file;
; 563  : 
; 564  :     /* check that we're writing and that there's no error */
; 565  :     if (state->mode != GZ_WRITE || state->err != Z_OK)

  0000f	81 7e 10 b1 79
	00 00		 cmp	 DWORD PTR [esi+16], 31153 ; 000079b1H
  00016	75 40		 jne	 SHORT $LN4@gzflush
  00018	83 7e 5c 00	 cmp	 DWORD PTR [esi+92], 0
  0001c	75 3a		 jne	 SHORT $LN4@gzflush

; 567  : 
; 568  :     /* check flush parameter */
; 569  :     if (flush < 0 || flush > Z_FINISH)

  0001e	83 7d 0c 04	 cmp	 DWORD PTR _flush$[ebp], 4
  00022	77 34		 ja	 SHORT $LN4@gzflush

; 570  :         return Z_STREAM_ERROR;
; 571  : 
; 572  :     /* check for seek request */
; 573  :     if (state->seek) {

  00024	83 7e 58 00	 cmp	 DWORD PTR [esi+88], 0
  00028	74 1c		 je	 SHORT $LN8@gzflush

; 574  :         state->seek = 0;
; 575  :         if (gz_zero(state, state->skip) == -1)

  0002a	ff 76 54	 push	 DWORD PTR [esi+84]
  0002d	8b ce		 mov	 ecx, esi
  0002f	c7 46 58 00 00
	00 00		 mov	 DWORD PTR [esi+88], 0
  00036	ff 76 50	 push	 DWORD PTR [esi+80]
  00039	e8 00 00 00 00	 call	 _gz_zero
  0003e	83 c4 08	 add	 esp, 8
  00041	83 f8 ff	 cmp	 eax, -1
  00044	74 0a		 je	 SHORT $LN10@gzflush
$LN8@gzflush:

; 576  :             return state->err;
; 577  :     }
; 578  : 
; 579  :     /* compress remaining data with requested flush */
; 580  :     (void)gz_comp(state, flush);

  00046	8b 55 0c	 mov	 edx, DWORD PTR _flush$[ebp]
  00049	8b ce		 mov	 ecx, esi
  0004b	e8 00 00 00 00	 call	 _gz_comp
$LN10@gzflush:

; 581  :     return state->err;

  00050	8b 46 5c	 mov	 eax, DWORD PTR [esi+92]

; 582  : }

  00053	5e		 pop	 esi
  00054	8b e5		 mov	 esp, ebp
  00056	5d		 pop	 ebp
  00057	c3		 ret	 0
$LN4@gzflush:

; 566  :         return Z_STREAM_ERROR;

  00058	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH

; 582  : }

  0005d	5e		 pop	 esi
  0005e	8b e5		 mov	 esp, ebp
  00060	5d		 pop	 ebp
  00061	c3		 ret	 0
_gzflush ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\theclashingfritz\source\repos\inifileparser\zlib\gzwrite.c
;	COMDAT _gzsetparams
_TEXT	SEGMENT
_file$ = 8						; size = 4
_level$ = 12						; size = 4
_strategy$ = 16						; size = 4
_gzsetparams PROC					; COMDAT

; 589  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	51		 push	 ecx
  00007	53		 push	 ebx
  00008	56		 push	 esi

; 590  :     gz_statep state;
; 591  :     z_streamp strm;
; 592  : 
; 593  :     /* get internal structure */
; 594  :     if (file == NULL)

  00009	8b 75 08	 mov	 esi, DWORD PTR _file$[ebp]
  0000c	57		 push	 edi
  0000d	85 f6		 test	 esi, esi
  0000f	0f 84 8b 00 00
	00		 je	 $LN4@gzsetparam

; 595  :         return Z_STREAM_ERROR;
; 596  :     state = (gz_statep)file;
; 597  :     strm = &(state->strm);
; 598  : 
; 599  :     /* check that we're writing and that there's no error */
; 600  :     if (state->mode != GZ_WRITE || state->err != Z_OK)

  00015	81 7e 10 b1 79
	00 00		 cmp	 DWORD PTR [esi+16], 31153 ; 000079b1H
  0001c	8d 46 64	 lea	 eax, DWORD PTR [esi+100]
  0001f	75 7f		 jne	 SHORT $LN4@gzsetparam
  00021	83 7e 5c 00	 cmp	 DWORD PTR [esi+92], 0
  00025	75 79		 jne	 SHORT $LN4@gzsetparam

; 601  :         return Z_STREAM_ERROR;
; 602  : 
; 603  :     /* if no change is requested, then do nothing */
; 604  :     if (level == state->level && strategy == state->strategy)

  00027	8b 5d 0c	 mov	 ebx, DWORD PTR _level$[ebp]
  0002a	8b 7d 10	 mov	 edi, DWORD PTR _strategy$[ebp]
  0002d	3b 5e 48	 cmp	 ebx, DWORD PTR [esi+72]
  00030	75 05		 jne	 SHORT $LN5@gzsetparam
  00032	3b 7e 4c	 cmp	 edi, DWORD PTR [esi+76]
  00035	74 60		 je	 SHORT $LN13@gzsetparam
$LN5@gzsetparam:

; 605  :         return Z_OK;
; 606  : 
; 607  :     /* check for seek request */
; 608  :     if (state->seek) {

  00037	83 7e 58 00	 cmp	 DWORD PTR [esi+88], 0
  0003b	74 29		 je	 SHORT $LN7@gzsetparam

; 609  :         state->seek = 0;
; 610  :         if (gz_zero(state, state->skip) == -1)

  0003d	ff 76 54	 push	 DWORD PTR [esi+84]
  00040	8b ce		 mov	 ecx, esi
  00042	c7 46 58 00 00
	00 00		 mov	 DWORD PTR [esi+88], 0
  00049	ff 76 50	 push	 DWORD PTR [esi+80]
  0004c	e8 00 00 00 00	 call	 _gz_zero
  00051	83 c4 08	 add	 esp, 8
  00054	83 f8 ff	 cmp	 eax, -1
  00057	75 0a		 jne	 SHORT $LN12@gzsetparam
$LN14@gzsetparam:

; 611  :             return state->err;

  00059	8b 46 5c	 mov	 eax, DWORD PTR [esi+92]

; 624  : }

  0005c	5f		 pop	 edi
  0005d	5e		 pop	 esi
  0005e	5b		 pop	 ebx
  0005f	8b e5		 mov	 esp, ebp
  00061	5d		 pop	 ebp
  00062	c3		 ret	 0
$LN12@gzsetparam:

; 609  :         state->seek = 0;
; 610  :         if (gz_zero(state, state->skip) == -1)

  00063	8d 46 64	 lea	 eax, DWORD PTR [esi+100]
$LN7@gzsetparam:

; 612  :     }
; 613  : 
; 614  :     /* change compression parameters for subsequent input */
; 615  :     if (state->size) {

  00066	83 7e 1c 00	 cmp	 DWORD PTR [esi+28], 0
  0006a	74 25		 je	 SHORT $LN8@gzsetparam

; 616  :         /* flush previous input with previous parameters before changing */
; 617  :         if (strm->avail_in && gz_comp(state, Z_BLOCK) == -1)

  0006c	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00070	74 14		 je	 SHORT $LN9@gzsetparam
  00072	ba 05 00 00 00	 mov	 edx, 5
  00077	8b ce		 mov	 ecx, esi
  00079	e8 00 00 00 00	 call	 _gz_comp
  0007e	83 f8 ff	 cmp	 eax, -1
  00081	74 d6		 je	 SHORT $LN14@gzsetparam
  00083	8d 46 64	 lea	 eax, DWORD PTR [esi+100]
$LN9@gzsetparam:

; 618  :             return state->err;
; 619  :         deflateParams(strm, level, strategy);

  00086	57		 push	 edi
  00087	53		 push	 ebx
  00088	50		 push	 eax
  00089	e8 00 00 00 00	 call	 _deflateParams
  0008e	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN8@gzsetparam:

; 620  :     }
; 621  :     state->level = level;

  00091	89 5e 48	 mov	 DWORD PTR [esi+72], ebx

; 622  :     state->strategy = strategy;

  00094	89 7e 4c	 mov	 DWORD PTR [esi+76], edi
$LN13@gzsetparam:

; 623  :     return Z_OK;

  00097	33 c0		 xor	 eax, eax

; 624  : }

  00099	5f		 pop	 edi
  0009a	5e		 pop	 esi
  0009b	5b		 pop	 ebx
  0009c	8b e5		 mov	 esp, ebp
  0009e	5d		 pop	 ebp
  0009f	c3		 ret	 0
$LN4@gzsetparam:
  000a0	5f		 pop	 edi
  000a1	5e		 pop	 esi
  000a2	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  000a7	5b		 pop	 ebx
  000a8	8b e5		 mov	 esp, ebp
  000aa	5d		 pop	 ebp
  000ab	c3		 ret	 0
_gzsetparams ENDP
_TEXT	ENDS
END
