; Listing generated by Microsoft (R) Optimizing Compiler Version 19.11.25508.2 

	TITLE	c:\users\theclashingfritz\source\repos\inifileparser\zlib\deflate.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

?my_version@?1??deflateInit2_@@9@9 DB '1.2.11', 00H	; `deflateInit2_'::`2'::my_version
	ORG $+1
_configuration_table DW 00H
	DW	00H
	DW	00H
	DW	00H
	DD	FLAT:_deflate_stored
	DW	04H
	DW	04H
	DW	08H
	DW	04H
	DD	FLAT:_deflate_fast
	DW	04H
	DW	05H
	DW	010H
	DW	08H
	DD	FLAT:_deflate_fast
	DW	04H
	DW	06H
	DW	020H
	DW	020H
	DD	FLAT:_deflate_fast
	DW	04H
	DW	04H
	DW	010H
	DW	010H
	DD	FLAT:_deflate_slow
	DW	08H
	DW	010H
	DW	020H
	DW	020H
	DD	FLAT:_deflate_slow
	DW	08H
	DW	010H
	DW	080H
	DW	080H
	DD	FLAT:_deflate_slow
	DW	08H
	DW	020H
	DW	080H
	DW	0100H
	DD	FLAT:_deflate_slow
	DW	020H
	DW	080H
	DW	0102H
	DW	0400H
	DD	FLAT:_deflate_slow
	DW	020H
	DW	0102H
	DW	0102H
	DW	01000H
	DD	FLAT:_deflate_slow
PUBLIC	_deflateCopy
PUBLIC	_deflateBound
PUBLIC	_deflateTune
PUBLIC	_deflateParams
PUBLIC	_deflatePrime
PUBLIC	_deflatePending
PUBLIC	_deflateSetHeader
PUBLIC	_deflateReset
PUBLIC	_deflateResetKeep
PUBLIC	_deflateGetDictionary
PUBLIC	_deflateSetDictionary
PUBLIC	_deflateInit2_
PUBLIC	_deflateInit_
PUBLIC	_deflateEnd
PUBLIC	_deflate
; Function compile flags: /Ogtp
; File c:\users\theclashingfritz\source\repos\inifileparser\zlib\deflate.c
;	COMDAT _deflate
_TEXT	SEGMENT
_left$1$ = -8						; size = 4
_beg$1$ = -4						; size = 4
_strm$ = 8						; size = 4
_flush$ = 12						; size = 4
_deflate PROC						; COMDAT

; 766  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx
  00007	57		 push	 edi

; 767  :     int old_flush; /* value of flush param for previous deflate call */
; 768  :     deflate_state *s;
; 769  : 
; 770  :     if (deflateStateCheck(strm) || flush > Z_BLOCK || flush < 0) {

  00008	8b 7d 08	 mov	 edi, DWORD PTR _strm$[ebp]
  0000b	8b cf		 mov	 ecx, edi
  0000d	e8 00 00 00 00	 call	 _deflateStateCheck
  00012	85 c0		 test	 eax, eax
  00014	0f 85 6b 08 00
	00		 jne	 $LN29@deflate
  0001a	8b 5d 0c	 mov	 ebx, DWORD PTR _flush$[ebp]
  0001d	83 fb 05	 cmp	 ebx, 5
  00020	0f 87 5f 08 00
	00		 ja	 $LN29@deflate

; 771  :         return Z_STREAM_ERROR;
; 772  :     }
; 773  :     s = strm->state;

  00026	56		 push	 esi
  00027	8b 77 1c	 mov	 esi, DWORD PTR [edi+28]

; 774  : 
; 775  :     if (strm->next_out == Z_NULL ||
; 776  :         (strm->avail_in != 0 && strm->next_in == Z_NULL) ||

  0002a	39 47 0c	 cmp	 DWORD PTR [edi+12], eax
  0002d	0f 84 3e 08 00
	00		 je	 $LN31@deflate
  00033	39 47 04	 cmp	 DWORD PTR [edi+4], eax
  00036	74 08		 je	 SHORT $LN32@deflate
  00038	39 07		 cmp	 DWORD PTR [edi], eax
  0003a	0f 84 31 08 00
	00		 je	 $LN31@deflate
$LN32@deflate:
  00040	81 7e 04 9a 02
	00 00		 cmp	 DWORD PTR [esi+4], 666	; 0000029aH
  00047	75 09		 jne	 SHORT $LN30@deflate
  00049	83 fb 04	 cmp	 ebx, 4
  0004c	0f 85 1f 08 00
	00		 jne	 $LN31@deflate
$LN30@deflate:

; 779  :     }
; 780  :     if (strm->avail_out == 0) ERR_RETURN(strm, Z_BUF_ERROR);

  00052	83 7f 10 00	 cmp	 DWORD PTR [edi+16], 0
  00056	74 6d		 je	 SHORT $LN132@deflate

; 781  : 
; 782  :     old_flush = s->last_flush;
; 783  :     s->last_flush = flush;
; 784  : 
; 785  :     /* Flush as much pending output as possible */
; 786  :     if (s->pending != 0) {

  00058	83 7e 14 00	 cmp	 DWORD PTR [esi+20], 0
  0005c	8b 56 28	 mov	 edx, DWORD PTR [esi+40]
  0005f	89 5e 28	 mov	 DWORD PTR [esi+40], ebx
  00062	74 1b		 je	 SHORT $LN34@deflate

; 787  :         flush_pending(strm);

  00064	e8 00 00 00 00	 call	 _flush_pending

; 788  :         if (strm->avail_out == 0) {

  00069	83 7f 10 00	 cmp	 DWORD PTR [edi+16], 0
  0006d	75 42		 jne	 SHORT $LN37@deflate
$LN131@deflate:

; 870  :                 s->last_flush = -1;

  0006f	c7 46 28 ff ff
	ff ff		 mov	 DWORD PTR [esi+40], -1
$LN84@deflate:
  00076	5e		 pop	 esi

; 1073 : }

  00077	5f		 pop	 edi
  00078	33 c0		 xor	 eax, eax
  0007a	5b		 pop	 ebx
  0007b	8b e5		 mov	 esp, ebp
  0007d	5d		 pop	 ebp
  0007e	c3		 ret	 0
$LN34@deflate:

; 789  :             /* Since avail_out is 0, deflate will be called again with
; 790  :              * more output space, but possibly with both pending and
; 791  :              * avail_in equal to zero. There won't be anything to do,
; 792  :              * but this is not an error situation so make sure we
; 793  :              * return OK instead of BUF_ERROR at next call of deflate:
; 794  :              */
; 795  :             s->last_flush = -1;
; 796  :             return Z_OK;
; 797  :         }
; 798  : 
; 799  :     /* Make sure there is something to do and avoid duplicate consecutive
; 800  :      * flushes. For repeated and useless calls with Z_FINISH, we keep
; 801  :      * returning Z_STREAM_END instead of Z_BUF_ERROR.
; 802  :      */
; 803  :     } else if (strm->avail_in == 0 && RANK(flush) <= RANK(old_flush) &&

  0007f	83 7f 04 00	 cmp	 DWORD PTR [edi+4], 0
  00083	75 2c		 jne	 SHORT $LN37@deflate
  00085	33 c0		 xor	 eax, eax
  00087	b9 09 00 00 00	 mov	 ecx, 9
  0008c	83 fa 04	 cmp	 edx, 4
  0008f	0f 4f c1	 cmovg	 eax, ecx
  00092	03 d2		 add	 edx, edx
  00094	2b d0		 sub	 edx, eax
  00096	33 c9		 xor	 ecx, ecx
  00098	83 fb 04	 cmp	 ebx, 4
  0009b	b8 09 00 00 00	 mov	 eax, 9
  000a0	0f 4f c8	 cmovg	 ecx, eax
  000a3	8d 04 1b	 lea	 eax, DWORD PTR [ebx+ebx]
  000a6	2b c1		 sub	 eax, ecx
  000a8	3b c2		 cmp	 eax, edx
  000aa	7f 05		 jg	 SHORT $LN37@deflate
  000ac	83 fb 04	 cmp	 ebx, 4
  000af	75 14		 jne	 SHORT $LN132@deflate
$LN37@deflate:

; 804  :                flush != Z_FINISH) {
; 805  :         ERR_RETURN(strm, Z_BUF_ERROR);
; 806  :     }
; 807  : 
; 808  :     /* User must not provide more input after the first FINISH: */
; 809  :     if (s->status == FINISH_STATE && strm->avail_in != 0) {

  000b1	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000b4	3d 9a 02 00 00	 cmp	 eax, 666		; 0000029aH
  000b9	75 1e		 jne	 SHORT $LN38@deflate
  000bb	83 7f 04 00	 cmp	 DWORD PTR [edi+4], 0
  000bf	0f 84 cf 00 00
	00		 je	 $LN49@deflate
$LN132@deflate:

; 810  :         ERR_RETURN(strm, Z_BUF_ERROR);

  000c5	a1 1c 00 00 00	 mov	 eax, DWORD PTR _z_errmsg+28
  000ca	5e		 pop	 esi
  000cb	89 47 18	 mov	 DWORD PTR [edi+24], eax
  000ce	b8 fb ff ff ff	 mov	 eax, -5			; fffffffbH

; 1073 : }

  000d3	5f		 pop	 edi
  000d4	5b		 pop	 ebx
  000d5	8b e5		 mov	 esp, ebp
  000d7	5d		 pop	 ebp
  000d8	c3		 ret	 0
$LN38@deflate:

; 811  :     }
; 812  : 
; 813  :     /* Write the header */
; 814  :     if (s->status == INIT_STATE) {

  000d9	83 f8 2a	 cmp	 eax, 42			; 0000002aH
  000dc	0f 85 b2 00 00
	00		 jne	 $LN49@deflate

; 815  :         /* zlib header */
; 816  :         uInt header = (Z_DEFLATED + ((s->w_bits-8)<<4)) << 8;

  000e2	8b 4e 30	 mov	 ecx, DWORD PTR [esi+48]
  000e5	c1 e1 0c	 shl	 ecx, 12			; 0000000cH
  000e8	81 e9 00 78 00
	00		 sub	 ecx, 30720		; 00007800H

; 817  :         uInt level_flags;
; 818  : 
; 819  :         if (s->strategy >= Z_HUFFMAN_ONLY || s->level < 2)

  000ee	83 be 88 00 00
	00 02		 cmp	 DWORD PTR [esi+136], 2
  000f5	7d 29		 jge	 SHORT $LN42@deflate
  000f7	8b 96 84 00 00
	00		 mov	 edx, DWORD PTR [esi+132]
  000fd	83 fa 02	 cmp	 edx, 2
  00100	7c 1e		 jl	 SHORT $LN42@deflate

; 821  :         else if (s->level < 6)

  00102	83 fa 06	 cmp	 edx, 6
  00105	7d 07		 jge	 SHORT $LN43@deflate

; 822  :             level_flags = 1;

  00107	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0010c	eb 14		 jmp	 SHORT $LN46@deflate
$LN43@deflate:

; 823  :         else if (s->level == 6)

  0010e	83 fa 06	 cmp	 edx, 6
  00111	b8 c0 00 00 00	 mov	 eax, 192		; 000000c0H
  00116	bb 80 00 00 00	 mov	 ebx, 128		; 00000080H
  0011b	0f 44 c3	 cmove	 eax, ebx

; 824  :             level_flags = 2;
; 825  :         else
; 826  :             level_flags = 3;

  0011e	eb 02		 jmp	 SHORT $LN46@deflate
$LN42@deflate:

; 820  :             level_flags = 0;

  00120	33 c0		 xor	 eax, eax
$LN46@deflate:

; 827  :         header |= (level_flags << 6);
; 828  :         if (s->strstart != 0) header |= PRESET_DICT;

  00122	0b c1		 or	 eax, ecx
  00124	8b c8		 mov	 ecx, eax
  00126	83 c9 20	 or	 ecx, 32			; 00000020H
  00129	83 7e 6c 00	 cmp	 DWORD PTR [esi+108], 0
  0012d	0f 44 c8	 cmove	 ecx, eax

; 829  :         header += 31 - (header % 31);

  00130	b8 85 10 42 08	 mov	 eax, 138547333		; 08421085H
  00135	f7 e1		 mul	 ecx
  00137	2b ca		 sub	 ecx, edx
  00139	d1 e9		 shr	 ecx, 1
  0013b	03 ca		 add	 ecx, edx
  0013d	c1 e9 04	 shr	 ecx, 4
  00140	41		 inc	 ecx
  00141	8b d1		 mov	 edx, ecx
  00143	c1 e2 05	 shl	 edx, 5
  00146	2b d1		 sub	 edx, ecx

; 830  : 
; 831  :         putShortMSB(s, header);

  00148	8b ce		 mov	 ecx, esi
  0014a	e8 00 00 00 00	 call	 _putShortMSB

; 832  : 
; 833  :         /* Save the adler32 of the preset dictionary: */
; 834  :         if (s->strstart != 0) {

  0014f	83 7e 6c 00	 cmp	 DWORD PTR [esi+108], 0
  00153	74 16		 je	 SHORT $LN48@deflate

; 835  :             putShortMSB(s, (uInt)(strm->adler >> 16));

  00155	0f b7 57 32	 movzx	 edx, WORD PTR [edi+50]
  00159	8b ce		 mov	 ecx, esi
  0015b	e8 00 00 00 00	 call	 _putShortMSB

; 836  :             putShortMSB(s, (uInt)(strm->adler & 0xffff));

  00160	0f b7 57 30	 movzx	 edx, WORD PTR [edi+48]
  00164	8b ce		 mov	 ecx, esi
  00166	e8 00 00 00 00	 call	 _putShortMSB
$LN48@deflate:

; 837  :         }
; 838  :         strm->adler = adler32(0L, Z_NULL, 0);

  0016b	6a 00		 push	 0
  0016d	6a 00		 push	 0
  0016f	6a 00		 push	 0
  00171	e8 00 00 00 00	 call	 _adler32
  00176	83 c4 0c	 add	 esp, 12			; 0000000cH
  00179	89 47 30	 mov	 DWORD PTR [edi+48], eax

; 839  :         s->status = BUSY_STATE;
; 840  : 
; 841  :         /* Compression must start with an empty pending buffer */
; 842  :         flush_pending(strm);

  0017c	8b cf		 mov	 ecx, edi
  0017e	c7 46 04 71 00
	00 00		 mov	 DWORD PTR [esi+4], 113	; 00000071H
  00185	e8 00 00 00 00	 call	 _flush_pending

; 843  :         if (s->pending != 0) {

  0018a	83 7e 14 00	 cmp	 DWORD PTR [esi+20], 0
  0018e	0f 85 db fe ff
	ff		 jne	 $LN131@deflate
$LN49@deflate:

; 844  :             s->last_flush = -1;
; 845  :             return Z_OK;
; 846  :         }
; 847  :     }
; 848  : #ifdef GZIP
; 849  :     if (s->status == GZIP_STATE) {

  00194	83 7e 04 39	 cmp	 DWORD PTR [esi+4], 57	; 00000039H
  00198	0f 85 04 02 00
	00		 jne	 $LN52@deflate

; 850  :         /* gzip header */
; 851  :         strm->adler = crc32(0L, Z_NULL, 0);

  0019e	6a 00		 push	 0
  001a0	6a 00		 push	 0
  001a2	6a 00		 push	 0
  001a4	e8 00 00 00 00	 call	 _crc32
  001a9	89 47 30	 mov	 DWORD PTR [edi+48], eax
  001ac	83 c4 0c	 add	 esp, 12			; 0000000cH

; 852  :         put_byte(s, 31);

  001af	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  001b2	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  001b5	c6 04 01 1f	 mov	 BYTE PTR [ecx+eax], 31	; 0000001fH
  001b9	ff 46 14	 inc	 DWORD PTR [esi+20]
  001bc	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]

; 853  :         put_byte(s, 139);

  001bf	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  001c2	c6 04 01 8b	 mov	 BYTE PTR [ecx+eax], 139	; 0000008bH
  001c6	ff 46 14	 inc	 DWORD PTR [esi+20]
  001c9	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]

; 854  :         put_byte(s, 8);

  001cc	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  001cf	c6 04 01 08	 mov	 BYTE PTR [ecx+eax], 8
  001d3	ff 46 14	 inc	 DWORD PTR [esi+20]

; 855  :         if (s->gzhead == Z_NULL) {

  001d6	8b 56 1c	 mov	 edx, DWORD PTR [esi+28]
  001d9	8b 5e 14	 mov	 ebx, DWORD PTR [esi+20]
  001dc	85 d2		 test	 edx, edx
  001de	0f 85 9d 00 00
	00		 jne	 $LN51@deflate

; 856  :             put_byte(s, 0);

  001e4	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  001e7	88 14 03	 mov	 BYTE PTR [ebx+eax], dl
  001ea	ff 46 14	 inc	 DWORD PTR [esi+20]
  001ed	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]

; 857  :             put_byte(s, 0);

  001f0	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  001f3	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  001f6	ff 46 14	 inc	 DWORD PTR [esi+20]
  001f9	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]

; 858  :             put_byte(s, 0);

  001fc	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  001ff	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  00202	ff 46 14	 inc	 DWORD PTR [esi+20]
  00205	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]

; 859  :             put_byte(s, 0);

  00208	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0020b	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  0020e	ff 46 14	 inc	 DWORD PTR [esi+20]
  00211	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]

; 860  :             put_byte(s, 0);

  00214	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00217	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  0021a	ff 46 14	 inc	 DWORD PTR [esi+20]

; 861  :             put_byte(s, s->level == 9 ? 2 :

  0021d	8b 86 84 00 00
	00		 mov	 eax, DWORD PTR [esi+132]
  00223	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  00226	83 f8 09	 cmp	 eax, 9
  00229	75 04		 jne	 SHORT $LN100@deflate
  0022b	b1 02		 mov	 cl, 2
  0022d	eb 14		 jmp	 SHORT $LN99@deflate
$LN100@deflate:
  0022f	83 be 88 00 00
	00 02		 cmp	 DWORD PTR [esi+136], 2
  00236	7d 09		 jge	 SHORT $LN98@deflate
  00238	83 f8 02	 cmp	 eax, 2
  0023b	7c 04		 jl	 SHORT $LN98@deflate
  0023d	32 c9		 xor	 cl, cl
  0023f	eb 02		 jmp	 SHORT $LN99@deflate
$LN98@deflate:
  00241	b1 04		 mov	 cl, 4
$LN99@deflate:
  00243	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00246	88 0c 02	 mov	 BYTE PTR [edx+eax], cl
  00249	ff 46 14	 inc	 DWORD PTR [esi+20]
  0024c	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]

; 862  :                      (s->strategy >= Z_HUFFMAN_ONLY || s->level < 2 ?
; 863  :                       4 : 0));
; 864  :             put_byte(s, OS_CODE);

  0024f	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00252	c6 04 01 0a	 mov	 BYTE PTR [ecx+eax], 10	; 0000000aH

; 865  :             s->status = BUSY_STATE;
; 866  : 
; 867  :             /* Compression must start with an empty pending buffer */
; 868  :             flush_pending(strm);

  00256	8b cf		 mov	 ecx, edi
  00258	ff 46 14	 inc	 DWORD PTR [esi+20]
  0025b	c7 46 04 71 00
	00 00		 mov	 DWORD PTR [esi+4], 113	; 00000071H
  00262	e8 00 00 00 00	 call	 _flush_pending

; 869  :             if (s->pending != 0) {

  00267	83 7e 14 00	 cmp	 DWORD PTR [esi+20], 0
  0026b	0f 84 31 01 00
	00		 je	 $LN52@deflate

; 870  :                 s->last_flush = -1;

  00271	c7 46 28 ff ff
	ff ff		 mov	 DWORD PTR [esi+40], -1

; 871  :                 return Z_OK;

  00278	33 c0		 xor	 eax, eax
  0027a	5e		 pop	 esi

; 1073 : }

  0027b	5f		 pop	 edi
  0027c	5b		 pop	 ebx
  0027d	8b e5		 mov	 esp, ebp
  0027f	5d		 pop	 ebp
  00280	c3		 ret	 0
$LN51@deflate:

; 872  :             }
; 873  :         }
; 874  :         else {
; 875  :             put_byte(s, (s->gzhead->text ? 1 : 0) +

  00281	8b 4a 24	 mov	 ecx, DWORD PTR [edx+36]
  00284	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  00287	f7 d9		 neg	 ecx
  00289	1a c9		 sbb	 cl, cl
  0028b	80 e1 10	 and	 cl, 16			; 00000010H
  0028e	f7 d8		 neg	 eax
  00290	1a c0		 sbb	 al, al
  00292	24 02		 and	 al, 2
  00294	02 c8		 add	 cl, al
  00296	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  00299	f7 d8		 neg	 eax
  0029b	1a c0		 sbb	 al, al
  0029d	24 08		 and	 al, 8
  0029f	02 c8		 add	 cl, al
  002a1	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  002a4	f7 d8		 neg	 eax
  002a6	1a c0		 sbb	 al, al
  002a8	24 04		 and	 al, 4
  002aa	02 c8		 add	 cl, al
  002ac	83 3a 00	 cmp	 DWORD PTR [edx], 0
  002af	0f 95 c0	 setne	 al
  002b2	02 c8		 add	 cl, al
  002b4	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  002b7	88 0c 03	 mov	 BYTE PTR [ebx+eax], cl
  002ba	ff 46 14	 inc	 DWORD PTR [esi+20]
  002bd	8b 56 14	 mov	 edx, DWORD PTR [esi+20]

; 876  :                      (s->gzhead->hcrc ? 2 : 0) +
; 877  :                      (s->gzhead->extra == Z_NULL ? 0 : 4) +
; 878  :                      (s->gzhead->name == Z_NULL ? 0 : 8) +
; 879  :                      (s->gzhead->comment == Z_NULL ? 0 : 16)
; 880  :                      );
; 881  :             put_byte(s, (Byte)(s->gzhead->time & 0xff));

  002c0	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  002c3	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  002c6	0f b6 40 04	 movzx	 eax, BYTE PTR [eax+4]
  002ca	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  002cd	ff 46 14	 inc	 DWORD PTR [esi+20]
  002d0	8b 56 14	 mov	 edx, DWORD PTR [esi+20]

; 882  :             put_byte(s, (Byte)((s->gzhead->time >> 8) & 0xff));

  002d3	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  002d6	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  002d9	0f b6 40 05	 movzx	 eax, BYTE PTR [eax+5]
  002dd	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  002e0	ff 46 14	 inc	 DWORD PTR [esi+20]
  002e3	8b 56 14	 mov	 edx, DWORD PTR [esi+20]

; 883  :             put_byte(s, (Byte)((s->gzhead->time >> 16) & 0xff));

  002e6	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  002e9	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  002ec	0f b6 40 06	 movzx	 eax, BYTE PTR [eax+6]
  002f0	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  002f3	ff 46 14	 inc	 DWORD PTR [esi+20]

; 884  :             put_byte(s, (Byte)((s->gzhead->time >> 24) & 0xff));

  002f6	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  002f9	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  002fc	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  002ff	0f b6 40 07	 movzx	 eax, BYTE PTR [eax+7]
  00303	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  00306	ff 46 14	 inc	 DWORD PTR [esi+20]

; 885  :             put_byte(s, s->level == 9 ? 2 :

  00309	8b 86 84 00 00
	00		 mov	 eax, DWORD PTR [esi+132]
  0030f	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  00312	83 f8 09	 cmp	 eax, 9
  00315	75 04		 jne	 SHORT $LN104@deflate
  00317	b1 02		 mov	 cl, 2
  00319	eb 14		 jmp	 SHORT $LN103@deflate
$LN104@deflate:
  0031b	83 be 88 00 00
	00 02		 cmp	 DWORD PTR [esi+136], 2
  00322	7d 09		 jge	 SHORT $LN102@deflate
  00324	83 f8 02	 cmp	 eax, 2
  00327	7c 04		 jl	 SHORT $LN102@deflate
  00329	32 c9		 xor	 cl, cl
  0032b	eb 02		 jmp	 SHORT $LN103@deflate
$LN102@deflate:
  0032d	b1 04		 mov	 cl, 4
$LN103@deflate:
  0032f	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00332	88 0c 02	 mov	 BYTE PTR [edx+eax], cl
  00335	ff 46 14	 inc	 DWORD PTR [esi+20]

; 886  :                      (s->strategy >= Z_HUFFMAN_ONLY || s->level < 2 ?
; 887  :                       4 : 0));
; 888  :             put_byte(s, s->gzhead->os & 0xff);

  00338	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  0033b	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  0033e	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00341	8a 40 0c	 mov	 al, BYTE PTR [eax+12]
  00344	88 04 0a	 mov	 BYTE PTR [edx+ecx], al

; 889  :             if (s->gzhead->extra != Z_NULL) {

  00347	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  0034a	ff 46 14	 inc	 DWORD PTR [esi+20]
  0034d	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  00350	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  00354	74 23		 je	 SHORT $LN54@deflate

; 890  :                 put_byte(s, s->gzhead->extra_len & 0xff);

  00356	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00359	0f b6 40 14	 movzx	 eax, BYTE PTR [eax+20]
  0035d	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  00360	ff 46 14	 inc	 DWORD PTR [esi+20]

; 891  :                 put_byte(s, (s->gzhead->extra_len >> 8) & 0xff);

  00363	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00366	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  00369	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0036c	0f b6 40 15	 movzx	 eax, BYTE PTR [eax+21]
  00370	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  00373	ff 46 14	 inc	 DWORD PTR [esi+20]
  00376	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
$LN54@deflate:

; 892  :             }
; 893  :             if (s->gzhead->hcrc)

  00379	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  0037c	83 78 2c 00	 cmp	 DWORD PTR [eax+44], 0
  00380	74 12		 je	 SHORT $LN55@deflate

; 894  :                 strm->adler = crc32(strm->adler, s->pending_buf,

  00382	52		 push	 edx
  00383	ff 76 08	 push	 DWORD PTR [esi+8]
  00386	ff 77 30	 push	 DWORD PTR [edi+48]
  00389	e8 00 00 00 00	 call	 _crc32
  0038e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00391	89 47 30	 mov	 DWORD PTR [edi+48], eax
$LN55@deflate:

; 895  :                                     s->pending);
; 896  :             s->gzindex = 0;

  00394	c7 46 20 00 00
	00 00		 mov	 DWORD PTR [esi+32], 0

; 897  :             s->status = EXTRA_STATE;

  0039b	c7 46 04 45 00
	00 00		 mov	 DWORD PTR [esi+4], 69	; 00000045H
$LN52@deflate:

; 898  :         }
; 899  :     }
; 900  :     if (s->status == EXTRA_STATE) {

  003a2	83 7e 04 45	 cmp	 DWORD PTR [esi+4], 69	; 00000045H
  003a6	0f 85 f2 00 00
	00		 jne	 $LN56@deflate

; 901  :         if (s->gzhead->extra != Z_NULL) {

  003ac	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  003af	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  003b3	0f 84 de 00 00
	00		 je	 $LN57@deflate

; 902  :             ulg beg = s->pending;   /* start of bytes to update crc */
; 903  :             uInt left = (s->gzhead->extra_len & 0xffff) - s->gzindex;

  003b9	0f b7 48 14	 movzx	 ecx, WORD PTR [eax+20]
  003bd	2b 4e 20	 sub	 ecx, DWORD PTR [esi+32]
  003c0	8b 5e 14	 mov	 ebx, DWORD PTR [esi+20]
  003c3	89 5d fc	 mov	 DWORD PTR _beg$1$[ebp], ebx
  003c6	89 4d f8	 mov	 DWORD PTR _left$1$[ebp], ecx

; 904  :             while (s->pending + left > s->pending_buf_size) {

  003c9	8d 04 0b	 lea	 eax, DWORD PTR [ebx+ecx]
  003cc	3b 46 0c	 cmp	 eax, DWORD PTR [esi+12]
  003cf	76 78		 jbe	 SHORT $LN3@deflate
$LL2@deflate:

; 905  :                 uInt copy = s->pending_buf_size - s->pending;
; 906  :                 zmemcpy(s->pending_buf + s->pending,

  003d1	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  003d4	8b 5e 0c	 mov	 ebx, DWORD PTR [esi+12]
  003d7	2b 5e 14	 sub	 ebx, DWORD PTR [esi+20]
  003da	53		 push	 ebx
  003db	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  003de	03 46 20	 add	 eax, DWORD PTR [esi+32]
  003e1	50		 push	 eax
  003e2	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  003e5	03 46 14	 add	 eax, DWORD PTR [esi+20]
  003e8	50		 push	 eax
  003e9	e8 00 00 00 00	 call	 _memcpy

; 907  :                         s->gzhead->extra + s->gzindex, copy);
; 908  :                 s->pending = s->pending_buf_size;
; 909  :                 HCRC_UPDATE(beg);

  003ee	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  003f1	83 c4 0c	 add	 esp, 12			; 0000000cH
  003f4	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  003f7	89 4e 14	 mov	 DWORD PTR [esi+20], ecx
  003fa	83 78 2c 00	 cmp	 DWORD PTR [eax+44], 0
  003fe	74 1e		 je	 SHORT $LN4@deflate
  00400	8b 55 fc	 mov	 edx, DWORD PTR _beg$1$[ebp]
  00403	3b ca		 cmp	 ecx, edx
  00405	76 17		 jbe	 SHORT $LN4@deflate
  00407	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0040a	2b ca		 sub	 ecx, edx
  0040c	51		 push	 ecx
  0040d	03 c2		 add	 eax, edx
  0040f	50		 push	 eax
  00410	ff 77 30	 push	 DWORD PTR [edi+48]
  00413	e8 00 00 00 00	 call	 _crc32
  00418	83 c4 0c	 add	 esp, 12			; 0000000cH
  0041b	89 47 30	 mov	 DWORD PTR [edi+48], eax
$LN4@deflate:

; 910  :                 s->gzindex += copy;

  0041e	01 5e 20	 add	 DWORD PTR [esi+32], ebx

; 911  :                 flush_pending(strm);

  00421	8b cf		 mov	 ecx, edi
  00423	e8 00 00 00 00	 call	 _flush_pending

; 912  :                 if (s->pending != 0) {

  00428	83 7e 14 00	 cmp	 DWORD PTR [esi+20], 0
  0042c	0f 85 3d fc ff
	ff		 jne	 $LN131@deflate

; 913  :                     s->last_flush = -1;
; 914  :                     return Z_OK;
; 915  :                 }
; 916  :                 beg = 0;
; 917  :                 left -= copy;

  00432	8b 4d f8	 mov	 ecx, DWORD PTR _left$1$[ebp]
  00435	2b cb		 sub	 ecx, ebx
  00437	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _beg$1$[ebp], 0
  0043e	89 4d f8	 mov	 DWORD PTR _left$1$[ebp], ecx
  00441	3b 4e 0c	 cmp	 ecx, DWORD PTR [esi+12]
  00444	77 8b		 ja	 SHORT $LL2@deflate

; 965  :             } while (val != 0);

  00446	8b 5d fc	 mov	 ebx, DWORD PTR _beg$1$[ebp]
$LN3@deflate:

; 918  :             }
; 919  :             zmemcpy(s->pending_buf + s->pending,

  00449	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  0044c	51		 push	 ecx
  0044d	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  00450	03 46 20	 add	 eax, DWORD PTR [esi+32]
  00453	50		 push	 eax
  00454	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00457	03 46 08	 add	 eax, DWORD PTR [esi+8]
  0045a	50		 push	 eax
  0045b	e8 00 00 00 00	 call	 _memcpy

; 920  :                     s->gzhead->extra + s->gzindex, left);
; 921  :             s->pending += left;

  00460	8b 45 f8	 mov	 eax, DWORD PTR _left$1$[ebp]
  00463	83 c4 0c	 add	 esp, 12			; 0000000cH
  00466	01 46 14	 add	 DWORD PTR [esi+20], eax

; 922  :             HCRC_UPDATE(beg);

  00469	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  0046c	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0046f	83 78 2c 00	 cmp	 DWORD PTR [eax+44], 0
  00473	74 1b		 je	 SHORT $LN7@deflate
  00475	3b cb		 cmp	 ecx, ebx
  00477	76 17		 jbe	 SHORT $LN7@deflate
  00479	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0047c	2b cb		 sub	 ecx, ebx
  0047e	51		 push	 ecx
  0047f	03 c3		 add	 eax, ebx
  00481	50		 push	 eax
  00482	ff 77 30	 push	 DWORD PTR [edi+48]
  00485	e8 00 00 00 00	 call	 _crc32
  0048a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0048d	89 47 30	 mov	 DWORD PTR [edi+48], eax
$LN7@deflate:

; 923  :             s->gzindex = 0;

  00490	c7 46 20 00 00
	00 00		 mov	 DWORD PTR [esi+32], 0
$LN57@deflate:

; 924  :         }
; 925  :         s->status = NAME_STATE;

  00497	c7 46 04 49 00
	00 00		 mov	 DWORD PTR [esi+4], 73	; 00000049H
$LN56@deflate:

; 926  :     }
; 927  :     if (s->status == NAME_STATE) {

  0049e	83 7e 04 49	 cmp	 DWORD PTR [esi+4], 73	; 00000049H
  004a2	0f 85 a6 00 00
	00		 jne	 $LN61@deflate

; 928  :         if (s->gzhead->name != Z_NULL) {

  004a8	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  004ab	83 78 1c 00	 cmp	 DWORD PTR [eax+28], 0
  004af	0f 84 92 00 00
	00		 je	 $LN62@deflate

; 929  :             ulg beg = s->pending;   /* start of bytes to update crc */

  004b5	8b 5e 14	 mov	 ebx, DWORD PTR [esi+20]
$LL12@deflate:

; 930  :             int val;
; 931  :             do {
; 932  :                 if (s->pending == s->pending_buf_size) {

  004b8	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  004bb	3b 4e 0c	 cmp	 ecx, DWORD PTR [esi+12]
  004be	75 37		 jne	 SHORT $LN63@deflate

; 933  :                     HCRC_UPDATE(beg);

  004c0	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  004c3	83 78 2c 00	 cmp	 DWORD PTR [eax+44], 0
  004c7	74 1b		 je	 SHORT $LN13@deflate
  004c9	3b cb		 cmp	 ecx, ebx
  004cb	76 17		 jbe	 SHORT $LN13@deflate
  004cd	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  004d0	2b cb		 sub	 ecx, ebx
  004d2	51		 push	 ecx
  004d3	03 c3		 add	 eax, ebx
  004d5	50		 push	 eax
  004d6	ff 77 30	 push	 DWORD PTR [edi+48]
  004d9	e8 00 00 00 00	 call	 _crc32
  004de	83 c4 0c	 add	 esp, 12			; 0000000cH
  004e1	89 47 30	 mov	 DWORD PTR [edi+48], eax
$LN13@deflate:

; 934  :                     flush_pending(strm);

  004e4	8b cf		 mov	 ecx, edi
  004e6	e8 00 00 00 00	 call	 _flush_pending

; 935  :                     if (s->pending != 0) {

  004eb	83 7e 14 00	 cmp	 DWORD PTR [esi+20], 0
  004ef	0f 85 7a fb ff
	ff		 jne	 $LN131@deflate

; 936  :                         s->last_flush = -1;
; 937  :                         return Z_OK;
; 938  :                     }
; 939  :                     beg = 0;

  004f5	33 db		 xor	 ebx, ebx
$LN63@deflate:

; 940  :                 }
; 941  :                 val = s->gzhead->name[s->gzindex++];

  004f7	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  004fa	8b 4e 20	 mov	 ecx, DWORD PTR [esi+32]
  004fd	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  00500	0f b6 14 08	 movzx	 edx, BYTE PTR [eax+ecx]
  00504	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]

; 942  :                 put_byte(s, val);

  00507	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0050a	89 46 20	 mov	 DWORD PTR [esi+32], eax
  0050d	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00510	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  00513	ff 46 14	 inc	 DWORD PTR [esi+20]
  00516	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]

; 943  :             } while (val != 0);

  00519	85 d2		 test	 edx, edx
  0051b	75 9b		 jne	 SHORT $LL12@deflate

; 944  :             HCRC_UPDATE(beg);

  0051d	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00520	39 50 2c	 cmp	 DWORD PTR [eax+44], edx
  00523	74 1b		 je	 SHORT $LN16@deflate
  00525	3b cb		 cmp	 ecx, ebx
  00527	76 17		 jbe	 SHORT $LN16@deflate
  00529	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0052c	2b cb		 sub	 ecx, ebx
  0052e	51		 push	 ecx
  0052f	03 c3		 add	 eax, ebx
  00531	50		 push	 eax
  00532	ff 77 30	 push	 DWORD PTR [edi+48]
  00535	e8 00 00 00 00	 call	 _crc32
  0053a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0053d	89 47 30	 mov	 DWORD PTR [edi+48], eax
$LN16@deflate:

; 945  :             s->gzindex = 0;

  00540	c7 46 20 00 00
	00 00		 mov	 DWORD PTR [esi+32], 0
$LN62@deflate:

; 946  :         }
; 947  :         s->status = COMMENT_STATE;

  00547	c7 46 04 5b 00
	00 00		 mov	 DWORD PTR [esi+4], 91	; 0000005bH
$LN61@deflate:

; 948  :     }
; 949  :     if (s->status == COMMENT_STATE) {

  0054e	83 7e 04 5b	 cmp	 DWORD PTR [esi+4], 91	; 0000005bH
  00552	0f 85 9f 00 00
	00		 jne	 $LN67@deflate

; 950  :         if (s->gzhead->comment != Z_NULL) {

  00558	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  0055b	83 78 24 00	 cmp	 DWORD PTR [eax+36], 0
  0055f	0f 84 8b 00 00
	00		 je	 $LN26@deflate

; 951  :             ulg beg = s->pending;   /* start of bytes to update crc */

  00565	8b 5e 14	 mov	 ebx, DWORD PTR [esi+20]
$LL21@deflate:

; 952  :             int val;
; 953  :             do {
; 954  :                 if (s->pending == s->pending_buf_size) {

  00568	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0056b	3b 4e 0c	 cmp	 ecx, DWORD PTR [esi+12]
  0056e	75 37		 jne	 SHORT $LN69@deflate

; 955  :                     HCRC_UPDATE(beg);

  00570	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00573	83 78 2c 00	 cmp	 DWORD PTR [eax+44], 0
  00577	74 1b		 je	 SHORT $LN22@deflate
  00579	3b cb		 cmp	 ecx, ebx
  0057b	76 17		 jbe	 SHORT $LN22@deflate
  0057d	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00580	2b cb		 sub	 ecx, ebx
  00582	51		 push	 ecx
  00583	03 c3		 add	 eax, ebx
  00585	50		 push	 eax
  00586	ff 77 30	 push	 DWORD PTR [edi+48]
  00589	e8 00 00 00 00	 call	 _crc32
  0058e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00591	89 47 30	 mov	 DWORD PTR [edi+48], eax
$LN22@deflate:

; 956  :                     flush_pending(strm);

  00594	8b cf		 mov	 ecx, edi
  00596	e8 00 00 00 00	 call	 _flush_pending

; 957  :                     if (s->pending != 0) {

  0059b	83 7e 14 00	 cmp	 DWORD PTR [esi+20], 0
  0059f	0f 85 ca fa ff
	ff		 jne	 $LN131@deflate

; 958  :                         s->last_flush = -1;
; 959  :                         return Z_OK;
; 960  :                     }
; 961  :                     beg = 0;

  005a5	33 db		 xor	 ebx, ebx
$LN69@deflate:

; 962  :                 }
; 963  :                 val = s->gzhead->comment[s->gzindex++];

  005a7	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  005aa	8b 4e 20	 mov	 ecx, DWORD PTR [esi+32]
  005ad	8b 40 24	 mov	 eax, DWORD PTR [eax+36]
  005b0	0f b6 14 08	 movzx	 edx, BYTE PTR [eax+ecx]
  005b4	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]

; 964  :                 put_byte(s, val);

  005b7	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  005ba	89 46 20	 mov	 DWORD PTR [esi+32], eax
  005bd	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  005c0	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  005c3	ff 46 14	 inc	 DWORD PTR [esi+20]
  005c6	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]

; 965  :             } while (val != 0);

  005c9	85 d2		 test	 edx, edx
  005cb	75 9b		 jne	 SHORT $LL21@deflate

; 966  :             HCRC_UPDATE(beg);

  005cd	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  005d0	39 50 2c	 cmp	 DWORD PTR [eax+44], edx
  005d3	74 1b		 je	 SHORT $LN26@deflate
  005d5	3b cb		 cmp	 ecx, ebx
  005d7	76 17		 jbe	 SHORT $LN26@deflate
  005d9	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  005dc	2b cb		 sub	 ecx, ebx
  005de	51		 push	 ecx
  005df	03 c3		 add	 eax, ebx
  005e1	50		 push	 eax
  005e2	ff 77 30	 push	 DWORD PTR [edi+48]
  005e5	e8 00 00 00 00	 call	 _crc32
  005ea	83 c4 0c	 add	 esp, 12			; 0000000cH
  005ed	89 47 30	 mov	 DWORD PTR [edi+48], eax
$LN26@deflate:

; 967  :         }
; 968  :         s->status = HCRC_STATE;

  005f0	c7 46 04 67 00
	00 00		 mov	 DWORD PTR [esi+4], 103	; 00000067H
$LN67@deflate:

; 969  :     }
; 970  :     if (s->status == HCRC_STATE) {

  005f7	83 7e 04 67	 cmp	 DWORD PTR [esi+4], 103	; 00000067H
  005fb	75 6e		 jne	 SHORT $LN77@deflate

; 971  :         if (s->gzhead->hcrc) {

  005fd	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00600	83 78 2c 00	 cmp	 DWORD PTR [eax+44], 0
  00604	74 4d		 je	 SHORT $LN74@deflate

; 972  :             if (s->pending + 2 > s->pending_buf_size) {

  00606	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00609	83 c0 02	 add	 eax, 2
  0060c	3b 46 0c	 cmp	 eax, DWORD PTR [esi+12]
  0060f	76 11		 jbe	 SHORT $LN76@deflate

; 973  :                 flush_pending(strm);

  00611	8b cf		 mov	 ecx, edi
  00613	e8 00 00 00 00	 call	 _flush_pending

; 974  :                 if (s->pending != 0) {

  00618	83 7e 14 00	 cmp	 DWORD PTR [esi+20], 0
  0061c	0f 85 4d fa ff
	ff		 jne	 $LN131@deflate
$LN76@deflate:

; 975  :                     s->last_flush = -1;
; 976  :                     return Z_OK;
; 977  :                 }
; 978  :             }
; 979  :             put_byte(s, (Byte)(strm->adler & 0xff));

  00622	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  00625	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00628	0f b6 47 30	 movzx	 eax, BYTE PTR [edi+48]

; 980  :             put_byte(s, (Byte)((strm->adler >> 8) & 0xff));
; 981  :             strm->adler = crc32(0L, Z_NULL, 0);

  0062c	6a 00		 push	 0
  0062e	6a 00		 push	 0
  00630	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  00633	ff 46 14	 inc	 DWORD PTR [esi+20]
  00636	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  00639	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0063c	0f b6 47 31	 movzx	 eax, BYTE PTR [edi+49]
  00640	6a 00		 push	 0
  00642	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  00645	ff 46 14	 inc	 DWORD PTR [esi+20]
  00648	e8 00 00 00 00	 call	 _crc32
  0064d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00650	89 47 30	 mov	 DWORD PTR [edi+48], eax
$LN74@deflate:

; 982  :         }
; 983  :         s->status = BUSY_STATE;
; 984  : 
; 985  :         /* Compression must start with an empty pending buffer */
; 986  :         flush_pending(strm);

  00653	8b cf		 mov	 ecx, edi
  00655	c7 46 04 71 00
	00 00		 mov	 DWORD PTR [esi+4], 113	; 00000071H
  0065c	e8 00 00 00 00	 call	 _flush_pending

; 987  :         if (s->pending != 0) {

  00661	83 7e 14 00	 cmp	 DWORD PTR [esi+20], 0
  00665	0f 85 04 fa ff
	ff		 jne	 $LN131@deflate
$LN77@deflate:

; 988  :             s->last_flush = -1;
; 989  :             return Z_OK;
; 990  :         }
; 991  :     }
; 992  : #endif
; 993  : 
; 994  :     /* Start a new block or continue the current one.
; 995  :      */
; 996  :     if (strm->avail_in != 0 || s->lookahead != 0 ||

  0066b	83 7f 04 00	 cmp	 DWORD PTR [edi+4], 0
  0066f	8b 5d 0c	 mov	 ebx, DWORD PTR _flush$[ebp]
  00672	75 1b		 jne	 SHORT $LN79@deflate
  00674	83 7e 74 00	 cmp	 DWORD PTR [esi+116], 0
  00678	75 15		 jne	 SHORT $LN79@deflate
  0067a	85 db		 test	 ebx, ebx
  0067c	0f 84 f8 00 00
	00		 je	 $LN91@deflate
  00682	81 7e 04 9a 02
	00 00		 cmp	 DWORD PTR [esi+4], 666	; 0000029aH
  00689	0f 84 eb 00 00
	00		 je	 $LN91@deflate
$LN79@deflate:

; 997  :         (flush != Z_NO_FLUSH && s->status != FINISH_STATE)) {
; 998  :         block_state bstate;
; 999  : 
; 1000 :         bstate = s->level == 0 ? deflate_stored(s, flush) :

  0068f	8b 86 84 00 00
	00		 mov	 eax, DWORD PTR [esi+132]
  00695	85 c0		 test	 eax, eax
  00697	75 09		 jne	 SHORT $LN110@deflate
  00699	53		 push	 ebx
  0069a	56		 push	 esi
  0069b	e8 00 00 00 00	 call	 _deflate_stored
  006a0	eb 34		 jmp	 SHORT $LN130@deflate
$LN110@deflate:
  006a2	8b 8e 88 00 00
	00		 mov	 ecx, DWORD PTR [esi+136]
  006a8	83 f9 02	 cmp	 ecx, 2
  006ab	75 0b		 jne	 SHORT $LN108@deflate
  006ad	8b d3		 mov	 edx, ebx
  006af	8b ce		 mov	 ecx, esi
  006b1	e8 00 00 00 00	 call	 _deflate_huff
  006b6	eb 21		 jmp	 SHORT $LN107@deflate
$LN108@deflate:
  006b8	83 f9 03	 cmp	 ecx, 3
  006bb	75 0b		 jne	 SHORT $LN106@deflate
  006bd	8b d3		 mov	 edx, ebx
  006bf	8b ce		 mov	 ecx, esi
  006c1	e8 00 00 00 00	 call	 _deflate_rle
  006c6	eb 11		 jmp	 SHORT $LN107@deflate
$LN106@deflate:
  006c8	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  006cb	8b 04 85 08 00
	00 00		 mov	 eax, DWORD PTR _configuration_table[eax*4+8]
  006d2	53		 push	 ebx
  006d3	56		 push	 esi
  006d4	ff d0		 call	 eax
$LN130@deflate:
  006d6	83 c4 08	 add	 esp, 8
$LN107@deflate:

; 1001 :                  s->strategy == Z_HUFFMAN_ONLY ? deflate_huff(s, flush) :
; 1002 :                  s->strategy == Z_RLE ? deflate_rle(s, flush) :
; 1003 :                  (*(configuration_table[s->level].func))(s, flush);
; 1004 : 
; 1005 :         if (bstate == finish_started || bstate == finish_done) {

  006d9	83 f8 02	 cmp	 eax, 2
  006dc	74 05		 je	 SHORT $LN81@deflate
  006de	83 f8 03	 cmp	 eax, 3
  006e1	75 07		 jne	 SHORT $LN80@deflate
$LN81@deflate:

; 1006 :             s->status = FINISH_STATE;

  006e3	c7 46 04 9a 02
	00 00		 mov	 DWORD PTR [esi+4], 666	; 0000029aH
$LN80@deflate:

; 1007 :         }
; 1008 :         if (bstate == need_more || bstate == finish_started) {

  006ea	85 c0		 test	 eax, eax
  006ec	0f 84 65 01 00
	00		 je	 $LN83@deflate
  006f2	83 f8 02	 cmp	 eax, 2
  006f5	0f 84 5c 01 00
	00		 je	 $LN83@deflate

; 1010 :                 s->last_flush = -1; /* avoid BUF_ERROR next call, see above */
; 1011 :             }
; 1012 :             return Z_OK;
; 1013 :             /* If flush != Z_NO_FLUSH && avail_out == 0, the next call
; 1014 :              * of deflate should use the same flush parameter to make sure
; 1015 :              * that the flush is complete. So we don't have to output an
; 1016 :              * empty block here, this will be done at next call. This also
; 1017 :              * ensures that for a very small output buffer, we emit at most
; 1018 :              * one empty block.
; 1019 :              */
; 1020 :         }
; 1021 :         if (bstate == block_done) {

  006fb	83 f8 01	 cmp	 eax, 1
  006fe	75 7a		 jne	 SHORT $LN91@deflate

; 1022 :             if (flush == Z_PARTIAL_FLUSH) {

  00700	3b d8		 cmp	 ebx, eax
  00702	75 09		 jne	 SHORT $LN86@deflate

; 1023 :                 _tr_align(s);

  00704	8b ce		 mov	 ecx, esi
  00706	e8 00 00 00 00	 call	 __tr_align
  0070b	eb 5c		 jmp	 SHORT $LN90@deflate
$LN86@deflate:

; 1024 :             } else if (flush != Z_BLOCK) { /* FULL_FLUSH or SYNC_FLUSH */

  0070d	83 fb 05	 cmp	 ebx, 5
  00710	74 57		 je	 SHORT $LN90@deflate

; 1025 :                 _tr_stored_block(s, (char*)0, 0L, 0);

  00712	6a 00		 push	 0
  00714	6a 00		 push	 0
  00716	33 d2		 xor	 edx, edx
  00718	8b ce		 mov	 ecx, esi
  0071a	e8 00 00 00 00	 call	 __tr_stored_block
  0071f	83 c4 08	 add	 esp, 8

; 1026 :                 /* For a full flush, this empty block will be recognized
; 1027 :                  * as a special marker by inflate_sync().
; 1028 :                  */
; 1029 :                 if (flush == Z_FULL_FLUSH) {

  00722	83 fb 03	 cmp	 ebx, 3
  00725	75 42		 jne	 SHORT $LN90@deflate

; 1030 :                     CLEAR_HASH(s);             /* forget history */

  00727	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
  0072a	33 d2		 xor	 edx, edx
  0072c	8b 4e 4c	 mov	 ecx, DWORD PTR [esi+76]
  0072f	66 89 54 48 fe	 mov	 WORD PTR [eax+ecx*2-2], dx
  00734	8b 46 4c	 mov	 eax, DWORD PTR [esi+76]
  00737	8d 04 45 fe ff
	ff ff		 lea	 eax, DWORD PTR [eax*2-2]
  0073e	50		 push	 eax
  0073f	52		 push	 edx
  00740	ff 76 44	 push	 DWORD PTR [esi+68]
  00743	e8 00 00 00 00	 call	 _memset
  00748	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1031 :                     if (s->lookahead == 0) {

  0074b	83 7e 74 00	 cmp	 DWORD PTR [esi+116], 0
  0074f	75 18		 jne	 SHORT $LN90@deflate

; 1032 :                         s->strstart = 0;

  00751	c7 46 6c 00 00
	00 00		 mov	 DWORD PTR [esi+108], 0

; 1033 :                         s->block_start = 0L;

  00758	c7 46 5c 00 00
	00 00		 mov	 DWORD PTR [esi+92], 0

; 1034 :                         s->insert = 0;

  0075f	c7 86 b4 16 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+5812], 0
$LN90@deflate:

; 1035 :                     }
; 1036 :                 }
; 1037 :             }
; 1038 :             flush_pending(strm);

  00769	8b cf		 mov	 ecx, edi
  0076b	e8 00 00 00 00	 call	 _flush_pending

; 1039 :             if (strm->avail_out == 0) {

  00770	83 7f 10 00	 cmp	 DWORD PTR [edi+16], 0
  00774	0f 84 f5 f8 ff
	ff		 je	 $LN131@deflate
$LN91@deflate:

; 1040 :               s->last_flush = -1; /* avoid BUF_ERROR at next call, see above */
; 1041 :               return Z_OK;
; 1042 :             }
; 1043 :         }
; 1044 :     }
; 1045 : 
; 1046 :     if (flush != Z_FINISH) return Z_OK;

  0077a	83 fb 04	 cmp	 ebx, 4
  0077d	0f 85 f3 f8 ff
	ff		 jne	 $LN84@deflate

; 1047 :     if (s->wrap <= 0) return Z_STREAM_END;

  00783	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00786	85 c0		 test	 eax, eax
  00788	7f 0a		 jg	 SHORT $LN93@deflate

; 1073 : }

  0078a	5e		 pop	 esi
  0078b	5f		 pop	 edi
  0078c	8d 43 fd	 lea	 eax, DWORD PTR [ebx-3]
  0078f	5b		 pop	 ebx
  00790	8b e5		 mov	 esp, ebp
  00792	5d		 pop	 ebp
  00793	c3		 ret	 0
$LN93@deflate:

; 1048 : 
; 1049 :     /* Write the trailer */
; 1050 : #ifdef GZIP
; 1051 :     if (s->wrap == 2) {

  00794	83 f8 02	 cmp	 eax, 2
  00797	0f 85 82 00 00
	00		 jne	 $LN94@deflate

; 1052 :         put_byte(s, (Byte)(strm->adler & 0xff));

  0079d	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  007a0	0f b6 47 30	 movzx	 eax, BYTE PTR [edi+48]
  007a4	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  007a7	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  007aa	ff 46 14	 inc	 DWORD PTR [esi+20]
  007ad	8b 56 14	 mov	 edx, DWORD PTR [esi+20]

; 1053 :         put_byte(s, (Byte)((strm->adler >> 8) & 0xff));

  007b0	0f b6 47 31	 movzx	 eax, BYTE PTR [edi+49]
  007b4	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  007b7	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  007ba	ff 46 14	 inc	 DWORD PTR [esi+20]
  007bd	8b 56 14	 mov	 edx, DWORD PTR [esi+20]

; 1054 :         put_byte(s, (Byte)((strm->adler >> 16) & 0xff));

  007c0	0f b6 47 32	 movzx	 eax, BYTE PTR [edi+50]
  007c4	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  007c7	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  007ca	ff 46 14	 inc	 DWORD PTR [esi+20]
  007cd	8b 56 14	 mov	 edx, DWORD PTR [esi+20]

; 1055 :         put_byte(s, (Byte)((strm->adler >> 24) & 0xff));

  007d0	0f b6 47 33	 movzx	 eax, BYTE PTR [edi+51]
  007d4	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  007d7	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  007da	ff 46 14	 inc	 DWORD PTR [esi+20]
  007dd	8b 56 14	 mov	 edx, DWORD PTR [esi+20]

; 1056 :         put_byte(s, (Byte)(strm->total_in & 0xff));

  007e0	0f b6 47 08	 movzx	 eax, BYTE PTR [edi+8]
  007e4	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  007e7	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  007ea	ff 46 14	 inc	 DWORD PTR [esi+20]
  007ed	8b 56 14	 mov	 edx, DWORD PTR [esi+20]

; 1057 :         put_byte(s, (Byte)((strm->total_in >> 8) & 0xff));

  007f0	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  007f3	0f b6 47 09	 movzx	 eax, BYTE PTR [edi+9]
  007f7	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  007fa	ff 46 14	 inc	 DWORD PTR [esi+20]
  007fd	8b 56 14	 mov	 edx, DWORD PTR [esi+20]

; 1058 :         put_byte(s, (Byte)((strm->total_in >> 16) & 0xff));

  00800	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00803	0f b6 47 0a	 movzx	 eax, BYTE PTR [edi+10]
  00807	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  0080a	ff 46 14	 inc	 DWORD PTR [esi+20]
  0080d	8b 56 14	 mov	 edx, DWORD PTR [esi+20]

; 1059 :         put_byte(s, (Byte)((strm->total_in >> 24) & 0xff));

  00810	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00813	0f b6 47 0b	 movzx	 eax, BYTE PTR [edi+11]
  00817	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  0081a	ff 46 14	 inc	 DWORD PTR [esi+20]

; 1060 :     }

  0081d	eb 16		 jmp	 SHORT $LN95@deflate
$LN94@deflate:

; 1061 :     else
; 1062 : #endif
; 1063 :     {
; 1064 :         putShortMSB(s, (uInt)(strm->adler >> 16));

  0081f	0f b7 57 32	 movzx	 edx, WORD PTR [edi+50]
  00823	8b ce		 mov	 ecx, esi
  00825	e8 00 00 00 00	 call	 _putShortMSB

; 1065 :         putShortMSB(s, (uInt)(strm->adler & 0xffff));

  0082a	0f b7 57 30	 movzx	 edx, WORD PTR [edi+48]
  0082e	8b ce		 mov	 ecx, esi
  00830	e8 00 00 00 00	 call	 _putShortMSB
$LN95@deflate:

; 1066 :     }
; 1067 :     flush_pending(strm);

  00835	8b cf		 mov	 ecx, edi
  00837	e8 00 00 00 00	 call	 _flush_pending

; 1068 :     /* If avail_out is zero, the application will call deflate again
; 1069 :      * to flush the rest.
; 1070 :      */
; 1071 :     if (s->wrap > 0) s->wrap = -s->wrap; /* write the trailer only once! */

  0083c	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  0083f	85 c0		 test	 eax, eax
  00841	7e 05		 jle	 SHORT $LN96@deflate
  00843	f7 d8		 neg	 eax
  00845	89 46 18	 mov	 DWORD PTR [esi+24], eax
$LN96@deflate:

; 1072 :     return s->pending != 0 ? Z_OK : Z_STREAM_END;

  00848	33 c0		 xor	 eax, eax
  0084a	39 46 14	 cmp	 DWORD PTR [esi+20], eax
  0084d	5e		 pop	 esi

; 1073 : }

  0084e	5f		 pop	 edi
  0084f	0f 94 c0	 sete	 al
  00852	5b		 pop	 ebx
  00853	8b e5		 mov	 esp, ebp
  00855	5d		 pop	 ebp
  00856	c3		 ret	 0
$LN83@deflate:

; 1009 :             if (strm->avail_out == 0) {

  00857	83 7f 10 00	 cmp	 DWORD PTR [edi+16], 0
  0085b	0f 85 15 f8 ff
	ff		 jne	 $LN84@deflate

; 871  :                 return Z_OK;

  00861	c7 46 28 ff ff
	ff ff		 mov	 DWORD PTR [esi+40], -1
  00868	33 c0		 xor	 eax, eax
  0086a	5e		 pop	 esi

; 1073 : }

  0086b	5f		 pop	 edi
  0086c	5b		 pop	 ebx
  0086d	8b e5		 mov	 esp, ebp
  0086f	5d		 pop	 ebp
  00870	c3		 ret	 0
$LN31@deflate:

; 777  :         (s->status == FINISH_STATE && flush != Z_FINISH)) {
; 778  :         ERR_RETURN(strm, Z_STREAM_ERROR);

  00871	a1 10 00 00 00	 mov	 eax, DWORD PTR _z_errmsg+16
  00876	5e		 pop	 esi
  00877	89 47 18	 mov	 DWORD PTR [edi+24], eax
  0087a	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH

; 1073 : }

  0087f	5f		 pop	 edi
  00880	5b		 pop	 ebx
  00881	8b e5		 mov	 esp, ebp
  00883	5d		 pop	 ebp
  00884	c3		 ret	 0
$LN29@deflate:
  00885	5f		 pop	 edi
  00886	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  0088b	5b		 pop	 ebx
  0088c	8b e5		 mov	 esp, ebp
  0088e	5d		 pop	 ebp
  0088f	c3		 ret	 0
_deflate ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\theclashingfritz\source\repos\inifileparser\zlib\deflate.c
;	COMDAT _deflateEnd
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_deflateEnd PROC					; COMDAT

; 1078 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1079 :     int status;
; 1080 : 
; 1081 :     if (deflateStateCheck(strm)) return Z_STREAM_ERROR;

  00004	8b 75 08	 mov	 esi, DWORD PTR _strm$[ebp]
  00007	8b ce		 mov	 ecx, esi
  00009	e8 00 00 00 00	 call	 _deflateStateCheck
  0000e	85 c0		 test	 eax, eax
  00010	74 08		 je	 SHORT $LN2@deflateEnd
  00012	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH

; 1095 : }

  00017	5e		 pop	 esi
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
$LN2@deflateEnd:

; 1082 : 
; 1083 :     status = strm->state->status;

  0001a	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  0001d	57		 push	 edi
  0001e	8b 78 04	 mov	 edi, DWORD PTR [eax+4]

; 1084 : 
; 1085 :     /* Deallocate in reverse order of allocations: */
; 1086 :     TRY_FREE(strm, strm->state->pending_buf);

  00021	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00024	85 c0		 test	 eax, eax
  00026	74 0c		 je	 SHORT $LN3@deflateEnd
  00028	50		 push	 eax
  00029	ff 76 28	 push	 DWORD PTR [esi+40]
  0002c	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  0002f	ff d0		 call	 eax
  00031	83 c4 08	 add	 esp, 8
$LN3@deflateEnd:

; 1087 :     TRY_FREE(strm, strm->state->head);

  00034	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00037	8b 40 44	 mov	 eax, DWORD PTR [eax+68]
  0003a	85 c0		 test	 eax, eax
  0003c	74 0c		 je	 SHORT $LN4@deflateEnd
  0003e	50		 push	 eax
  0003f	ff 76 28	 push	 DWORD PTR [esi+40]
  00042	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  00045	ff d0		 call	 eax
  00047	83 c4 08	 add	 esp, 8
$LN4@deflateEnd:

; 1088 :     TRY_FREE(strm, strm->state->prev);

  0004a	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  0004d	8b 40 40	 mov	 eax, DWORD PTR [eax+64]
  00050	85 c0		 test	 eax, eax
  00052	74 0c		 je	 SHORT $LN5@deflateEnd
  00054	50		 push	 eax
  00055	ff 76 28	 push	 DWORD PTR [esi+40]
  00058	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  0005b	ff d0		 call	 eax
  0005d	83 c4 08	 add	 esp, 8
$LN5@deflateEnd:

; 1089 :     TRY_FREE(strm, strm->state->window);

  00060	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00063	8b 40 38	 mov	 eax, DWORD PTR [eax+56]
  00066	85 c0		 test	 eax, eax
  00068	74 0c		 je	 SHORT $LN6@deflateEnd
  0006a	50		 push	 eax
  0006b	ff 76 28	 push	 DWORD PTR [esi+40]
  0006e	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  00071	ff d0		 call	 eax
  00073	83 c4 08	 add	 esp, 8
$LN6@deflateEnd:

; 1090 : 
; 1091 :     ZFREE(strm, strm->state);

  00076	ff 76 1c	 push	 DWORD PTR [esi+28]
  00079	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  0007c	ff 76 28	 push	 DWORD PTR [esi+40]
  0007f	ff d0		 call	 eax
  00081	83 c4 08	 add	 esp, 8

; 1092 :     strm->state = Z_NULL;

  00084	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], 0

; 1093 : 
; 1094 :     return status == BUSY_STATE ? Z_DATA_ERROR : Z_OK;

  0008b	33 c0		 xor	 eax, eax
  0008d	b9 fd ff ff ff	 mov	 ecx, -3			; fffffffdH
  00092	83 ff 71	 cmp	 edi, 113		; 00000071H
  00095	5f		 pop	 edi
  00096	0f 44 c1	 cmove	 eax, ecx

; 1095 : }

  00099	5e		 pop	 esi
  0009a	5d		 pop	 ebp
  0009b	c3		 ret	 0
_deflateEnd ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\theclashingfritz\source\repos\inifileparser\zlib\deflate.c
;	COMDAT _deflateInit_
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_level$ = 12						; size = 4
_version$ = 16						; size = 4
_stream_size$ = 20					; size = 4
_deflateInit_ PROC					; COMDAT

; 233  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 234  :     return deflateInit2_(strm, level, Z_DEFLATED, MAX_WBITS, DEF_MEM_LEVEL,

  00003	ff 75 14	 push	 DWORD PTR _stream_size$[ebp]
  00006	ff 75 10	 push	 DWORD PTR _version$[ebp]
  00009	6a 00		 push	 0
  0000b	6a 08		 push	 8
  0000d	6a 0f		 push	 15			; 0000000fH
  0000f	6a 08		 push	 8
  00011	ff 75 0c	 push	 DWORD PTR _level$[ebp]
  00014	ff 75 08	 push	 DWORD PTR _strm$[ebp]
  00017	e8 00 00 00 00	 call	 _deflateInit2_
  0001c	83 c4 20	 add	 esp, 32			; 00000020H

; 235  :                          Z_DEFAULT_STRATEGY, version, stream_size);
; 236  :     /* To do: ignore strm->next_in if we use it as window */
; 237  : }

  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
_deflateInit_ ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\theclashingfritz\source\repos\inifileparser\zlib\deflate.c
;	COMDAT _slide_hash
_TEXT	SEGMENT
tv243 = -4						; size = 4
_slide_hash PROC					; COMDAT
; _s$ = ecx

; 203  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	8b d9		 mov	 ebx, ecx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 204  :     unsigned n, m;
; 205  :     Posf *p;
; 206  :     uInt wsize = s->w_size;
; 207  : 
; 208  :     n = s->hash_size;

  00009	8b 7b 4c	 mov	 edi, DWORD PTR [ebx+76]

; 209  :     p = &s->head[n];

  0000c	8b 43 44	 mov	 eax, DWORD PTR [ebx+68]
  0000f	8b 53 2c	 mov	 edx, DWORD PTR [ebx+44]
  00012	8d 34 78	 lea	 esi, DWORD PTR [eax+edi*2]
$LL4@slide_hash:

; 210  :     do {
; 211  :         m = *--p;

  00015	0f b7 4e fe	 movzx	 ecx, WORD PTR [esi-2]
  00019	8d 76 fe	 lea	 esi, DWORD PTR [esi-2]

; 212  :         *p = (Pos)(m >= wsize ? m - wsize : NIL);

  0001c	8b c1		 mov	 eax, ecx
  0001e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR tv243[ebp], 0
  00025	2b c2		 sub	 eax, edx
  00027	3b ca		 cmp	 ecx, edx
  00029	0f b7 c0	 movzx	 eax, ax
  0002c	0f 42 45 fc	 cmovb	 eax, DWORD PTR tv243[ebp]
  00030	66 89 06	 mov	 WORD PTR [esi], ax

; 213  :     } while (--n);

  00033	83 ef 01	 sub	 edi, 1
  00036	75 dd		 jne	 SHORT $LL4@slide_hash

; 214  :     n = wsize;
; 215  : #ifndef FASTEST
; 216  :     p = &s->prev[n];

  00038	8b 43 40	 mov	 eax, DWORD PTR [ebx+64]
  0003b	8b fa		 mov	 edi, edx
  0003d	8d 34 50	 lea	 esi, DWORD PTR [eax+edx*2]
$LL7@slide_hash:

; 217  :     do {
; 218  :         m = *--p;

  00040	0f b7 4e fe	 movzx	 ecx, WORD PTR [esi-2]
  00044	8d 76 fe	 lea	 esi, DWORD PTR [esi-2]

; 219  :         *p = (Pos)(m >= wsize ? m - wsize : NIL);

  00047	8b c1		 mov	 eax, ecx
  00049	33 db		 xor	 ebx, ebx
  0004b	2b c2		 sub	 eax, edx
  0004d	3b ca		 cmp	 ecx, edx
  0004f	0f b7 c0	 movzx	 eax, ax
  00052	0f 42 c3	 cmovb	 eax, ebx
  00055	66 89 06	 mov	 WORD PTR [esi], ax

; 220  :         /* If n is not on any hash chain, prev[n] is garbage but
; 221  :          * its value will never be used.
; 222  :          */
; 223  :     } while (--n);

  00058	83 ef 01	 sub	 edi, 1
  0005b	75 e3		 jne	 SHORT $LL7@slide_hash

; 224  : #endif
; 225  : }

  0005d	5f		 pop	 edi
  0005e	5e		 pop	 esi
  0005f	5b		 pop	 ebx
  00060	8b e5		 mov	 esp, ebp
  00062	5d		 pop	 ebp
  00063	c3		 ret	 0
_slide_hash ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\theclashingfritz\source\repos\inifileparser\zlib\deflate.c
;	COMDAT _deflateInit2_
_TEXT	SEGMENT
tv468 = -4						; size = 4
_strm$ = 8						; size = 4
_level$ = 12						; size = 4
_method$ = 16						; size = 4
_windowBits$ = 20					; size = 4
_memLevel$ = 24						; size = 4
_strategy$ = 28						; size = 4
_version$ = 32						; size = 4
_stream_size$ = 36					; size = 4
_deflateInit2_ PROC					; COMDAT

; 250  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 251  :     deflate_state *s;
; 252  :     int wrap = 1;
; 253  :     static const char my_version[] = ZLIB_VERSION;
; 254  : 
; 255  :     ushf *overlay;
; 256  :     /* We overlay pending_buf and d_buf+l_buf. This works since the average
; 257  :      * output size for (length,distance) codes is <= 24 bits.
; 258  :      */
; 259  : 
; 260  :     if (version == Z_NULL || version[0] != my_version[0] ||

  00004	8b 45 20	 mov	 eax, DWORD PTR _version$[ebp]
  00007	56		 push	 esi
  00008	be 01 00 00 00	 mov	 esi, 1
  0000d	85 c0		 test	 eax, eax
  0000f	0f 84 1d 02 00
	00		 je	 $LN3@deflateIni
  00015	80 38 31	 cmp	 BYTE PTR [eax], 49	; 00000031H
  00018	0f 85 14 02 00
	00		 jne	 $LN3@deflateIni
  0001e	83 7d 24 38	 cmp	 DWORD PTR _stream_size$[ebp], 56 ; 00000038H
  00022	0f 85 0a 02 00
	00		 jne	 $LN3@deflateIni

; 263  :     }
; 264  :     if (strm == Z_NULL) return Z_STREAM_ERROR;

  00028	57		 push	 edi
  00029	8b 7d 08	 mov	 edi, DWORD PTR _strm$[ebp]
  0002c	85 ff		 test	 edi, edi
  0002e	75 09		 jne	 SHORT $LN4@deflateIni
  00030	5f		 pop	 edi
  00031	8d 46 fd	 lea	 eax, DWORD PTR [esi-3]

; 348  : }

  00034	5e		 pop	 esi
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
$LN4@deflateIni:

; 265  : 
; 266  :     strm->msg = Z_NULL;
; 267  :     if (strm->zalloc == (alloc_func)0) {

  00039	83 7f 20 00	 cmp	 DWORD PTR [edi+32], 0
  0003d	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
  00044	75 0e		 jne	 SHORT $LN5@deflateIni

; 268  : #ifdef Z_SOLO
; 269  :         return Z_STREAM_ERROR;
; 270  : #else
; 271  :         strm->zalloc = zcalloc;

  00046	c7 47 20 00 00
	00 00		 mov	 DWORD PTR [edi+32], OFFSET _zcalloc

; 272  :         strm->opaque = (voidpf)0;

  0004d	c7 47 28 00 00
	00 00		 mov	 DWORD PTR [edi+40], 0
$LN5@deflateIni:

; 273  : #endif
; 274  :     }
; 275  :     if (strm->zfree == (free_func)0)

  00054	83 7f 24 00	 cmp	 DWORD PTR [edi+36], 0
  00058	75 07		 jne	 SHORT $LN6@deflateIni

; 276  : #ifdef Z_SOLO
; 277  :         return Z_STREAM_ERROR;
; 278  : #else
; 279  :         strm->zfree = zcfree;

  0005a	c7 47 24 00 00
	00 00		 mov	 DWORD PTR [edi+36], OFFSET _zcfree
$LN6@deflateIni:

; 280  : #endif
; 281  : 
; 282  : #ifdef FASTEST
; 283  :     if (level != 0) level = 1;
; 284  : #else
; 285  :     if (level == Z_DEFAULT_COMPRESSION) level = 6;

  00061	83 7d 0c ff	 cmp	 DWORD PTR _level$[ebp], -1
  00065	b9 06 00 00 00	 mov	 ecx, 6
  0006a	53		 push	 ebx
  0006b	0f 45 4d 0c	 cmovne	 ecx, DWORD PTR _level$[ebp]

; 286  : #endif
; 287  : 
; 288  :     if (windowBits < 0) { /* suppress zlib wrapper */

  0006f	8b 5d 14	 mov	 ebx, DWORD PTR _windowBits$[ebp]
  00072	89 4d fc	 mov	 DWORD PTR tv468[ebp], ecx
  00075	85 db		 test	 ebx, ebx
  00077	79 06		 jns	 SHORT $LN8@deflateIni

; 289  :         wrap = 0;

  00079	33 f6		 xor	 esi, esi

; 290  :         windowBits = -windowBits;

  0007b	f7 db		 neg	 ebx

; 291  :     }

  0007d	eb 0d		 jmp	 SHORT $LN10@deflateIni
$LN8@deflateIni:

; 292  : #ifdef GZIP
; 293  :     else if (windowBits > 15) {

  0007f	83 fb 0f	 cmp	 ebx, 15			; 0000000fH
  00082	7e 08		 jle	 SHORT $LN10@deflateIni

; 294  :         wrap = 2;       /* write gzip wrapper instead */

  00084	be 02 00 00 00	 mov	 esi, 2

; 295  :         windowBits -= 16;

  00089	83 eb 10	 sub	 ebx, 16			; 00000010H
$LN10@deflateIni:

; 296  :     }
; 297  : #endif
; 298  :     if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method != Z_DEFLATED ||
; 299  :         windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||
; 300  :         strategy < 0 || strategy > Z_FIXED || (windowBits == 8 && wrap != 1)) {

  0008c	8b 45 18	 mov	 eax, DWORD PTR _memLevel$[ebp]
  0008f	48		 dec	 eax
  00090	83 f8 08	 cmp	 eax, 8
  00093	0f 87 8d 01 00
	00		 ja	 $LN12@deflateIni
  00099	83 7d 10 08	 cmp	 DWORD PTR _method$[ebp], 8
  0009d	0f 85 83 01 00
	00		 jne	 $LN12@deflateIni
  000a3	8d 43 f8	 lea	 eax, DWORD PTR [ebx-8]
  000a6	83 f8 07	 cmp	 eax, 7
  000a9	0f 87 77 01 00
	00		 ja	 $LN12@deflateIni
  000af	83 f9 09	 cmp	 ecx, 9
  000b2	0f 87 6e 01 00
	00		 ja	 $LN12@deflateIni
  000b8	83 7d 1c 04	 cmp	 DWORD PTR _strategy$[ebp], 4
  000bc	0f 87 64 01 00
	00		 ja	 $LN12@deflateIni
  000c2	83 fb 08	 cmp	 ebx, 8
  000c5	75 0c		 jne	 SHORT $LN13@deflateIni
  000c7	83 fe 01	 cmp	 esi, 1
  000ca	0f 85 56 01 00
	00		 jne	 $LN12@deflateIni

; 302  :     }
; 303  :     if (windowBits == 8) windowBits = 9;  /* until 256-byte window bug fixed */

  000d0	8d 5e 08	 lea	 ebx, DWORD PTR [esi+8]
$LN13@deflateIni:

; 304  :     s = (deflate_state *) ZALLOC(strm, 1, sizeof(deflate_state));

  000d3	8b 47 20	 mov	 eax, DWORD PTR [edi+32]
  000d6	68 c4 16 00 00	 push	 5828			; 000016c4H
  000db	6a 01		 push	 1
  000dd	ff 77 28	 push	 DWORD PTR [edi+40]
  000e0	ff d0		 call	 eax
  000e2	83 c4 0c	 add	 esp, 12			; 0000000cH

; 305  :     if (s == Z_NULL) return Z_MEM_ERROR;

  000e5	85 c0		 test	 eax, eax
  000e7	0f 84 2d 01 00
	00		 je	 $LN21@deflateIni

; 306  :     strm->state = (struct internal_state FAR *)s;

  000ed	89 47 1c	 mov	 DWORD PTR [edi+28], eax

; 307  :     s->strm = strm;
; 308  :     s->status = INIT_STATE;     /* to pass state test in deflateReset() */
; 309  : 
; 310  :     s->wrap = wrap;
; 311  :     s->gzhead = Z_NULL;
; 312  :     s->w_bits = (uInt)windowBits;
; 313  :     s->w_size = 1 << s->w_bits;

  000f0	8b cb		 mov	 ecx, ebx
  000f2	89 70 18	 mov	 DWORD PTR [eax+24], esi
  000f5	be 01 00 00 00	 mov	 esi, 1
  000fa	89 58 30	 mov	 DWORD PTR [eax+48], ebx
  000fd	8b d8		 mov	 ebx, eax
  000ff	d3 e6		 shl	 esi, cl

; 314  :     s->w_mask = s->w_size - 1;
; 315  : 
; 316  :     s->hash_bits = (uInt)memLevel + 7;

  00101	8b 4d 18	 mov	 ecx, DWORD PTR _memLevel$[ebp]
  00104	89 38		 mov	 DWORD PTR [eax], edi
  00106	83 c1 07	 add	 ecx, 7
  00109	c7 40 04 2a 00
	00 00		 mov	 DWORD PTR [eax+4], 42	; 0000002aH
  00110	c7 40 1c 00 00
	00 00		 mov	 DWORD PTR [eax+28], 0
  00117	8d 46 ff	 lea	 eax, DWORD PTR [esi-1]
  0011a	89 43 34	 mov	 DWORD PTR [ebx+52], eax

; 317  :     s->hash_size = 1 << s->hash_bits;

  0011d	b8 01 00 00 00	 mov	 eax, 1
  00122	d3 e0		 shl	 eax, cl
  00124	89 43 4c	 mov	 DWORD PTR [ebx+76], eax

; 318  :     s->hash_mask = s->hash_size - 1;

  00127	48		 dec	 eax
  00128	89 43 54	 mov	 DWORD PTR [ebx+84], eax

; 319  :     s->hash_shift =  ((s->hash_bits+MIN_MATCH-1)/MIN_MATCH);

  0012b	b8 ab aa aa aa	 mov	 eax, -1431655765	; aaaaaaabH
  00130	89 4b 50	 mov	 DWORD PTR [ebx+80], ecx
  00133	83 c1 02	 add	 ecx, 2
  00136	f7 e1		 mul	 ecx

; 320  : 
; 321  :     s->window = (Bytef *) ZALLOC(strm, s->w_size, 2*sizeof(Byte));

  00138	6a 02		 push	 2
  0013a	d1 ea		 shr	 edx, 1
  0013c	89 73 2c	 mov	 DWORD PTR [ebx+44], esi
  0013f	89 53 58	 mov	 DWORD PTR [ebx+88], edx
  00142	8b 47 20	 mov	 eax, DWORD PTR [edi+32]
  00145	56		 push	 esi
  00146	ff 77 28	 push	 DWORD PTR [edi+40]
  00149	ff d0		 call	 eax

; 322  :     s->prev   = (Posf *)  ZALLOC(strm, s->w_size, sizeof(Pos));

  0014b	6a 02		 push	 2
  0014d	ff 73 2c	 push	 DWORD PTR [ebx+44]
  00150	89 43 38	 mov	 DWORD PTR [ebx+56], eax
  00153	ff 77 28	 push	 DWORD PTR [edi+40]
  00156	8b 47 20	 mov	 eax, DWORD PTR [edi+32]
  00159	ff d0		 call	 eax

; 323  :     s->head   = (Posf *)  ZALLOC(strm, s->hash_size, sizeof(Pos));

  0015b	6a 02		 push	 2
  0015d	ff 73 4c	 push	 DWORD PTR [ebx+76]
  00160	89 43 40	 mov	 DWORD PTR [ebx+64], eax
  00163	ff 77 28	 push	 DWORD PTR [edi+40]
  00166	8b 47 20	 mov	 eax, DWORD PTR [edi+32]
  00169	ff d0		 call	 eax

; 324  : 
; 325  :     s->high_water = 0;      /* nothing written to s->window yet */
; 326  : 
; 327  :     s->lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */

  0016b	8b 4d 18	 mov	 ecx, DWORD PTR _memLevel$[ebp]
  0016e	89 43 44	 mov	 DWORD PTR [ebx+68], eax
  00171	b8 01 00 00 00	 mov	 eax, 1

; 328  : 
; 329  :     overlay = (ushf *) ZALLOC(strm, s->lit_bufsize, sizeof(ush)+2);

  00176	6a 04		 push	 4
  00178	c7 83 c0 16 00
	00 00 00 00 00	 mov	 DWORD PTR [ebx+5824], 0
  00182	8d 49 06	 lea	 ecx, DWORD PTR [ecx+6]
  00185	d3 e0		 shl	 eax, cl
  00187	50		 push	 eax
  00188	89 83 9c 16 00
	00		 mov	 DWORD PTR [ebx+5788], eax
  0018e	ff 77 28	 push	 DWORD PTR [edi+40]
  00191	8b 47 20	 mov	 eax, DWORD PTR [edi+32]
  00194	ff d0		 call	 eax

; 330  :     s->pending_buf = (uchf *) overlay;
; 331  :     s->pending_buf_size = (ulg)s->lit_bufsize * (sizeof(ush)+2L);

  00196	8b b3 9c 16 00
	00		 mov	 esi, DWORD PTR [ebx+5788]
  0019c	83 c4 30	 add	 esp, 48			; 00000030H

; 332  : 
; 333  :     if (s->window == Z_NULL || s->prev == Z_NULL || s->head == Z_NULL ||

  0019f	83 7b 38 00	 cmp	 DWORD PTR [ebx+56], 0
  001a3	8b d0		 mov	 edx, eax
  001a5	89 53 08	 mov	 DWORD PTR [ebx+8], edx
  001a8	8d 0c b5 00 00
	00 00		 lea	 ecx, DWORD PTR [esi*4]
  001af	89 4b 0c	 mov	 DWORD PTR [ebx+12], ecx
  001b2	74 4e		 je	 SHORT $LN16@deflateIni
  001b4	83 7b 40 00	 cmp	 DWORD PTR [ebx+64], 0
  001b8	74 48		 je	 SHORT $LN16@deflateIni
  001ba	83 7b 44 00	 cmp	 DWORD PTR [ebx+68], 0
  001be	74 42		 je	 SHORT $LN16@deflateIni
  001c0	85 d2		 test	 edx, edx
  001c2	74 3e		 je	 SHORT $LN16@deflateIni

; 339  :     }
; 340  :     s->d_buf = overlay + s->lit_bufsize/sizeof(ush);

  001c4	8b c6		 mov	 eax, esi

; 341  :     s->l_buf = s->pending_buf + (1+sizeof(ush))*s->lit_bufsize;
; 342  : 
; 343  :     s->level = level;
; 344  :     s->strategy = strategy;
; 345  :     s->method = (Byte)method;

  001c6	c6 43 24 08	 mov	 BYTE PTR [ebx+36], 8
  001ca	d1 e8		 shr	 eax, 1

; 346  : 
; 347  :     return deflateReset(strm);

  001cc	57		 push	 edi
  001cd	8d 04 42	 lea	 eax, DWORD PTR [edx+eax*2]
  001d0	89 83 a4 16 00
	00		 mov	 DWORD PTR [ebx+5796], eax
  001d6	8d 04 72	 lea	 eax, DWORD PTR [edx+esi*2]
  001d9	03 c6		 add	 eax, esi
  001db	89 83 98 16 00
	00		 mov	 DWORD PTR [ebx+5784], eax
  001e1	8b 45 fc	 mov	 eax, DWORD PTR tv468[ebp]
  001e4	89 83 84 00 00
	00		 mov	 DWORD PTR [ebx+132], eax
  001ea	8b 45 1c	 mov	 eax, DWORD PTR _strategy$[ebp]
  001ed	89 83 88 00 00
	00		 mov	 DWORD PTR [ebx+136], eax
  001f3	e8 00 00 00 00	 call	 _deflateReset
  001f8	83 c4 04	 add	 esp, 4
  001fb	5b		 pop	 ebx
  001fc	5f		 pop	 edi

; 348  : }

  001fd	5e		 pop	 esi
  001fe	8b e5		 mov	 esp, ebp
  00200	5d		 pop	 ebp
  00201	c3		 ret	 0
$LN16@deflateIni:

; 334  :         s->pending_buf == Z_NULL) {
; 335  :         s->status = FINISH_STATE;
; 336  :         strm->msg = ERR_MSG(Z_MEM_ERROR);

  00202	a1 18 00 00 00	 mov	 eax, DWORD PTR _z_errmsg+24
  00207	c7 43 04 9a 02
	00 00		 mov	 DWORD PTR [ebx+4], 666	; 0000029aH

; 337  :         deflateEnd (strm);

  0020e	57		 push	 edi
  0020f	89 47 18	 mov	 DWORD PTR [edi+24], eax
  00212	e8 00 00 00 00	 call	 _deflateEnd
  00217	83 c4 04	 add	 esp, 4
$LN21@deflateIni:

; 338  :         return Z_MEM_ERROR;

  0021a	5b		 pop	 ebx
  0021b	5f		 pop	 edi
  0021c	b8 fc ff ff ff	 mov	 eax, -4			; fffffffcH

; 348  : }

  00221	5e		 pop	 esi
  00222	8b e5		 mov	 esp, ebp
  00224	5d		 pop	 ebp
  00225	c3		 ret	 0
$LN12@deflateIni:
  00226	5b		 pop	 ebx
  00227	5f		 pop	 edi

; 301  :         return Z_STREAM_ERROR;

  00228	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH

; 348  : }

  0022d	5e		 pop	 esi
  0022e	8b e5		 mov	 esp, ebp
  00230	5d		 pop	 ebp
  00231	c3		 ret	 0
$LN3@deflateIni:

; 261  :         stream_size != sizeof(z_stream)) {
; 262  :         return Z_VERSION_ERROR;

  00232	b8 fa ff ff ff	 mov	 eax, -6			; fffffffaH

; 348  : }

  00237	5e		 pop	 esi
  00238	8b e5		 mov	 esp, ebp
  0023a	5d		 pop	 ebp
  0023b	c3		 ret	 0
_deflateInit2_ ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\theclashingfritz\source\repos\inifileparser\zlib\deflate.c
;	COMDAT _deflateStateCheck
_TEXT	SEGMENT
_deflateStateCheck PROC					; COMDAT
; _strm$ = ecx

; 356  :     deflate_state *s;
; 357  :     if (strm == Z_NULL ||
; 358  :         strm->zalloc == (alloc_func)0 || strm->zfree == (free_func)0)

  00000	85 c9		 test	 ecx, ecx
  00002	74 47		 je	 SHORT $LN3@deflateSta
  00004	83 79 20 00	 cmp	 DWORD PTR [ecx+32], 0
  00008	74 41		 je	 SHORT $LN3@deflateSta
  0000a	83 79 24 00	 cmp	 DWORD PTR [ecx+36], 0
  0000e	74 3b		 je	 SHORT $LN3@deflateSta

; 360  :     s = strm->state;

  00010	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]

; 361  :     if (s == Z_NULL || s->strm != strm || (s->status != INIT_STATE &&

  00013	85 c0		 test	 eax, eax
  00015	74 34		 je	 SHORT $LN3@deflateSta
  00017	39 08		 cmp	 DWORD PTR [eax], ecx
  00019	75 30		 jne	 SHORT $LN3@deflateSta
  0001b	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0001e	83 f8 2a	 cmp	 eax, 42			; 0000002aH
  00021	74 25		 je	 SHORT $LN4@deflateSta
  00023	83 f8 39	 cmp	 eax, 57			; 00000039H
  00026	74 20		 je	 SHORT $LN4@deflateSta
  00028	83 f8 45	 cmp	 eax, 69			; 00000045H
  0002b	74 1b		 je	 SHORT $LN4@deflateSta
  0002d	83 f8 49	 cmp	 eax, 73			; 00000049H
  00030	74 16		 je	 SHORT $LN4@deflateSta
  00032	83 f8 5b	 cmp	 eax, 91			; 0000005bH
  00035	74 11		 je	 SHORT $LN4@deflateSta
  00037	83 f8 67	 cmp	 eax, 103		; 00000067H
  0003a	74 0c		 je	 SHORT $LN4@deflateSta
  0003c	83 f8 71	 cmp	 eax, 113		; 00000071H
  0003f	74 07		 je	 SHORT $LN4@deflateSta
  00041	3d 9a 02 00 00	 cmp	 eax, 666		; 0000029aH
  00046	75 03		 jne	 SHORT $LN3@deflateSta
$LN4@deflateSta:

; 362  : #ifdef GZIP
; 363  :                                            s->status != GZIP_STATE &&
; 364  : #endif
; 365  :                                            s->status != EXTRA_STATE &&
; 366  :                                            s->status != NAME_STATE &&
; 367  :                                            s->status != COMMENT_STATE &&
; 368  :                                            s->status != HCRC_STATE &&
; 369  :                                            s->status != BUSY_STATE &&
; 370  :                                            s->status != FINISH_STATE))
; 371  :         return 1;
; 372  :     return 0;

  00048	33 c0		 xor	 eax, eax

; 373  : }

  0004a	c3		 ret	 0
$LN3@deflateSta:

; 359  :         return 1;

  0004b	b8 01 00 00 00	 mov	 eax, 1

; 373  : }

  00050	c3		 ret	 0
_deflateStateCheck ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\theclashingfritz\source\repos\inifileparser\zlib\deflate.c
;	COMDAT _deflateSetDictionary
_TEXT	SEGMENT
_avail$1$ = -16						; size = 4
_next$1$ = -12						; size = 4
_wrap$1$ = -8						; size = 4
_n$1$ = -4						; size = 4
_strm$ = 8						; size = 4
_dictionary$ = 12					; size = 4
_dictLength$ = 16					; size = 4
_deflateSetDictionary PROC				; COMDAT

; 380  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx

; 381  :     deflate_state *s;
; 382  :     uInt str, n;
; 383  :     int wrap;
; 384  :     unsigned avail;
; 385  :     z_const unsigned char *next;
; 386  : 
; 387  :     if (deflateStateCheck(strm) || dictionary == Z_NULL)

  00007	8b 5d 08	 mov	 ebx, DWORD PTR _strm$[ebp]
  0000a	8b cb		 mov	 ecx, ebx
  0000c	e8 00 00 00 00	 call	 _deflateStateCheck
  00011	85 c0		 test	 eax, eax
  00013	0f 85 80 01 00
	00		 jne	 $LN8@deflateSet
  00019	8b 4d 0c	 mov	 ecx, DWORD PTR _dictionary$[ebp]
  0001c	85 c9		 test	 ecx, ecx
  0001e	0f 84 75 01 00
	00		 je	 $LN8@deflateSet

; 389  :     s = strm->state;

  00024	56		 push	 esi
  00025	8b 73 1c	 mov	 esi, DWORD PTR [ebx+28]

; 390  :     wrap = s->wrap;

  00028	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  0002b	89 45 f8	 mov	 DWORD PTR _wrap$1$[ebp], eax

; 391  :     if (wrap == 2 || (wrap == 1 && s->status != INIT_STATE) || s->lookahead)

  0002e	83 f8 02	 cmp	 eax, 2
  00031	0f 84 57 01 00
	00		 je	 $LN10@deflateSet
  00037	83 f8 01	 cmp	 eax, 1
  0003a	75 0a		 jne	 SHORT $LN11@deflateSet
  0003c	83 7e 04 2a	 cmp	 DWORD PTR [esi+4], 42	; 0000002aH
  00040	0f 85 48 01 00
	00		 jne	 $LN10@deflateSet
$LN11@deflateSet:
  00046	83 7e 74 00	 cmp	 DWORD PTR [esi+116], 0
  0004a	0f 85 3e 01 00
	00		 jne	 $LN10@deflateSet

; 393  : 
; 394  :     /* when using zlib wrappers, compute Adler-32 for provided dictionary */
; 395  :     if (wrap == 1)

  00050	57		 push	 edi
  00051	8b 7d 10	 mov	 edi, DWORD PTR _dictLength$[ebp]
  00054	83 f8 01	 cmp	 eax, 1
  00057	75 16		 jne	 SHORT $LN12@deflateSet

; 396  :         strm->adler = adler32(strm->adler, dictionary, dictLength);

  00059	57		 push	 edi
  0005a	51		 push	 ecx
  0005b	ff 73 30	 push	 DWORD PTR [ebx+48]
  0005e	e8 00 00 00 00	 call	 _adler32
  00063	8b 4d 0c	 mov	 ecx, DWORD PTR _dictionary$[ebp]
  00066	83 c4 0c	 add	 esp, 12			; 0000000cH
  00069	89 43 30	 mov	 DWORD PTR [ebx+48], eax
  0006c	8b 45 f8	 mov	 eax, DWORD PTR _wrap$1$[ebp]
$LN12@deflateSet:

; 397  :     s->wrap = 0;                    /* avoid computing Adler-32 in read_buf */

  0006f	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0

; 398  : 
; 399  :     /* if dictionary would fill window, just replace the history */
; 400  :     if (dictLength >= s->w_size) {

  00076	3b 7e 2c	 cmp	 edi, DWORD PTR [esi+44]
  00079	72 4b		 jb	 SHORT $LN13@deflateSet

; 401  :         if (wrap == 0) {            /* already empty otherwise */

  0007b	85 c0		 test	 eax, eax
  0007d	75 3f		 jne	 SHORT $LN14@deflateSet

; 402  :             CLEAR_HASH(s);

  0007f	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
  00082	33 d2		 xor	 edx, edx
  00084	8b 4e 4c	 mov	 ecx, DWORD PTR [esi+76]
  00087	66 89 54 48 fe	 mov	 WORD PTR [eax+ecx*2-2], dx
  0008c	8b 46 4c	 mov	 eax, DWORD PTR [esi+76]
  0008f	8d 04 45 fe ff
	ff ff		 lea	 eax, DWORD PTR [eax*2-2]
  00096	50		 push	 eax
  00097	52		 push	 edx
  00098	ff 76 44	 push	 DWORD PTR [esi+68]
  0009b	e8 00 00 00 00	 call	 _memset
  000a0	8b 4d 0c	 mov	 ecx, DWORD PTR _dictionary$[ebp]
  000a3	83 c4 0c	 add	 esp, 12			; 0000000cH

; 403  :             s->strstart = 0;

  000a6	c7 46 6c 00 00
	00 00		 mov	 DWORD PTR [esi+108], 0

; 404  :             s->block_start = 0L;

  000ad	c7 46 5c 00 00
	00 00		 mov	 DWORD PTR [esi+92], 0

; 405  :             s->insert = 0;

  000b4	c7 86 b4 16 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+5812], 0
$LN14@deflateSet:

; 406  :         }
; 407  :         dictionary += dictLength - s->w_size;  /* use the tail */

  000be	2b 7e 2c	 sub	 edi, DWORD PTR [esi+44]
  000c1	03 cf		 add	 ecx, edi

; 408  :         dictLength = s->w_size;

  000c3	8b 7e 2c	 mov	 edi, DWORD PTR [esi+44]
$LN13@deflateSet:

; 409  :     }
; 410  : 
; 411  :     /* insert dictionary into window and hash */
; 412  :     avail = strm->avail_in;

  000c6	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  000c9	89 45 f0	 mov	 DWORD PTR _avail$1$[ebp], eax

; 413  :     next = strm->next_in;

  000cc	8b 03		 mov	 eax, DWORD PTR [ebx]

; 414  :     strm->avail_in = dictLength;
; 415  :     strm->next_in = (z_const Bytef *)dictionary;

  000ce	89 0b		 mov	 DWORD PTR [ebx], ecx

; 416  :     fill_window(s);

  000d0	8b ce		 mov	 ecx, esi
  000d2	89 45 f4	 mov	 DWORD PTR _next$1$[ebp], eax
  000d5	89 7b 04	 mov	 DWORD PTR [ebx+4], edi
  000d8	e8 00 00 00 00	 call	 _fill_window

; 417  :     while (s->lookahead >= MIN_MATCH) {

  000dd	83 7e 74 03	 cmp	 DWORD PTR [esi+116], 3
  000e1	72 63		 jb	 SHORT $LN3@deflateSet
$LL2@deflateSet:

; 418  :         str = s->strstart;
; 419  :         n = s->lookahead - (MIN_MATCH-1);

  000e3	8b 46 74	 mov	 eax, DWORD PTR [esi+116]
  000e6	8b 5e 6c	 mov	 ebx, DWORD PTR [esi+108]
  000e9	83 e8 02	 sub	 eax, 2
  000ec	89 45 fc	 mov	 DWORD PTR _n$1$[ebp], eax
  000ef	90		 npad	 1
$LL6@deflateSet:

; 420  :         do {
; 421  :             UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]);

  000f0	8b 46 38	 mov	 eax, DWORD PTR [esi+56]
  000f3	8b 4e 58	 mov	 ecx, DWORD PTR [esi+88]

; 422  : #ifndef FASTEST
; 423  :             s->prev[str & s->w_mask] = s->head[s->ins_h];

  000f6	8b 56 34	 mov	 edx, DWORD PTR [esi+52]
  000f9	23 d3		 and	 edx, ebx
  000fb	0f b6 7c 18 02	 movzx	 edi, BYTE PTR [eax+ebx+2]
  00100	8b 46 48	 mov	 eax, DWORD PTR [esi+72]
  00103	d3 e0		 shl	 eax, cl
  00105	8b 4e 40	 mov	 ecx, DWORD PTR [esi+64]
  00108	33 f8		 xor	 edi, eax
  0010a	23 7e 54	 and	 edi, DWORD PTR [esi+84]
  0010d	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
  00110	89 7e 48	 mov	 DWORD PTR [esi+72], edi
  00113	66 8b 04 78	 mov	 ax, WORD PTR [eax+edi*2]
  00117	66 89 04 51	 mov	 WORD PTR [ecx+edx*2], ax

; 424  : #endif
; 425  :             s->head[s->ins_h] = (Pos)str;

  0011b	8b 4e 48	 mov	 ecx, DWORD PTR [esi+72]
  0011e	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
  00121	66 89 1c 48	 mov	 WORD PTR [eax+ecx*2], bx

; 426  :             str++;

  00125	43		 inc	 ebx

; 427  :         } while (--n);

  00126	83 6d fc 01	 sub	 DWORD PTR _n$1$[ebp], 1
  0012a	75 c4		 jne	 SHORT $LL6@deflateSet

; 428  :         s->strstart = str;
; 429  :         s->lookahead = MIN_MATCH-1;
; 430  :         fill_window(s);

  0012c	8b ce		 mov	 ecx, esi
  0012e	89 5e 6c	 mov	 DWORD PTR [esi+108], ebx
  00131	c7 46 74 02 00
	00 00		 mov	 DWORD PTR [esi+116], 2
  00138	e8 00 00 00 00	 call	 _fill_window
  0013d	83 7e 74 03	 cmp	 DWORD PTR [esi+116], 3
  00141	73 a0		 jae	 SHORT $LL2@deflateSet
  00143	8b 5d 08	 mov	 ebx, DWORD PTR _strm$[ebp]
$LN3@deflateSet:

; 431  :     }
; 432  :     s->strstart += s->lookahead;

  00146	8b 4e 74	 mov	 ecx, DWORD PTR [esi+116]
  00149	01 4e 6c	 add	 DWORD PTR [esi+108], ecx
  0014c	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]

; 433  :     s->block_start = (long)s->strstart;

  0014f	89 46 5c	 mov	 DWORD PTR [esi+92], eax

; 434  :     s->insert = s->lookahead;
; 435  :     s->lookahead = 0;
; 436  :     s->match_length = s->prev_length = MIN_MATCH-1;
; 437  :     s->match_available = 0;
; 438  :     strm->next_in = next;

  00152	8b 45 f4	 mov	 eax, DWORD PTR _next$1$[ebp]
  00155	89 8e b4 16 00
	00		 mov	 DWORD PTR [esi+5812], ecx
  0015b	c7 46 74 00 00
	00 00		 mov	 DWORD PTR [esi+116], 0
  00162	c7 46 78 02 00
	00 00		 mov	 DWORD PTR [esi+120], 2
  00169	c7 46 60 02 00
	00 00		 mov	 DWORD PTR [esi+96], 2
  00170	c7 46 68 00 00
	00 00		 mov	 DWORD PTR [esi+104], 0
  00177	89 03		 mov	 DWORD PTR [ebx], eax

; 439  :     strm->avail_in = avail;

  00179	8b 45 f0	 mov	 eax, DWORD PTR _avail$1$[ebp]
  0017c	89 43 04	 mov	 DWORD PTR [ebx+4], eax

; 440  :     s->wrap = wrap;

  0017f	8b 45 f8	 mov	 eax, DWORD PTR _wrap$1$[ebp]

; 441  :     return Z_OK;

  00182	5f		 pop	 edi
  00183	89 46 18	 mov	 DWORD PTR [esi+24], eax
  00186	33 c0		 xor	 eax, eax
  00188	5e		 pop	 esi

; 442  : }

  00189	5b		 pop	 ebx
  0018a	8b e5		 mov	 esp, ebp
  0018c	5d		 pop	 ebp
  0018d	c3		 ret	 0
$LN10@deflateSet:
  0018e	5e		 pop	 esi

; 392  :         return Z_STREAM_ERROR;

  0018f	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH

; 442  : }

  00194	5b		 pop	 ebx
  00195	8b e5		 mov	 esp, ebp
  00197	5d		 pop	 ebp
  00198	c3		 ret	 0
$LN8@deflateSet:

; 388  :         return Z_STREAM_ERROR;

  00199	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH

; 442  : }

  0019e	5b		 pop	 ebx
  0019f	8b e5		 mov	 esp, ebp
  001a1	5d		 pop	 ebp
  001a2	c3		 ret	 0
_deflateSetDictionary ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\theclashingfritz\source\repos\inifileparser\zlib\deflate.c
;	COMDAT _deflateGetDictionary
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_dictionary$ = 12					; size = 4
_dictLength$ = 16					; size = 4
_deflateGetDictionary PROC				; COMDAT

; 449  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 450  :     deflate_state *s;
; 451  :     uInt len;
; 452  : 
; 453  :     if (deflateStateCheck(strm))

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00006	e8 00 00 00 00	 call	 _deflateStateCheck
  0000b	85 c0		 test	 eax, eax
  0000d	74 07		 je	 SHORT $LN2@deflateGet

; 454  :         return Z_STREAM_ERROR;

  0000f	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH

; 464  : }

  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
$LN2@deflateGet:

; 455  :     s = strm->state;

  00016	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  00019	56		 push	 esi

; 456  :     len = s->strstart + s->lookahead;
; 457  :     if (len > s->w_size)

  0001a	8b 4a 74	 mov	 ecx, DWORD PTR [edx+116]
  0001d	03 4a 6c	 add	 ecx, DWORD PTR [edx+108]
  00020	8b 72 2c	 mov	 esi, DWORD PTR [edx+44]
  00023	3b ce		 cmp	 ecx, esi
  00025	0f 46 f1	 cmovbe	 esi, ecx

; 458  :         len = s->w_size;
; 459  :     if (dictionary != Z_NULL && len)

  00028	83 7d 0c 00	 cmp	 DWORD PTR _dictionary$[ebp], 0
  0002c	74 18		 je	 SHORT $LN4@deflateGet
  0002e	85 f6		 test	 esi, esi
  00030	74 14		 je	 SHORT $LN4@deflateGet

; 460  :         zmemcpy(dictionary, s->window + s->strstart + s->lookahead - len, len);

  00032	8b 42 38	 mov	 eax, DWORD PTR [edx+56]
  00035	2b c6		 sub	 eax, esi
  00037	56		 push	 esi
  00038	03 c1		 add	 eax, ecx
  0003a	50		 push	 eax
  0003b	ff 75 0c	 push	 DWORD PTR _dictionary$[ebp]
  0003e	e8 00 00 00 00	 call	 _memcpy
  00043	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN4@deflateGet:

; 461  :     if (dictLength != Z_NULL)

  00046	8b 45 10	 mov	 eax, DWORD PTR _dictLength$[ebp]
  00049	85 c0		 test	 eax, eax
  0004b	74 02		 je	 SHORT $LN5@deflateGet

; 462  :         *dictLength = len;

  0004d	89 30		 mov	 DWORD PTR [eax], esi
$LN5@deflateGet:

; 463  :     return Z_OK;

  0004f	33 c0		 xor	 eax, eax
  00051	5e		 pop	 esi

; 464  : }

  00052	5d		 pop	 ebp
  00053	c3		 ret	 0
_deflateGetDictionary ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\theclashingfritz\source\repos\inifileparser\zlib\deflate.c
;	COMDAT _deflateResetKeep
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_deflateResetKeep PROC					; COMDAT

; 469  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 470  :     deflate_state *s;
; 471  : 
; 472  :     if (deflateStateCheck(strm)) {

  00004	8b 7d 08	 mov	 edi, DWORD PTR _strm$[ebp]
  00007	8b cf		 mov	 ecx, edi
  00009	e8 00 00 00 00	 call	 _deflateStateCheck
  0000e	85 c0		 test	 eax, eax
  00010	74 08		 je	 SHORT $LN2@deflateRes

; 473  :         return Z_STREAM_ERROR;

  00012	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH

; 502  : }

  00017	5f		 pop	 edi
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
$LN2@deflateRes:

; 474  :     }
; 475  : 
; 476  :     strm->total_in = strm->total_out = 0;

  0001a	56		 push	 esi

; 477  :     strm->msg = Z_NULL; /* use zfree if we ever allocate msg dynamically */
; 478  :     strm->data_type = Z_UNKNOWN;
; 479  : 
; 480  :     s = (deflate_state *)strm->state;

  0001b	8b 77 1c	 mov	 esi, DWORD PTR [edi+28]
  0001e	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0
  00025	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
  0002c	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
  00033	c7 47 2c 02 00
	00 00		 mov	 DWORD PTR [edi+44], 2

; 481  :     s->pending = 0;
; 482  :     s->pending_out = s->pending_buf;

  0003a	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0003d	89 46 10	 mov	 DWORD PTR [esi+16], eax

; 483  : 
; 484  :     if (s->wrap < 0) {

  00040	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00043	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  0004a	85 c0		 test	 eax, eax
  0004c	79 05		 jns	 SHORT $LN3@deflateRes

; 485  :         s->wrap = -s->wrap; /* was made negative by deflate(..., Z_FINISH); */

  0004e	f7 d8		 neg	 eax
  00050	89 46 18	 mov	 DWORD PTR [esi+24], eax
$LN3@deflateRes:

; 486  :     }
; 487  :     s->status =

  00053	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00056	83 f9 02	 cmp	 ecx, 2
  00059	75 05		 jne	 SHORT $LN5@deflateRes
  0005b	8d 41 37	 lea	 eax, DWORD PTR [ecx+55]
  0005e	eb 0f		 jmp	 SHORT $LN6@deflateRes
$LN5@deflateRes:
  00060	85 c9		 test	 ecx, ecx
  00062	b8 71 00 00 00	 mov	 eax, 113		; 00000071H
  00067	ba 2a 00 00 00	 mov	 edx, 42			; 0000002aH
  0006c	0f 45 c2	 cmovne	 eax, edx
$LN6@deflateRes:
  0006f	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 488  : #ifdef GZIP
; 489  :         s->wrap == 2 ? GZIP_STATE :
; 490  : #endif
; 491  :         s->wrap ? INIT_STATE : BUSY_STATE;
; 492  :     strm->adler =

  00072	6a 00		 push	 0
  00074	6a 00		 push	 0
  00076	6a 00		 push	 0
  00078	83 f9 02	 cmp	 ecx, 2
  0007b	75 07		 jne	 SHORT $LN7@deflateRes
  0007d	e8 00 00 00 00	 call	 _crc32
  00082	eb 05		 jmp	 SHORT $LN9@deflateRes
$LN7@deflateRes:
  00084	e8 00 00 00 00	 call	 _adler32
$LN9@deflateRes:
  00089	83 c4 0c	 add	 esp, 12			; 0000000cH
  0008c	89 47 30	 mov	 DWORD PTR [edi+48], eax

; 493  : #ifdef GZIP
; 494  :         s->wrap == 2 ? crc32(0L, Z_NULL, 0) :
; 495  : #endif
; 496  :         adler32(0L, Z_NULL, 0);
; 497  :     s->last_flush = Z_NO_FLUSH;
; 498  : 
; 499  :     _tr_init(s);

  0008f	8b ce		 mov	 ecx, esi
  00091	c7 46 28 00 00
	00 00		 mov	 DWORD PTR [esi+40], 0
  00098	e8 00 00 00 00	 call	 __tr_init

; 500  : 
; 501  :     return Z_OK;

  0009d	5e		 pop	 esi
  0009e	33 c0		 xor	 eax, eax

; 502  : }

  000a0	5f		 pop	 edi
  000a1	5d		 pop	 ebp
  000a2	c3		 ret	 0
_deflateResetKeep ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\theclashingfritz\source\repos\inifileparser\zlib\deflate.c
;	COMDAT _deflateReset
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_deflateReset PROC					; COMDAT

; 507  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 508  :     int ret;
; 509  : 
; 510  :     ret = deflateResetKeep(strm);

  00005	8b 7d 08	 mov	 edi, DWORD PTR _strm$[ebp]
  00008	57		 push	 edi
  00009	e8 00 00 00 00	 call	 _deflateResetKeep
  0000e	8b f0		 mov	 esi, eax
  00010	83 c4 04	 add	 esp, 4

; 511  :     if (ret == Z_OK)

  00013	85 f6		 test	 esi, esi
  00015	75 0a		 jne	 SHORT $LN2@deflateRes

; 512  :         lm_init(strm->state);

  00017	8b 4f 1c	 mov	 ecx, DWORD PTR [edi+28]
  0001a	e8 00 00 00 00	 call	 _lm_init

; 513  :     return ret;

  0001f	8b c6		 mov	 eax, esi
$LN2@deflateRes:

; 514  : }

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
_deflateReset ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\theclashingfritz\source\repos\inifileparser\zlib\deflate.c
;	COMDAT _deflateSetHeader
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_head$ = 12						; size = 4
_deflateSetHeader PROC					; COMDAT

; 520  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 521  :     if (deflateStateCheck(strm) || strm->state->wrap != 2)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00006	e8 00 00 00 00	 call	 _deflateStateCheck
  0000b	85 c0		 test	 eax, eax
  0000d	75 13		 jne	 SHORT $LN3@deflateSet
  0000f	8b 49 1c	 mov	 ecx, DWORD PTR [ecx+28]
  00012	83 79 18 02	 cmp	 DWORD PTR [ecx+24], 2
  00016	75 0a		 jne	 SHORT $LN3@deflateSet

; 523  :     strm->state->gzhead = head;

  00018	8b 45 0c	 mov	 eax, DWORD PTR _head$[ebp]
  0001b	89 41 1c	 mov	 DWORD PTR [ecx+28], eax

; 524  :     return Z_OK;

  0001e	33 c0		 xor	 eax, eax

; 525  : }

  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
$LN3@deflateSet:

; 522  :         return Z_STREAM_ERROR;

  00022	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH

; 525  : }

  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
_deflateSetHeader ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\theclashingfritz\source\repos\inifileparser\zlib\deflate.c
;	COMDAT _deflatePending
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_pending$ = 12						; size = 4
_bits$ = 16						; size = 4
_deflatePending PROC					; COMDAT

; 532  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 533  :     if (deflateStateCheck(strm)) return Z_STREAM_ERROR;

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00006	e8 00 00 00 00	 call	 _deflateStateCheck
  0000b	85 c0		 test	 eax, eax
  0000d	74 07		 je	 SHORT $LN2@deflatePen
  0000f	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH

; 539  : }

  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
$LN2@deflatePen:

; 534  :     if (pending != Z_NULL)

  00016	8b 55 0c	 mov	 edx, DWORD PTR _pending$[ebp]
  00019	85 d2		 test	 edx, edx
  0001b	74 08		 je	 SHORT $LN3@deflatePen

; 535  :         *pending = strm->state->pending;

  0001d	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  00020	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  00023	89 02		 mov	 DWORD PTR [edx], eax
$LN3@deflatePen:

; 536  :     if (bits != Z_NULL)

  00025	8b 55 10	 mov	 edx, DWORD PTR _bits$[ebp]
  00028	85 d2		 test	 edx, edx
  0002a	74 0b		 je	 SHORT $LN4@deflatePen

; 537  :         *bits = strm->state->bi_valid;

  0002c	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  0002f	8b 80 bc 16 00
	00		 mov	 eax, DWORD PTR [eax+5820]
  00035	89 02		 mov	 DWORD PTR [edx], eax
$LN4@deflatePen:

; 538  :     return Z_OK;

  00037	33 c0		 xor	 eax, eax

; 539  : }

  00039	5d		 pop	 ebp
  0003a	c3		 ret	 0
_deflatePending ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\theclashingfritz\source\repos\inifileparser\zlib\deflate.c
;	COMDAT _deflatePrime
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_bits$ = 12						; size = 4
_value$ = 16						; size = 4
_deflatePrime PROC					; COMDAT

; 546  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 547  :     deflate_state *s;
; 548  :     int put;
; 549  : 
; 550  :     if (deflateStateCheck(strm)) return Z_STREAM_ERROR;

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00006	e8 00 00 00 00	 call	 _deflateStateCheck
  0000b	85 c0		 test	 eax, eax
  0000d	74 07		 je	 SHORT $LN5@deflatePri
  0000f	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH

; 565  : }

  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
$LN5@deflatePri:

; 551  :     s = strm->state;

  00016	56		 push	 esi
  00017	8b 71 1c	 mov	 esi, DWORD PTR [ecx+28]

; 552  :     if ((Bytef *)(s->d_buf) < s->pending_out + ((Buf_size + 7) >> 3))

  0001a	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0001d	83 c0 02	 add	 eax, 2
  00020	39 86 a4 16 00
	00		 cmp	 DWORD PTR [esi+5796], eax
  00026	73 08		 jae	 SHORT $LN11@deflatePri

; 553  :         return Z_BUF_ERROR;

  00028	b8 fb ff ff ff	 mov	 eax, -5			; fffffffbH
  0002d	5e		 pop	 esi

; 565  : }

  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
$LN11@deflatePri:

; 553  :         return Z_BUF_ERROR;

  00030	53		 push	 ebx
  00031	8b 5d 0c	 mov	 ebx, DWORD PTR _bits$[ebp]
  00034	57		 push	 edi
  00035	66 66 66 0f 1f
	84 00 00 00 00
	00		 npad	 11
$LL4@deflatePri:

; 554  :     do {
; 555  :         put = Buf_size - s->bi_valid;

  00040	8b 96 bc 16 00
	00		 mov	 edx, DWORD PTR [esi+5820]
  00046	bf 10 00 00 00	 mov	 edi, 16			; 00000010H
  0004b	2b fa		 sub	 edi, edx

; 556  :         if (put > bits)
; 557  :             put = bits;
; 558  :         s->bi_buf |= (ush)((value & ((1 << put) - 1)) << s->bi_valid);

  0004d	b8 01 00 00 00	 mov	 eax, 1
  00052	3b fb		 cmp	 edi, ebx
  00054	0f 4f fb	 cmovg	 edi, ebx
  00057	8b cf		 mov	 ecx, edi
  00059	66 d3 e0	 shl	 ax, cl
  0005c	8b ca		 mov	 ecx, edx
  0005e	66 48		 dec	 ax
  00060	66 23 45 10	 and	 ax, WORD PTR _value$[ebp]
  00064	66 d3 e0	 shl	 ax, cl

; 559  :         s->bi_valid += put;
; 560  :         _tr_flush_bits(s);

  00067	8b ce		 mov	 ecx, esi
  00069	66 09 86 b8 16
	00 00		 or	 WORD PTR [esi+5816], ax
  00070	8d 04 3a	 lea	 eax, DWORD PTR [edx+edi]
  00073	89 86 bc 16 00
	00		 mov	 DWORD PTR [esi+5820], eax
  00079	e8 00 00 00 00	 call	 __tr_flush_bits

; 561  :         value >>= put;

  0007e	8b cf		 mov	 ecx, edi
  00080	d3 7d 10	 sar	 DWORD PTR _value$[ebp], cl

; 562  :         bits -= put;

  00083	2b df		 sub	 ebx, edi

; 563  :     } while (bits);

  00085	75 b9		 jne	 SHORT $LL4@deflatePri

; 564  :     return Z_OK;

  00087	5f		 pop	 edi
  00088	5b		 pop	 ebx
  00089	33 c0		 xor	 eax, eax
  0008b	5e		 pop	 esi

; 565  : }

  0008c	5d		 pop	 ebp
  0008d	c3		 ret	 0
_deflatePrime ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\theclashingfritz\source\repos\inifileparser\zlib\deflate.c
;	COMDAT _deflateParams
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_level$ = 12						; size = 4
_strategy$ = 16						; size = 4
_deflateParams PROC					; COMDAT

; 572  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 573  :     deflate_state *s;
; 574  :     compress_func func;
; 575  : 
; 576  :     if (deflateStateCheck(strm)) return Z_STREAM_ERROR;

  00004	8b 5d 08	 mov	 ebx, DWORD PTR _strm$[ebp]
  00007	8b cb		 mov	 ecx, ebx
  00009	e8 00 00 00 00	 call	 _deflateStateCheck
  0000e	85 c0		 test	 eax, eax
  00010	74 08		 je	 SHORT $LN2@deflatePar
  00012	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH

; 614  : }

  00017	5b		 pop	 ebx
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
$LN2@deflatePar:

; 577  :     s = strm->state;
; 578  : 
; 579  : #ifdef FASTEST
; 580  :     if (level != 0) level = 1;
; 581  : #else
; 582  :     if (level == Z_DEFAULT_COMPRESSION) level = 6;

  0001a	83 7d 0c ff	 cmp	 DWORD PTR _level$[ebp], -1
  0001e	56		 push	 esi
  0001f	8b 73 1c	 mov	 esi, DWORD PTR [ebx+28]
  00022	57		 push	 edi
  00023	bf 06 00 00 00	 mov	 edi, 6
  00028	0f 45 7d 0c	 cmovne	 edi, DWORD PTR _level$[ebp]

; 583  : #endif
; 584  :     if (level < 0 || level > 9 || strategy < 0 || strategy > Z_FIXED) {

  0002c	83 ff 09	 cmp	 edi, 9
  0002f	0f 87 04 01 00
	00		 ja	 $LN5@deflatePar
  00035	8b 45 10	 mov	 eax, DWORD PTR _strategy$[ebp]
  00038	83 f8 04	 cmp	 eax, 4
  0003b	0f 87 f8 00 00
	00		 ja	 $LN5@deflatePar

; 586  :     }
; 587  :     func = configuration_table[s->level].func;
; 588  : 
; 589  :     if ((strategy != s->strategy || func != configuration_table[level].func) &&

  00041	3b 86 88 00 00
	00		 cmp	 eax, DWORD PTR [esi+136]
  00047	75 1c		 jne	 SHORT $LN7@deflatePar
  00049	8b 86 84 00 00
	00		 mov	 eax, DWORD PTR [esi+132]
  0004f	8d 0c 7f	 lea	 ecx, DWORD PTR [edi+edi*2]
  00052	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00055	8b 04 85 08 00
	00 00		 mov	 eax, DWORD PTR _configuration_table[eax*4+8]
  0005c	3b 04 8d 08 00
	00 00		 cmp	 eax, DWORD PTR _configuration_table[ecx*4+8]
  00063	74 2d		 je	 SHORT $LN9@deflatePar
$LN7@deflatePar:
  00065	83 be c0 16 00
	00 00		 cmp	 DWORD PTR [esi+5824], 0
  0006c	74 24		 je	 SHORT $LN9@deflatePar

; 590  :         s->high_water) {
; 591  :         /* Flush the last buffer: */
; 592  :         int err = deflate(strm, Z_BLOCK);

  0006e	6a 05		 push	 5
  00070	53		 push	 ebx
  00071	e8 00 00 00 00	 call	 _deflate
  00076	83 c4 08	 add	 esp, 8

; 593  :         if (err == Z_STREAM_ERROR)

  00079	83 f8 fe	 cmp	 eax, -2			; fffffffeH
  0007c	0f 84 b7 00 00
	00		 je	 $LN5@deflatePar

; 594  :             return err;
; 595  :         if (strm->avail_out == 0)

  00082	83 7b 10 00	 cmp	 DWORD PTR [ebx+16], 0
  00086	75 0a		 jne	 SHORT $LN9@deflatePar

; 596  :             return Z_BUF_ERROR;

  00088	5f		 pop	 edi
  00089	5e		 pop	 esi
  0008a	b8 fb ff ff ff	 mov	 eax, -5			; fffffffbH

; 614  : }

  0008f	5b		 pop	 ebx
  00090	5d		 pop	 ebp
  00091	c3		 ret	 0
$LN9@deflatePar:

; 597  :     }
; 598  :     if (s->level != level) {

  00092	8b 86 84 00 00
	00		 mov	 eax, DWORD PTR [esi+132]
  00098	3b c7		 cmp	 eax, edi
  0009a	0f 84 89 00 00
	00		 je	 $LN10@deflatePar

; 599  :         if (s->level == 0 && s->matches != 0) {

  000a0	85 c0		 test	 eax, eax
  000a2	75 47		 jne	 SHORT $LN11@deflatePar
  000a4	8b 86 b0 16 00
	00		 mov	 eax, DWORD PTR [esi+5808]
  000aa	85 c0		 test	 eax, eax
  000ac	74 3d		 je	 SHORT $LN11@deflatePar

; 600  :             if (s->matches == 1)

  000ae	83 f8 01	 cmp	 eax, 1
  000b1	75 09		 jne	 SHORT $LN12@deflatePar

; 601  :                 slide_hash(s);

  000b3	8b ce		 mov	 ecx, esi
  000b5	e8 00 00 00 00	 call	 _slide_hash
  000ba	eb 0d		 jmp	 SHORT $LN13@deflatePar
$LN12@deflatePar:

; 602  :             else
; 603  :                 CLEAR_HASH(s);

  000bc	8b 4e 4c	 mov	 ecx, DWORD PTR [esi+76]
  000bf	33 d2		 xor	 edx, edx
  000c1	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
  000c4	66 89 54 48 fe	 mov	 WORD PTR [eax+ecx*2-2], dx
$LN13@deflatePar:
  000c9	8b 46 4c	 mov	 eax, DWORD PTR [esi+76]
  000cc	8d 04 45 fe ff
	ff ff		 lea	 eax, DWORD PTR [eax*2-2]
  000d3	50		 push	 eax
  000d4	6a 00		 push	 0
  000d6	ff 76 44	 push	 DWORD PTR [esi+68]
  000d9	e8 00 00 00 00	 call	 _memset
  000de	83 c4 0c	 add	 esp, 12			; 0000000cH

; 604  :             s->matches = 0;

  000e1	c7 86 b0 16 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+5808], 0
$LN11@deflatePar:

; 605  :         }
; 606  :         s->level = level;
; 607  :         s->max_lazy_match   = configuration_table[level].max_lazy;

  000eb	8d 0c 7f	 lea	 ecx, DWORD PTR [edi+edi*2]
  000ee	89 be 84 00 00
	00		 mov	 DWORD PTR [esi+132], edi
  000f4	0f b7 04 8d 02
	00 00 00	 movzx	 eax, WORD PTR _configuration_table[ecx*4+2]
  000fc	89 86 80 00 00
	00		 mov	 DWORD PTR [esi+128], eax

; 608  :         s->good_match       = configuration_table[level].good_length;

  00102	0f b7 04 8d 00
	00 00 00	 movzx	 eax, WORD PTR _configuration_table[ecx*4]
  0010a	89 86 8c 00 00
	00		 mov	 DWORD PTR [esi+140], eax

; 609  :         s->nice_match       = configuration_table[level].nice_length;

  00110	0f b7 04 8d 04
	00 00 00	 movzx	 eax, WORD PTR _configuration_table[ecx*4+4]
  00118	89 86 90 00 00
	00		 mov	 DWORD PTR [esi+144], eax

; 610  :         s->max_chain_length = configuration_table[level].max_chain;

  0011e	0f b7 04 8d 06
	00 00 00	 movzx	 eax, WORD PTR _configuration_table[ecx*4+6]
  00126	89 46 7c	 mov	 DWORD PTR [esi+124], eax
$LN10@deflatePar:

; 611  :     }
; 612  :     s->strategy = strategy;

  00129	8b 45 10	 mov	 eax, DWORD PTR _strategy$[ebp]
  0012c	5f		 pop	 edi
  0012d	89 86 88 00 00
	00		 mov	 DWORD PTR [esi+136], eax

; 613  :     return Z_OK;

  00133	33 c0		 xor	 eax, eax
  00135	5e		 pop	 esi

; 614  : }

  00136	5b		 pop	 ebx
  00137	5d		 pop	 ebp
  00138	c3		 ret	 0
$LN5@deflatePar:
  00139	5f		 pop	 edi
  0013a	5e		 pop	 esi

; 585  :         return Z_STREAM_ERROR;

  0013b	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH

; 614  : }

  00140	5b		 pop	 ebx
  00141	5d		 pop	 ebp
  00142	c3		 ret	 0
_deflateParams ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\theclashingfritz\source\repos\inifileparser\zlib\deflate.c
;	COMDAT _deflateTune
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_good_length$ = 12					; size = 4
_max_lazy$ = 16						; size = 4
_nice_length$ = 20					; size = 4
_max_chain$ = 24					; size = 4
_deflateTune PROC					; COMDAT

; 623  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 624  :     deflate_state *s;
; 625  : 
; 626  :     if (deflateStateCheck(strm)) return Z_STREAM_ERROR;

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00006	e8 00 00 00 00	 call	 _deflateStateCheck
  0000b	85 c0		 test	 eax, eax
  0000d	74 07		 je	 SHORT $LN2@deflateTun
  0000f	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH

; 633  : }

  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
$LN2@deflateTun:

; 627  :     s = strm->state;

  00016	8b 49 1c	 mov	 ecx, DWORD PTR [ecx+28]

; 628  :     s->good_match = (uInt)good_length;

  00019	8b 45 0c	 mov	 eax, DWORD PTR _good_length$[ebp]
  0001c	89 81 8c 00 00
	00		 mov	 DWORD PTR [ecx+140], eax

; 629  :     s->max_lazy_match = (uInt)max_lazy;

  00022	8b 45 10	 mov	 eax, DWORD PTR _max_lazy$[ebp]
  00025	89 81 80 00 00
	00		 mov	 DWORD PTR [ecx+128], eax

; 630  :     s->nice_match = nice_length;

  0002b	8b 45 14	 mov	 eax, DWORD PTR _nice_length$[ebp]
  0002e	89 81 90 00 00
	00		 mov	 DWORD PTR [ecx+144], eax

; 631  :     s->max_chain_length = (uInt)max_chain;

  00034	8b 45 18	 mov	 eax, DWORD PTR _max_chain$[ebp]
  00037	89 41 7c	 mov	 DWORD PTR [ecx+124], eax

; 632  :     return Z_OK;

  0003a	33 c0		 xor	 eax, eax

; 633  : }

  0003c	5d		 pop	 ebp
  0003d	c3		 ret	 0
_deflateTune ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\theclashingfritz\source\repos\inifileparser\zlib\deflate.c
;	COMDAT _deflateBound
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_complen$1$ = 12					; size = 4
_sourceLen$ = 12					; size = 4
_deflateBound PROC					; COMDAT

; 655  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 656  :     deflate_state *s;
; 657  :     uLong complen, wraplen;
; 658  : 
; 659  :     /* conservative upper bound for compressed data */
; 660  :     complen = sourceLen +
; 661  :               ((sourceLen + 7) >> 3) + ((sourceLen + 63) >> 6) + 5;
; 662  : 
; 663  :     /* if can't get parameters, return conservative bound plus zlib wrapper */
; 664  :     if (deflateStateCheck(strm))

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00006	57		 push	 edi
  00007	8b 7d 0c	 mov	 edi, DWORD PTR _sourceLen$[ebp]
  0000a	8d 57 3f	 lea	 edx, DWORD PTR [edi+63]
  0000d	8d 47 07	 lea	 eax, DWORD PTR [edi+7]
  00010	c1 ea 06	 shr	 edx, 6
  00013	c1 e8 03	 shr	 eax, 3
  00016	03 d7		 add	 edx, edi
  00018	83 c0 05	 add	 eax, 5
  0001b	03 d0		 add	 edx, eax
  0001d	89 55 0c	 mov	 DWORD PTR _complen$1$[ebp], edx
  00020	e8 00 00 00 00	 call	 _deflateStateCheck
  00025	85 c0		 test	 eax, eax
  00027	74 06		 je	 SHORT $LN10@deflateBou

; 665  :         return complen + 6;

  00029	8d 42 06	 lea	 eax, DWORD PTR [edx+6]

; 708  :            (sourceLen >> 25) + 13 - 6 + wraplen;
; 709  : }

  0002c	5f		 pop	 edi
  0002d	5d		 pop	 ebp
  0002e	c3		 ret	 0
$LN10@deflateBou:

; 666  : 
; 667  :     /* compute wrapper length */
; 668  :     s = strm->state;

  0002f	53		 push	 ebx
  00030	56		 push	 esi
  00031	8b 71 1c	 mov	 esi, DWORD PTR [ecx+28]

; 669  :     switch (s->wrap) {

  00034	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00037	83 e8 00	 sub	 eax, 0
  0003a	74 6e		 je	 SHORT $LN11@deflateBou
  0003c	83 e8 01	 sub	 eax, 1
  0003f	74 58		 je	 SHORT $LN12@deflateBou
  00041	83 e8 01	 sub	 eax, 1
  00044	74 07		 je	 SHORT $LN13@deflateBou

; 697  : #endif
; 698  :     default:                                /* for compiler happiness */
; 699  :         wraplen = 6;

  00046	bb 06 00 00 00	 mov	 ebx, 6
  0004b	eb 64		 jmp	 SHORT $LN2@deflateBou
$LN13@deflateBou:

; 676  : #ifdef GZIP
; 677  :     case 2:                                 /* gzip wrapper */
; 678  :         wraplen = 18;
; 679  :         if (s->gzhead != Z_NULL) {          /* user-supplied gzip header */

  0004d	8b 56 1c	 mov	 edx, DWORD PTR [esi+28]
  00050	bb 12 00 00 00	 mov	 ebx, 18			; 00000012H
  00055	85 d2		 test	 edx, edx
  00057	74 55		 je	 SHORT $LN29@deflateBou

; 680  :             Bytef *str;
; 681  :             if (s->gzhead->extra != Z_NULL)

  00059	83 7a 10 00	 cmp	 DWORD PTR [edx+16], 0
  0005d	74 06		 je	 SHORT $LN15@deflateBou

; 682  :                 wraplen += 2 + s->gzhead->extra_len;

  0005f	8b 5a 14	 mov	 ebx, DWORD PTR [edx+20]
  00062	83 c3 14	 add	 ebx, 20			; 00000014H
$LN15@deflateBou:

; 683  :             str = s->gzhead->name;

  00065	8b 4a 1c	 mov	 ecx, DWORD PTR [edx+28]

; 684  :             if (str != Z_NULL)

  00068	85 c9		 test	 ecx, ecx
  0006a	74 0e		 je	 SHORT $LN5@deflateBou
  0006c	0f 1f 40 00	 npad	 4
$LL6@deflateBou:

; 685  :                 do {
; 686  :                     wraplen++;
; 687  :                 } while (*str++);

  00070	8a 01		 mov	 al, BYTE PTR [ecx]
  00072	8d 49 01	 lea	 ecx, DWORD PTR [ecx+1]
  00075	43		 inc	 ebx
  00076	84 c0		 test	 al, al
  00078	75 f6		 jne	 SHORT $LL6@deflateBou
$LN5@deflateBou:

; 688  :             str = s->gzhead->comment;

  0007a	8b 4a 24	 mov	 ecx, DWORD PTR [edx+36]

; 689  :             if (str != Z_NULL)

  0007d	85 c9		 test	 ecx, ecx
  0007f	74 0a		 je	 SHORT $LN8@deflateBou
$LL9@deflateBou:

; 690  :                 do {
; 691  :                     wraplen++;
; 692  :                 } while (*str++);

  00081	8a 01		 mov	 al, BYTE PTR [ecx]
  00083	8d 49 01	 lea	 ecx, DWORD PTR [ecx+1]
  00086	43		 inc	 ebx
  00087	84 c0		 test	 al, al
  00089	75 f6		 jne	 SHORT $LL9@deflateBou
$LN8@deflateBou:

; 693  :             if (s->gzhead->hcrc)

  0008b	83 7a 2c 00	 cmp	 DWORD PTR [edx+44], 0

; 695  :         }
; 696  :         break;

  0008f	8b 55 0c	 mov	 edx, DWORD PTR _complen$1$[ebp]
  00092	74 1d		 je	 SHORT $LN2@deflateBou

; 694  :                 wraplen += 2;

  00094	83 c3 02	 add	 ebx, 2

; 695  :         }
; 696  :         break;

  00097	eb 18		 jmp	 SHORT $LN2@deflateBou
$LN12@deflateBou:

; 672  :         break;
; 673  :     case 1:                                 /* zlib wrapper */
; 674  :         wraplen = 6 + (s->strstart ? 4 : 0);

  00099	33 db		 xor	 ebx, ebx
  0009b	39 5e 6c	 cmp	 DWORD PTR [esi+108], ebx
  0009e	0f 95 c3	 setne	 bl
  000a1	8d 1c 9d 06 00
	00 00		 lea	 ebx, DWORD PTR [ebx*4+6]

; 675  :         break;

  000a8	eb 07		 jmp	 SHORT $LN2@deflateBou
$LN11@deflateBou:

; 670  :     case 0:                                 /* raw deflate */
; 671  :         wraplen = 0;

  000aa	33 db		 xor	 ebx, ebx

; 676  : #ifdef GZIP
; 677  :     case 2:                                 /* gzip wrapper */
; 678  :         wraplen = 18;
; 679  :         if (s->gzhead != Z_NULL) {          /* user-supplied gzip header */

  000ac	eb 03		 jmp	 SHORT $LN2@deflateBou
$LN29@deflateBou:
  000ae	8b 55 0c	 mov	 edx, DWORD PTR _complen$1$[ebp]
$LN2@deflateBou:

; 700  :     }
; 701  : 
; 702  :     /* if not default parameters, return conservative bound */
; 703  :     if (s->w_bits != 15 || s->hash_bits != 8 + 7)

  000b1	83 7e 30 0f	 cmp	 DWORD PTR [esi+48], 15	; 0000000fH
  000b5	75 25		 jne	 SHORT $LN21@deflateBou
  000b7	83 7e 50 0f	 cmp	 DWORD PTR [esi+80], 15	; 0000000fH
  000bb	75 1f		 jne	 SHORT $LN21@deflateBou

; 705  : 
; 706  :     /* default settings: return tight bound for that case */
; 707  :     return sourceLen + (sourceLen >> 12) + (sourceLen >> 14) +

  000bd	8b cf		 mov	 ecx, edi
  000bf	8b d7		 mov	 edx, edi
  000c1	c1 e9 0e	 shr	 ecx, 14			; 0000000eH
  000c4	8b c7		 mov	 eax, edi
  000c6	03 cb		 add	 ecx, ebx
  000c8	c1 e8 0c	 shr	 eax, 12			; 0000000cH
  000cb	c1 ea 19	 shr	 edx, 25			; 00000019H
  000ce	83 c0 07	 add	 eax, 7
  000d1	03 ca		 add	 ecx, edx
  000d3	5e		 pop	 esi
  000d4	03 c1		 add	 eax, ecx
  000d6	5b		 pop	 ebx
  000d7	03 c7		 add	 eax, edi

; 708  :            (sourceLen >> 25) + 13 - 6 + wraplen;
; 709  : }

  000d9	5f		 pop	 edi
  000da	5d		 pop	 ebp
  000db	c3		 ret	 0
$LN21@deflateBou:
  000dc	5e		 pop	 esi

; 704  :         return complen + wraplen;

  000dd	8d 04 13	 lea	 eax, DWORD PTR [ebx+edx]
  000e0	5b		 pop	 ebx

; 708  :            (sourceLen >> 25) + 13 - 6 + wraplen;
; 709  : }

  000e1	5f		 pop	 edi
  000e2	5d		 pop	 ebp
  000e3	c3		 ret	 0
_deflateBound ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\theclashingfritz\source\repos\inifileparser\zlib\deflate.c
;	COMDAT _putShortMSB
_TEXT	SEGMENT
_putShortMSB PROC					; COMDAT
; _s$ = ecx
; _b$ = edx

; 719  : {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 720  :     put_byte(s, (Byte)(b >> 8));

  00004	8b ca		 mov	 ecx, edx
  00006	c1 e9 08	 shr	 ecx, 8
  00009	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  0000c	8b 77 08	 mov	 esi, DWORD PTR [edi+8]
  0000f	88 0c 06	 mov	 BYTE PTR [esi+eax], cl
  00012	ff 47 14	 inc	 DWORD PTR [edi+20]
  00015	8b 4f 14	 mov	 ecx, DWORD PTR [edi+20]

; 721  :     put_byte(s, (Byte)(b & 0xff));

  00018	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  0001b	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  0001e	ff 47 14	 inc	 DWORD PTR [edi+20]
  00021	5f		 pop	 edi
  00022	5e		 pop	 esi

; 722  : }

  00023	c3		 ret	 0
_putShortMSB ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\theclashingfritz\source\repos\inifileparser\zlib\deflate.c
;	COMDAT _flush_pending
_TEXT	SEGMENT
_flush_pending PROC					; COMDAT
; _strm$ = ecx

; 732  : {

  00000	53		 push	 ebx
  00001	8b d9		 mov	 ebx, ecx
  00003	56		 push	 esi
  00004	57		 push	 edi

; 733  :     unsigned len;
; 734  :     deflate_state *s = strm->state;

  00005	8b 73 1c	 mov	 esi, DWORD PTR [ebx+28]

; 735  : 
; 736  :     _tr_flush_bits(s);

  00008	8b ce		 mov	 ecx, esi
  0000a	e8 00 00 00 00	 call	 __tr_flush_bits

; 737  :     len = s->pending;
; 738  :     if (len > strm->avail_out) len = strm->avail_out;

  0000f	8b 7b 10	 mov	 edi, DWORD PTR [ebx+16]
  00012	39 7e 14	 cmp	 DWORD PTR [esi+20], edi
  00015	0f 46 7e 14	 cmovbe	 edi, DWORD PTR [esi+20]

; 739  :     if (len == 0) return;

  00019	85 ff		 test	 edi, edi
  0001b	74 26		 je	 SHORT $LN4@flush_pend

; 740  : 
; 741  :     zmemcpy(strm->next_out, s->pending_out, len);

  0001d	57		 push	 edi
  0001e	ff 76 10	 push	 DWORD PTR [esi+16]
  00021	ff 73 0c	 push	 DWORD PTR [ebx+12]
  00024	e8 00 00 00 00	 call	 _memcpy

; 742  :     strm->next_out  += len;

  00029	01 7b 0c	 add	 DWORD PTR [ebx+12], edi
  0002c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 743  :     s->pending_out  += len;

  0002f	01 7e 10	 add	 DWORD PTR [esi+16], edi

; 744  :     strm->total_out += len;

  00032	01 7b 14	 add	 DWORD PTR [ebx+20], edi

; 745  :     strm->avail_out -= len;

  00035	29 7b 10	 sub	 DWORD PTR [ebx+16], edi

; 746  :     s->pending      -= len;

  00038	29 7e 14	 sub	 DWORD PTR [esi+20], edi

; 747  :     if (s->pending == 0) {

  0003b	75 06		 jne	 SHORT $LN4@flush_pend

; 748  :         s->pending_out = s->pending_buf;

  0003d	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00040	89 46 10	 mov	 DWORD PTR [esi+16], eax
$LN4@flush_pend:

; 749  :     }
; 750  : }

  00043	5f		 pop	 edi
  00044	5e		 pop	 esi
  00045	5b		 pop	 ebx
  00046	c3		 ret	 0
_flush_pending ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\theclashingfritz\source\repos\inifileparser\zlib\deflate.c
;	COMDAT _deflateCopy
_TEXT	SEGMENT
_overlay$1$ = -4					; size = 4
_dest$ = 8						; size = 4
_source$ = 12						; size = 4
_deflateCopy PROC					; COMDAT

; 1105 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1106 : #ifdef MAXSEG_64K
; 1107 :     return Z_STREAM_ERROR;
; 1108 : #else
; 1109 :     deflate_state *ds;
; 1110 :     deflate_state *ss;
; 1111 :     ushf *overlay;
; 1112 : 
; 1113 : 
; 1114 :     if (deflateStateCheck(source) || dest == Z_NULL) {

  00004	8b 4d 0c	 mov	 ecx, DWORD PTR _source$[ebp]
  00007	56		 push	 esi
  00008	e8 00 00 00 00	 call	 _deflateStateCheck
  0000d	85 c0		 test	 eax, eax
  0000f	0f 85 80 01 00
	00		 jne	 $LN3@deflateCop
  00015	8b 75 08	 mov	 esi, DWORD PTR _dest$[ebp]
  00018	85 f6		 test	 esi, esi
  0001a	0f 84 75 01 00
	00		 je	 $LN3@deflateCop

; 1116 :     }
; 1117 : 
; 1118 :     ss = source->state;
; 1119 : 
; 1120 :     zmemcpy((voidpf)dest, (voidpf)source, sizeof(z_stream));

  00020	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  00023	53		 push	 ebx
  00024	8b 59 1c	 mov	 ebx, DWORD PTR [ecx+28]
  00027	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0
  0002a	57		 push	 edi
  0002b	0f 10 41 10	 movups	 xmm0, XMMWORD PTR [ecx+16]

; 1121 : 
; 1122 :     ds = (deflate_state *) ZALLOC(dest, 1, sizeof(deflate_state));

  0002f	68 c4 16 00 00	 push	 5828			; 000016c4H
  00034	6a 01		 push	 1
  00036	0f 11 46 10	 movups	 XMMWORD PTR [esi+16], xmm0
  0003a	0f 10 41 20	 movups	 xmm0, XMMWORD PTR [ecx+32]
  0003e	0f 11 46 20	 movups	 XMMWORD PTR [esi+32], xmm0
  00042	f3 0f 7e 41 30	 movq	 xmm0, QWORD PTR [ecx+48]
  00047	66 0f d6 46 30	 movq	 QWORD PTR [esi+48], xmm0
  0004c	ff 76 28	 push	 DWORD PTR [esi+40]
  0004f	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  00052	ff d0		 call	 eax
  00054	8b f8		 mov	 edi, eax
  00056	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1123 :     if (ds == Z_NULL) return Z_MEM_ERROR;

  00059	85 ff		 test	 edi, edi
  0005b	0f 84 28 01 00
	00		 je	 $LN10@deflateCop

; 1124 :     dest->state = (struct internal_state FAR *) ds;
; 1125 :     zmemcpy((voidpf)ds, (voidpf)ss, sizeof(deflate_state));

  00061	68 c4 16 00 00	 push	 5828			; 000016c4H
  00066	53		 push	 ebx
  00067	57		 push	 edi
  00068	89 7e 1c	 mov	 DWORD PTR [esi+28], edi
  0006b	e8 00 00 00 00	 call	 _memcpy

; 1126 :     ds->strm = dest;
; 1127 : 
; 1128 :     ds->window = (Bytef *) ZALLOC(dest, ds->w_size, 2*sizeof(Byte));

  00070	6a 02		 push	 2
  00072	ff 77 2c	 push	 DWORD PTR [edi+44]
  00075	89 37		 mov	 DWORD PTR [edi], esi
  00077	ff 76 28	 push	 DWORD PTR [esi+40]
  0007a	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  0007d	ff d0		 call	 eax

; 1129 :     ds->prev   = (Posf *)  ZALLOC(dest, ds->w_size, sizeof(Pos));

  0007f	6a 02		 push	 2
  00081	ff 77 2c	 push	 DWORD PTR [edi+44]
  00084	89 47 38	 mov	 DWORD PTR [edi+56], eax
  00087	ff 76 28	 push	 DWORD PTR [esi+40]
  0008a	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  0008d	ff d0		 call	 eax

; 1130 :     ds->head   = (Posf *)  ZALLOC(dest, ds->hash_size, sizeof(Pos));

  0008f	6a 02		 push	 2
  00091	ff 77 4c	 push	 DWORD PTR [edi+76]
  00094	89 47 40	 mov	 DWORD PTR [edi+64], eax
  00097	ff 76 28	 push	 DWORD PTR [esi+40]
  0009a	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  0009d	ff d0		 call	 eax

; 1131 :     overlay = (ushf *) ZALLOC(dest, ds->lit_bufsize, sizeof(ush)+2);

  0009f	6a 04		 push	 4
  000a1	ff b7 9c 16 00
	00		 push	 DWORD PTR [edi+5788]
  000a7	89 47 44	 mov	 DWORD PTR [edi+68], eax
  000aa	ff 76 28	 push	 DWORD PTR [esi+40]
  000ad	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  000b0	ff d0		 call	 eax

; 1132 :     ds->pending_buf = (uchf *) overlay;
; 1133 : 
; 1134 :     if (ds->window == Z_NULL || ds->prev == Z_NULL || ds->head == Z_NULL ||

  000b2	8b 4f 38	 mov	 ecx, DWORD PTR [edi+56]
  000b5	83 c4 3c	 add	 esp, 60			; 0000003cH
  000b8	89 45 fc	 mov	 DWORD PTR _overlay$1$[ebp], eax
  000bb	89 47 08	 mov	 DWORD PTR [edi+8], eax
  000be	85 c9		 test	 ecx, ecx
  000c0	0f 84 ba 00 00
	00		 je	 $LN6@deflateCop
  000c6	83 7f 40 00	 cmp	 DWORD PTR [edi+64], 0
  000ca	0f 84 b0 00 00
	00		 je	 $LN6@deflateCop
  000d0	83 7f 44 00	 cmp	 DWORD PTR [edi+68], 0
  000d4	0f 84 a6 00 00
	00		 je	 $LN6@deflateCop
  000da	85 c0		 test	 eax, eax
  000dc	0f 84 9e 00 00
	00		 je	 $LN6@deflateCop

; 1138 :     }
; 1139 :     /* following zmemcpy do not work for 16-bit MSDOS */
; 1140 :     zmemcpy(ds->window, ss->window, ds->w_size * 2 * sizeof(Byte));

  000e2	8b 47 2c	 mov	 eax, DWORD PTR [edi+44]
  000e5	03 c0		 add	 eax, eax
  000e7	50		 push	 eax
  000e8	ff 73 38	 push	 DWORD PTR [ebx+56]
  000eb	51		 push	 ecx
  000ec	e8 00 00 00 00	 call	 _memcpy

; 1141 :     zmemcpy((voidpf)ds->prev, (voidpf)ss->prev, ds->w_size * sizeof(Pos));

  000f1	8b 47 2c	 mov	 eax, DWORD PTR [edi+44]
  000f4	03 c0		 add	 eax, eax
  000f6	50		 push	 eax
  000f7	ff 73 40	 push	 DWORD PTR [ebx+64]
  000fa	ff 77 40	 push	 DWORD PTR [edi+64]
  000fd	e8 00 00 00 00	 call	 _memcpy

; 1142 :     zmemcpy((voidpf)ds->head, (voidpf)ss->head, ds->hash_size * sizeof(Pos));

  00102	8b 47 4c	 mov	 eax, DWORD PTR [edi+76]
  00105	03 c0		 add	 eax, eax
  00107	50		 push	 eax
  00108	ff 73 44	 push	 DWORD PTR [ebx+68]
  0010b	ff 77 44	 push	 DWORD PTR [edi+68]
  0010e	e8 00 00 00 00	 call	 _memcpy

; 1143 :     zmemcpy(ds->pending_buf, ss->pending_buf, (uInt)ds->pending_buf_size);

  00113	ff 77 0c	 push	 DWORD PTR [edi+12]
  00116	ff 73 08	 push	 DWORD PTR [ebx+8]
  00119	ff 77 08	 push	 DWORD PTR [edi+8]
  0011c	e8 00 00 00 00	 call	 _memcpy

; 1144 : 
; 1145 :     ds->pending_out = ds->pending_buf + (ss->pending_out - ss->pending_buf);

  00121	8b 43 10	 mov	 eax, DWORD PTR [ebx+16]
  00124	83 c4 30	 add	 esp, 48			; 00000030H
  00127	2b 43 08	 sub	 eax, DWORD PTR [ebx+8]
  0012a	8b 57 08	 mov	 edx, DWORD PTR [edi+8]
  0012d	03 c2		 add	 eax, edx

; 1146 :     ds->d_buf = overlay + ds->lit_bufsize/sizeof(ush);

  0012f	8b 8f 9c 16 00
	00		 mov	 ecx, DWORD PTR [edi+5788]
  00135	8b 75 fc	 mov	 esi, DWORD PTR _overlay$1$[ebp]
  00138	89 47 10	 mov	 DWORD PTR [edi+16], eax
  0013b	8b c1		 mov	 eax, ecx
  0013d	d1 e8		 shr	 eax, 1
  0013f	8d 04 46	 lea	 eax, DWORD PTR [esi+eax*2]
  00142	89 87 a4 16 00
	00		 mov	 DWORD PTR [edi+5796], eax

; 1147 :     ds->l_buf = ds->pending_buf + (1+sizeof(ush))*ds->lit_bufsize;

  00148	8d 04 4a	 lea	 eax, DWORD PTR [edx+ecx*2]
  0014b	03 c1		 add	 eax, ecx
  0014d	89 87 98 16 00
	00		 mov	 DWORD PTR [edi+5784], eax

; 1148 : 
; 1149 :     ds->l_desc.dyn_tree = ds->dyn_ltree;

  00153	8d 87 94 00 00
	00		 lea	 eax, DWORD PTR [edi+148]
  00159	89 87 18 0b 00
	00		 mov	 DWORD PTR [edi+2840], eax

; 1150 :     ds->d_desc.dyn_tree = ds->dyn_dtree;

  0015f	8d 87 88 09 00
	00		 lea	 eax, DWORD PTR [edi+2440]
  00165	89 87 24 0b 00
	00		 mov	 DWORD PTR [edi+2852], eax

; 1151 :     ds->bl_desc.dyn_tree = ds->bl_tree;

  0016b	8d 87 7c 0a 00
	00		 lea	 eax, DWORD PTR [edi+2684]
  00171	89 87 30 0b 00
	00		 mov	 DWORD PTR [edi+2864], eax

; 1152 : 
; 1153 :     return Z_OK;

  00177	33 c0		 xor	 eax, eax
  00179	5f		 pop	 edi
  0017a	5b		 pop	 ebx

; 1154 : #endif /* MAXSEG_64K */
; 1155 : }

  0017b	5e		 pop	 esi
  0017c	8b e5		 mov	 esp, ebp
  0017e	5d		 pop	 ebp
  0017f	c3		 ret	 0
$LN6@deflateCop:

; 1135 :         ds->pending_buf == Z_NULL) {
; 1136 :         deflateEnd (dest);

  00180	56		 push	 esi
  00181	e8 00 00 00 00	 call	 _deflateEnd
  00186	83 c4 04	 add	 esp, 4
$LN10@deflateCop:

; 1137 :         return Z_MEM_ERROR;

  00189	5f		 pop	 edi
  0018a	5b		 pop	 ebx
  0018b	b8 fc ff ff ff	 mov	 eax, -4			; fffffffcH

; 1154 : #endif /* MAXSEG_64K */
; 1155 : }

  00190	5e		 pop	 esi
  00191	8b e5		 mov	 esp, ebp
  00193	5d		 pop	 ebp
  00194	c3		 ret	 0
$LN3@deflateCop:

; 1115 :         return Z_STREAM_ERROR;

  00195	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH

; 1154 : #endif /* MAXSEG_64K */
; 1155 : }

  0019a	5e		 pop	 esi
  0019b	8b e5		 mov	 esp, ebp
  0019d	5d		 pop	 ebp
  0019e	c3		 ret	 0
_deflateCopy ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\theclashingfritz\source\repos\inifileparser\zlib\deflate.c
;	COMDAT _read_buf
_TEXT	SEGMENT
_size$ = 8						; size = 4
_read_buf PROC						; COMDAT
; _strm$ = ecx
; _buf$ = edx

; 1168 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	8b da		 mov	 ebx, edx
  00009	57		 push	 edi

; 1169 :     unsigned len = strm->avail_in;

  0000a	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]

; 1170 : 
; 1171 :     if (len > size) len = size;

  0000d	8b f9		 mov	 edi, ecx
  0000f	3b 4d 08	 cmp	 ecx, DWORD PTR _size$[ebp]
  00012	0f 47 7d 08	 cmova	 edi, DWORD PTR _size$[ebp]

; 1172 :     if (len == 0) return 0;

  00016	85 ff		 test	 edi, edi
  00018	75 07		 jne	 SHORT $LN3@read_buf

; 1189 : }

  0001a	5f		 pop	 edi
  0001b	5e		 pop	 esi
  0001c	33 c0		 xor	 eax, eax
  0001e	5b		 pop	 ebx
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
$LN3@read_buf:

; 1173 : 
; 1174 :     strm->avail_in  -= len;
; 1175 : 
; 1176 :     zmemcpy(buf, strm->next_in, len);

  00021	57		 push	 edi
  00022	ff 36		 push	 DWORD PTR [esi]
  00024	2b cf		 sub	 ecx, edi
  00026	53		 push	 ebx
  00027	89 4e 04	 mov	 DWORD PTR [esi+4], ecx
  0002a	e8 00 00 00 00	 call	 _memcpy

; 1177 :     if (strm->state->wrap == 1) {

  0002f	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00032	83 c4 0c	 add	 esp, 12			; 0000000cH
  00035	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  00038	83 f8 01	 cmp	 eax, 1
  0003b	75 1c		 jne	 SHORT $LN4@read_buf

; 1178 :         strm->adler = adler32(strm->adler, buf, len);

  0003d	57		 push	 edi
  0003e	53		 push	 ebx
  0003f	ff 76 30	 push	 DWORD PTR [esi+48]
  00042	e8 00 00 00 00	 call	 _adler32

; 1183 :     }
; 1184 : #endif
; 1185 :     strm->next_in  += len;

  00047	01 3e		 add	 DWORD PTR [esi], edi
  00049	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1186 :     strm->total_in += len;

  0004c	01 7e 08	 add	 DWORD PTR [esi+8], edi
  0004f	89 46 30	 mov	 DWORD PTR [esi+48], eax

; 1187 : 
; 1188 :     return len;

  00052	8b c7		 mov	 eax, edi

; 1189 : }

  00054	5f		 pop	 edi
  00055	5e		 pop	 esi
  00056	5b		 pop	 ebx
  00057	5d		 pop	 ebp
  00058	c3		 ret	 0
$LN4@read_buf:

; 1179 :     }
; 1180 : #ifdef GZIP
; 1181 :     else if (strm->state->wrap == 2) {

  00059	83 f8 02	 cmp	 eax, 2
  0005c	75 10		 jne	 SHORT $LN6@read_buf

; 1182 :         strm->adler = crc32(strm->adler, buf, len);

  0005e	57		 push	 edi
  0005f	53		 push	 ebx
  00060	ff 76 30	 push	 DWORD PTR [esi+48]
  00063	e8 00 00 00 00	 call	 _crc32
  00068	89 46 30	 mov	 DWORD PTR [esi+48], eax
  0006b	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN6@read_buf:

; 1183 :     }
; 1184 : #endif
; 1185 :     strm->next_in  += len;

  0006e	01 3e		 add	 DWORD PTR [esi], edi

; 1187 : 
; 1188 :     return len;

  00070	8b c7		 mov	 eax, edi
  00072	01 7e 08	 add	 DWORD PTR [esi+8], edi

; 1189 : }

  00075	5f		 pop	 edi
  00076	5e		 pop	 esi
  00077	5b		 pop	 ebx
  00078	5d		 pop	 ebp
  00079	c3		 ret	 0
_read_buf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\theclashingfritz\source\repos\inifileparser\zlib\deflate.c
;	COMDAT _lm_init
_TEXT	SEGMENT
_lm_init PROC						; COMDAT
; _s$ = ecx

; 1196 : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1197 :     s->window_size = (ulg)2L*s->w_size;
; 1198 : 
; 1199 :     CLEAR_HASH(s);

  00003	33 c9		 xor	 ecx, ecx
  00005	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  00008	8b 56 4c	 mov	 edx, DWORD PTR [esi+76]
  0000b	03 c0		 add	 eax, eax
  0000d	89 46 3c	 mov	 DWORD PTR [esi+60], eax
  00010	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
  00013	66 89 4c 50 fe	 mov	 WORD PTR [eax+edx*2-2], cx
  00018	8b 46 4c	 mov	 eax, DWORD PTR [esi+76]
  0001b	8d 04 45 fe ff
	ff ff		 lea	 eax, DWORD PTR [eax*2-2]
  00022	50		 push	 eax
  00023	51		 push	 ecx
  00024	ff 76 44	 push	 DWORD PTR [esi+68]
  00027	e8 00 00 00 00	 call	 _memset

; 1200 : 
; 1201 :     /* Set the default configuration parameters:
; 1202 :      */
; 1203 :     s->max_lazy_match   = configuration_table[s->level].max_lazy;

  0002c	8b 86 84 00 00
	00		 mov	 eax, DWORD PTR [esi+132]
  00032	83 c4 0c	 add	 esp, 12			; 0000000cH
  00035	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  00038	0f b7 04 8d 02
	00 00 00	 movzx	 eax, WORD PTR _configuration_table[ecx*4+2]
  00040	89 86 80 00 00
	00		 mov	 DWORD PTR [esi+128], eax

; 1204 :     s->good_match       = configuration_table[s->level].good_length;

  00046	0f b7 04 8d 00
	00 00 00	 movzx	 eax, WORD PTR _configuration_table[ecx*4]
  0004e	89 86 8c 00 00
	00		 mov	 DWORD PTR [esi+140], eax

; 1205 :     s->nice_match       = configuration_table[s->level].nice_length;

  00054	0f b7 04 8d 04
	00 00 00	 movzx	 eax, WORD PTR _configuration_table[ecx*4+4]
  0005c	89 86 90 00 00
	00		 mov	 DWORD PTR [esi+144], eax

; 1206 :     s->max_chain_length = configuration_table[s->level].max_chain;

  00062	0f b7 04 8d 06
	00 00 00	 movzx	 eax, WORD PTR _configuration_table[ecx*4+6]
  0006a	89 46 7c	 mov	 DWORD PTR [esi+124], eax

; 1207 : 
; 1208 :     s->strstart = 0;

  0006d	c7 46 6c 00 00
	00 00		 mov	 DWORD PTR [esi+108], 0

; 1209 :     s->block_start = 0L;

  00074	c7 46 5c 00 00
	00 00		 mov	 DWORD PTR [esi+92], 0

; 1210 :     s->lookahead = 0;

  0007b	c7 46 74 00 00
	00 00		 mov	 DWORD PTR [esi+116], 0

; 1211 :     s->insert = 0;

  00082	c7 86 b4 16 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+5812], 0

; 1212 :     s->match_length = s->prev_length = MIN_MATCH-1;

  0008c	c7 46 78 02 00
	00 00		 mov	 DWORD PTR [esi+120], 2
  00093	c7 46 60 02 00
	00 00		 mov	 DWORD PTR [esi+96], 2

; 1213 :     s->match_available = 0;

  0009a	c7 46 68 00 00
	00 00		 mov	 DWORD PTR [esi+104], 0

; 1214 :     s->ins_h = 0;

  000a1	c7 46 48 00 00
	00 00		 mov	 DWORD PTR [esi+72], 0
  000a8	5e		 pop	 esi

; 1215 : #ifndef FASTEST
; 1216 : #ifdef ASMV
; 1217 :     match_init(); /* initialize the asm code */
; 1218 : #endif
; 1219 : #endif
; 1220 : }

  000a9	c3		 ret	 0
_lm_init ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\theclashingfritz\source\repos\inifileparser\zlib\deflate.c
;	COMDAT _longest_match
_TEXT	SEGMENT
tv424 = -40						; size = 4
_prev$1$ = -36						; size = 4
_wmask$1$ = -32						; size = 4
tv433 = -28						; size = 4
_limit$1$ = -24						; size = 4
_s$1$ = -20						; size = 4
_chain_length$1$ = -16					; size = 4
_nice_match$2$ = -12					; size = 4
_cur_match$1$ = -8					; size = 4
_scan_end$1$ = -2					; size = 1
_scan_end1$1$ = -1					; size = 1
_longest_match PROC					; COMDAT
; _s$ = ecx
; _cur_match$ = edx

; 1239 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	89 55 f8	 mov	 DWORD PTR _cur_match$1$[ebp], edx
  0000d	57		 push	 edi
  0000e	89 75 ec	 mov	 DWORD PTR _s$1$[ebp], esi

; 1240 :     unsigned chain_length = s->max_chain_length;/* max hash chain length */
; 1241 :     register Bytef *scan = s->window + s->strstart; /* current string */

  00011	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  00014	8b 5e 6c	 mov	 ebx, DWORD PTR [esi+108]
  00017	8b 46 7c	 mov	 eax, DWORD PTR [esi+124]
  0001a	03 d9		 add	 ebx, ecx

; 1242 :     register Bytef *match;                      /* matched string */
; 1243 :     register int len;                           /* length of current match */
; 1244 :     int best_len = (int)s->prev_length;         /* best match length so far */

  0001c	8b 7e 78	 mov	 edi, DWORD PTR [esi+120]
  0001f	89 4d e4	 mov	 DWORD PTR tv433[ebp], ecx

; 1245 :     int nice_match = s->nice_match;             /* stop if match long enough */
; 1246 :     IPos limit = s->strstart > (IPos)MAX_DIST(s) ?

  00022	8b 4e 2c	 mov	 ecx, DWORD PTR [esi+44]
  00025	89 45 f0	 mov	 DWORD PTR _chain_length$1$[ebp], eax
  00028	8b 86 90 00 00
	00		 mov	 eax, DWORD PTR [esi+144]
  0002e	89 45 f4	 mov	 DWORD PTR _nice_match$2$[ebp], eax
  00031	8d 81 fa fe ff
	ff		 lea	 eax, DWORD PTR [ecx-262]
  00037	39 46 6c	 cmp	 DWORD PTR [esi+108], eax
  0003a	76 0f		 jbe	 SHORT $LN18@longest_ma
  0003c	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  0003f	2b c1		 sub	 eax, ecx
  00041	05 06 01 00 00	 add	 eax, 262		; 00000106H
  00046	89 45 e8	 mov	 DWORD PTR _limit$1$[ebp], eax
  00049	eb 07		 jmp	 SHORT $LN19@longest_ma
$LN18@longest_ma:
  0004b	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _limit$1$[ebp], 0
$LN19@longest_ma:

; 1247 :         s->strstart - (IPos)MAX_DIST(s) : NIL;
; 1248 :     /* Stop when cur_match becomes <= limit. To simplify the code,
; 1249 :      * we prevent matches with the string of window index 0.
; 1250 :      */
; 1251 :     Posf *prev = s->prev;

  00052	8b 46 40	 mov	 eax, DWORD PTR [esi+64]

; 1252 :     uInt wmask = s->w_mask;
; 1253 : 
; 1254 : #ifdef UNALIGNED_OK
; 1255 :     /* Compare two bytes at a time. Note: this is not always beneficial.
; 1256 :      * Try with and without -DUNALIGNED_OK to check.
; 1257 :      */
; 1258 :     register Bytef *strend = s->window + s->strstart + MAX_MATCH - 1;
; 1259 :     register ush scan_start = *(ushf*)scan;
; 1260 :     register ush scan_end   = *(ushf*)(scan+best_len-1);
; 1261 : #else
; 1262 :     register Bytef *strend = s->window + s->strstart + MAX_MATCH;
; 1263 :     register Byte scan_end1  = scan[best_len-1];

  00055	8a 4c 1f ff	 mov	 cl, BYTE PTR [edi+ebx-1]

; 1264 :     register Byte scan_end   = scan[best_len];

  00059	8a 2c 1f	 mov	 ch, BYTE PTR [edi+ebx]
  0005c	89 45 dc	 mov	 DWORD PTR _prev$1$[ebp], eax
  0005f	8b 46 34	 mov	 eax, DWORD PTR [esi+52]
  00062	89 45 e0	 mov	 DWORD PTR _wmask$1$[ebp], eax

; 1265 : #endif
; 1266 : 
; 1267 :     /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.
; 1268 :      * It is easy to get rid of this optimization if necessary.
; 1269 :      */
; 1270 :     Assert(s->hash_bits >= 8 && MAX_MATCH == 258, "Code too clever");
; 1271 : 
; 1272 :     /* Do not waste too much time if we already have a good match: */
; 1273 :     if (s->prev_length >= s->good_match) {

  00065	8b 45 ec	 mov	 eax, DWORD PTR _s$1$[ebp]
  00068	88 4d ff	 mov	 BYTE PTR _scan_end1$1$[ebp], cl
  0006b	88 6d fe	 mov	 BYTE PTR _scan_end$1$[ebp], ch
  0006e	3b b8 8c 00 00
	00		 cmp	 edi, DWORD PTR [eax+140]
  00074	72 0f		 jb	 SHORT $LN8@longest_ma

; 1274 :         chain_length >>= 2;

  00076	8b 48 7c	 mov	 ecx, DWORD PTR [eax+124]
  00079	c1 e9 02	 shr	 ecx, 2
  0007c	89 4d f0	 mov	 DWORD PTR _chain_length$1$[ebp], ecx
  0007f	8a 4d ff	 mov	 cl, BYTE PTR _scan_end1$1$[ebp]
  00082	8a 6d fe	 mov	 ch, BYTE PTR _scan_end$1$[ebp]
$LN8@longest_ma:

; 1275 :     }
; 1276 :     /* Do not look for matches beyond the end of the input. This is necessary
; 1277 :      * to make deflate deterministic.
; 1278 :      */
; 1279 :     if ((uInt)nice_match > s->lookahead) nice_match = (int)s->lookahead;

  00085	8b 40 74	 mov	 eax, DWORD PTR [eax+116]
  00088	8b 75 f4	 mov	 esi, DWORD PTR _nice_match$2$[ebp]
  0008b	3b f0		 cmp	 esi, eax
  0008d	89 45 d8	 mov	 DWORD PTR tv424[ebp], eax
  00090	0f 47 f0	 cmova	 esi, eax
  00093	89 75 f4	 mov	 DWORD PTR _nice_match$2$[ebp], esi
  00096	8d b3 02 01 00
	00		 lea	 esi, DWORD PTR [ebx+258]
  0009c	0f 1f 40 00	 npad	 4
$LL4@longest_ma:

; 1280 : 
; 1281 :     Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, "need lookahead");
; 1282 : 
; 1283 :     do {
; 1284 :         Assert(cur_match < s->strstart, "no future");
; 1285 :         match = s->window + cur_match;

  000a0	03 55 e4	 add	 edx, DWORD PTR tv433[ebp]

; 1286 : 
; 1287 :         /* Skip to next match if the match length cannot increase
; 1288 :          * or if the match length is less than 2.  Note that the checks below
; 1289 :          * for insufficient lookahead only occur occasionally for performance
; 1290 :          * reasons.  Therefore uninitialized memory will be accessed, and
; 1291 :          * conditional jumps will be made that depend on those values.
; 1292 :          * However the length of the match is limited to the lookahead, so
; 1293 :          * the output of deflate is not affected by the uninitialized values.
; 1294 :          */
; 1295 : #if (defined(UNALIGNED_OK) && MAX_MATCH == 258)
; 1296 :         /* This code assumes sizeof(unsigned short) == 2. Do not use
; 1297 :          * UNALIGNED_OK if your compiler uses a different size.
; 1298 :          */
; 1299 :         if (*(ushf*)(match+best_len-1) != scan_end ||
; 1300 :             *(ushf*)match != scan_start) continue;
; 1301 : 
; 1302 :         /* It is not necessary to compare scan[2] and match[2] since they are
; 1303 :          * always equal when the other bytes match, given that the hash keys
; 1304 :          * are equal and that HASH_BITS >= 8. Compare 2 bytes at a time at
; 1305 :          * strstart+3, +5, ... up to strstart+257. We check for insufficient
; 1306 :          * lookahead only every 4th comparison; the 128th check will be made
; 1307 :          * at strstart+257. If MAX_MATCH-2 is not a multiple of 8, it is
; 1308 :          * necessary to put more guard bytes at the end of the window, or
; 1309 :          * to check more often for insufficient lookahead.
; 1310 :          */
; 1311 :         Assert(scan[2] == match[2], "scan[2]?");
; 1312 :         scan++, match++;
; 1313 :         do {
; 1314 :         } while (*(ushf*)(scan+=2) == *(ushf*)(match+=2) &&
; 1315 :                  *(ushf*)(scan+=2) == *(ushf*)(match+=2) &&
; 1316 :                  *(ushf*)(scan+=2) == *(ushf*)(match+=2) &&
; 1317 :                  *(ushf*)(scan+=2) == *(ushf*)(match+=2) &&
; 1318 :                  scan < strend);
; 1319 :         /* The funny "do {}" generates better code on most compilers */
; 1320 : 
; 1321 :         /* Here, scan <= window+strstart+257 */
; 1322 :         Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");
; 1323 :         if (*scan == *match) scan++;
; 1324 : 
; 1325 :         len = (MAX_MATCH - 1) - (int)(strend-scan);
; 1326 :         scan = strend - (MAX_MATCH-1);
; 1327 : 
; 1328 : #else /* UNALIGNED_OK */
; 1329 : 
; 1330 :         if (match[best_len]   != scan_end  ||
; 1331 :             match[best_len-1] != scan_end1 ||
; 1332 :             *match            != *scan     ||

  000a3	38 2c 3a	 cmp	 BYTE PTR [edx+edi], ch
  000a6	0f 85 9e 00 00
	00		 jne	 $LN36@longest_ma
  000ac	38 4c 3a ff	 cmp	 BYTE PTR [edx+edi-1], cl
  000b0	0f 85 94 00 00
	00		 jne	 $LN36@longest_ma
  000b6	8a 02		 mov	 al, BYTE PTR [edx]
  000b8	3a 03		 cmp	 al, BYTE PTR [ebx]
  000ba	0f 85 8a 00 00
	00		 jne	 $LN36@longest_ma
  000c0	8a 42 01	 mov	 al, BYTE PTR [edx+1]
  000c3	3a 43 01	 cmp	 al, BYTE PTR [ebx+1]
  000c6	0f 85 7e 00 00
	00		 jne	 $LN36@longest_ma

; 1333 :             *++match          != scan[1])      continue;
; 1334 : 
; 1335 :         /* The check at best_len-1 can be removed because it will be made
; 1336 :          * again later. (This heuristic is not always a win.)
; 1337 :          * It is not necessary to compare scan[2] and match[2] since they
; 1338 :          * are always equal when the other bytes match, given that
; 1339 :          * the hash keys are equal and that HASH_BITS >= 8.
; 1340 :          */
; 1341 :         scan += 2, match++;

  000cc	8d 43 02	 lea	 eax, DWORD PTR [ebx+2]
  000cf	83 c2 02	 add	 edx, 2
$LL7@longest_ma:

; 1342 :         Assert(*scan == *match, "match[2]?");
; 1343 : 
; 1344 :         /* We check for insufficient lookahead only every 8th comparison;
; 1345 :          * the 256th check will be made at strstart+258.
; 1346 :          */
; 1347 :         do {
; 1348 :         } while (*++scan == *++match && *++scan == *++match &&
; 1349 :                  *++scan == *++match && *++scan == *++match &&
; 1350 :                  *++scan == *++match && *++scan == *++match &&
; 1351 :                  *++scan == *++match && *++scan == *++match &&

  000d2	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  000d5	40		 inc	 eax
  000d6	3a 4a 01	 cmp	 cl, BYTE PTR [edx+1]
  000d9	75 45		 jne	 SHORT $LN12@longest_ma
  000db	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  000de	40		 inc	 eax
  000df	3a 4a 02	 cmp	 cl, BYTE PTR [edx+2]
  000e2	75 3c		 jne	 SHORT $LN12@longest_ma
  000e4	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  000e7	40		 inc	 eax
  000e8	3a 4a 03	 cmp	 cl, BYTE PTR [edx+3]
  000eb	75 33		 jne	 SHORT $LN12@longest_ma
  000ed	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  000f0	40		 inc	 eax
  000f1	3a 4a 04	 cmp	 cl, BYTE PTR [edx+4]
  000f4	75 2a		 jne	 SHORT $LN12@longest_ma
  000f6	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  000f9	40		 inc	 eax
  000fa	3a 4a 05	 cmp	 cl, BYTE PTR [edx+5]
  000fd	75 21		 jne	 SHORT $LN12@longest_ma
  000ff	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  00102	40		 inc	 eax
  00103	3a 4a 06	 cmp	 cl, BYTE PTR [edx+6]
  00106	75 18		 jne	 SHORT $LN12@longest_ma
  00108	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  0010b	40		 inc	 eax
  0010c	3a 4a 07	 cmp	 cl, BYTE PTR [edx+7]
  0010f	75 0f		 jne	 SHORT $LN12@longest_ma
  00111	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  00114	40		 inc	 eax
  00115	83 c2 08	 add	 edx, 8
  00118	3a 0a		 cmp	 cl, BYTE PTR [edx]
  0011a	75 04		 jne	 SHORT $LN12@longest_ma
  0011c	3b c6		 cmp	 eax, esi
  0011e	72 b2		 jb	 SHORT $LL7@longest_ma
$LN12@longest_ma:

; 1352 :                  scan < strend);
; 1353 : 
; 1354 :         Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");
; 1355 : 
; 1356 :         len = MAX_MATCH - (int)(strend - scan);
; 1357 :         scan = strend - MAX_MATCH;
; 1358 : 
; 1359 : #endif /* UNALIGNED_OK */
; 1360 : 
; 1361 :         if (len > best_len) {
; 1362 :             s->match_start = cur_match;

  00120	8b 4d f8	 mov	 ecx, DWORD PTR _cur_match$1$[ebp]
  00123	2b c6		 sub	 eax, esi
  00125	05 02 01 00 00	 add	 eax, 258		; 00000102H
  0012a	3b c7		 cmp	 eax, edi
  0012c	7e 1f		 jle	 SHORT $LN2@longest_ma

; 1363 :             best_len = len;

  0012e	8b f8		 mov	 edi, eax
  00130	8b 55 ec	 mov	 edx, DWORD PTR _s$1$[ebp]
  00133	89 4a 70	 mov	 DWORD PTR [edx+112], ecx

; 1364 :             if (len >= nice_match) break;

  00136	3b 45 f4	 cmp	 eax, DWORD PTR _nice_match$2$[ebp]
  00139	7d 36		 jge	 SHORT $LN3@longest_ma

; 1365 : #ifdef UNALIGNED_OK
; 1366 :             scan_end = *(ushf*)(scan+best_len-1);
; 1367 : #else
; 1368 :             scan_end1  = scan[best_len-1];

  0013b	8a 54 18 ff	 mov	 dl, BYTE PTR [eax+ebx-1]

; 1369 :             scan_end   = scan[best_len];

  0013f	8a 04 18	 mov	 al, BYTE PTR [eax+ebx]
  00142	88 55 ff	 mov	 BYTE PTR _scan_end1$1$[ebp], dl
  00145	88 45 fe	 mov	 BYTE PTR _scan_end$1$[ebp], al
  00148	eb 03		 jmp	 SHORT $LN2@longest_ma
$LN36@longest_ma:

; 1286 : 
; 1287 :         /* Skip to next match if the match length cannot increase
; 1288 :          * or if the match length is less than 2.  Note that the checks below
; 1289 :          * for insufficient lookahead only occur occasionally for performance
; 1290 :          * reasons.  Therefore uninitialized memory will be accessed, and
; 1291 :          * conditional jumps will be made that depend on those values.
; 1292 :          * However the length of the match is limited to the lookahead, so
; 1293 :          * the output of deflate is not affected by the uninitialized values.
; 1294 :          */
; 1295 : #if (defined(UNALIGNED_OK) && MAX_MATCH == 258)
; 1296 :         /* This code assumes sizeof(unsigned short) == 2. Do not use
; 1297 :          * UNALIGNED_OK if your compiler uses a different size.
; 1298 :          */
; 1299 :         if (*(ushf*)(match+best_len-1) != scan_end ||
; 1300 :             *(ushf*)match != scan_start) continue;
; 1301 : 
; 1302 :         /* It is not necessary to compare scan[2] and match[2] since they are
; 1303 :          * always equal when the other bytes match, given that the hash keys
; 1304 :          * are equal and that HASH_BITS >= 8. Compare 2 bytes at a time at
; 1305 :          * strstart+3, +5, ... up to strstart+257. We check for insufficient
; 1306 :          * lookahead only every 4th comparison; the 128th check will be made
; 1307 :          * at strstart+257. If MAX_MATCH-2 is not a multiple of 8, it is
; 1308 :          * necessary to put more guard bytes at the end of the window, or
; 1309 :          * to check more often for insufficient lookahead.
; 1310 :          */
; 1311 :         Assert(scan[2] == match[2], "scan[2]?");
; 1312 :         scan++, match++;
; 1313 :         do {
; 1314 :         } while (*(ushf*)(scan+=2) == *(ushf*)(match+=2) &&
; 1315 :                  *(ushf*)(scan+=2) == *(ushf*)(match+=2) &&
; 1316 :                  *(ushf*)(scan+=2) == *(ushf*)(match+=2) &&
; 1317 :                  *(ushf*)(scan+=2) == *(ushf*)(match+=2) &&
; 1318 :                  scan < strend);
; 1319 :         /* The funny "do {}" generates better code on most compilers */
; 1320 : 
; 1321 :         /* Here, scan <= window+strstart+257 */
; 1322 :         Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");
; 1323 :         if (*scan == *match) scan++;
; 1324 : 
; 1325 :         len = (MAX_MATCH - 1) - (int)(strend-scan);
; 1326 :         scan = strend - (MAX_MATCH-1);
; 1327 : 
; 1328 : #else /* UNALIGNED_OK */
; 1329 : 
; 1330 :         if (match[best_len]   != scan_end  ||
; 1331 :             match[best_len-1] != scan_end1 ||
; 1332 :             *match            != *scan     ||

  0014a	8b 4d f8	 mov	 ecx, DWORD PTR _cur_match$1$[ebp]
$LN2@longest_ma:

; 1370 : #endif
; 1371 :         }
; 1372 :     } while ((cur_match = prev[cur_match & wmask]) > limit
; 1373 :              && --chain_length != 0);

  0014d	8b 45 e0	 mov	 eax, DWORD PTR _wmask$1$[ebp]
  00150	23 c1		 and	 eax, ecx
  00152	8b 4d dc	 mov	 ecx, DWORD PTR _prev$1$[ebp]
  00155	0f b7 14 41	 movzx	 edx, WORD PTR [ecx+eax*2]
  00159	89 55 f8	 mov	 DWORD PTR _cur_match$1$[ebp], edx
  0015c	3b 55 e8	 cmp	 edx, DWORD PTR _limit$1$[ebp]
  0015f	76 10		 jbe	 SHORT $LN3@longest_ma
  00161	83 6d f0 01	 sub	 DWORD PTR _chain_length$1$[ebp], 1
  00165	8a 4d ff	 mov	 cl, BYTE PTR _scan_end1$1$[ebp]
  00168	8a 6d fe	 mov	 ch, BYTE PTR _scan_end$1$[ebp]
  0016b	0f 85 2f ff ff
	ff		 jne	 $LL4@longest_ma
$LN3@longest_ma:

; 1374 : 
; 1375 :     if ((uInt)best_len <= s->lookahead) return (uInt)best_len;

  00171	8b 45 d8	 mov	 eax, DWORD PTR tv424[ebp]
  00174	3b f8		 cmp	 edi, eax
  00176	0f 46 c7	 cmovbe	 eax, edi
  00179	5f		 pop	 edi
  0017a	5e		 pop	 esi
  0017b	5b		 pop	 ebx

; 1376 :     return s->lookahead;
; 1377 : }

  0017c	8b e5		 mov	 esp, ebp
  0017e	5d		 pop	 ebp
  0017f	c3		 ret	 0
_longest_match ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\theclashingfritz\source\repos\inifileparser\zlib\deflate.c
;	COMDAT _fill_window
_TEXT	SEGMENT
_wsize$1$ = -4						; size = 4
_fill_window PROC					; COMDAT
; _s$ = ecx

; 1484 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	57		 push	 edi

; 1485 :     unsigned n;
; 1486 :     unsigned more;    /* Amount of free space at the end of the window. */
; 1487 :     uInt wsize = s->w_size;

  00009	8b 5e 2c	 mov	 ebx, DWORD PTR [esi+44]
  0000c	89 5d fc	 mov	 DWORD PTR _wsize$1$[ebp], ebx
  0000f	90		 npad	 1
$LL4@fill_windo:

; 1488 : 
; 1489 :     Assert(s->lookahead < MIN_LOOKAHEAD, "already enough lookahead");
; 1490 : 
; 1491 :     do {
; 1492 :         more = (unsigned)(s->window_size -(ulg)s->lookahead -(ulg)s->strstart);
; 1493 : 
; 1494 :         /* Deal with !@#$% 64K limit: */
; 1495 :         if (sizeof(int) <= 2) {
; 1496 :             if (more == 0 && s->strstart == 0 && s->lookahead == 0) {
; 1497 :                 more = wsize;
; 1498 : 
; 1499 :             } else if (more == (unsigned)(-1)) {
; 1500 :                 /* Very unlikely, but possible on 16 bit machine if
; 1501 :                  * strstart == 0 && lookahead == 1 (input done a byte at time)
; 1502 :                  */
; 1503 :                 more--;
; 1504 :             }
; 1505 :         }
; 1506 : 
; 1507 :         /* If the window is almost full and there is insufficient lookahead,
; 1508 :          * move the upper half to the lower one to make room in the upper half.
; 1509 :          */
; 1510 :         if (s->strstart >= wsize+MAX_DIST(s)) {

  00010	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  00013	8b 7e 3c	 mov	 edi, DWORD PTR [esi+60]
  00016	05 fa fe ff ff	 add	 eax, -262		; fffffefaH
  0001b	2b 7e 74	 sub	 edi, DWORD PTR [esi+116]
  0001e	03 c3		 add	 eax, ebx
  00020	2b 7e 6c	 sub	 edi, DWORD PTR [esi+108]
  00023	39 46 6c	 cmp	 DWORD PTR [esi+108], eax
  00026	72 27		 jb	 SHORT $LN11@fill_windo

; 1511 : 
; 1512 :             zmemcpy(s->window, s->window+wsize, (unsigned)wsize - more);

  00028	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  0002b	8b c3		 mov	 eax, ebx
  0002d	2b c7		 sub	 eax, edi
  0002f	50		 push	 eax
  00030	8d 04 19	 lea	 eax, DWORD PTR [ecx+ebx]
  00033	50		 push	 eax
  00034	51		 push	 ecx
  00035	e8 00 00 00 00	 call	 _memcpy

; 1513 :             s->match_start -= wsize;

  0003a	29 5e 70	 sub	 DWORD PTR [esi+112], ebx
  0003d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1514 :             s->strstart    -= wsize; /* we now have strstart >= MAX_DIST */

  00040	29 5e 6c	 sub	 DWORD PTR [esi+108], ebx

; 1515 :             s->block_start -= (long) wsize;
; 1516 :             slide_hash(s);

  00043	8b ce		 mov	 ecx, esi
  00045	29 5e 5c	 sub	 DWORD PTR [esi+92], ebx
  00048	e8 00 00 00 00	 call	 _slide_hash

; 1517 :             more += wsize;

  0004d	03 fb		 add	 edi, ebx
$LN11@fill_windo:

; 1518 :         }
; 1519 :         if (s->strm->avail_in == 0) break;

  0004f	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00051	83 79 04 00	 cmp	 DWORD PTR [ecx+4], 0
  00055	0f 84 b2 00 00
	00		 je	 $LN3@fill_windo

; 1520 : 
; 1521 :         /* If there was no sliding:
; 1522 :          *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&
; 1523 :          *    more == window_size - lookahead - strstart
; 1524 :          * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)
; 1525 :          * => more >= window_size - 2*WSIZE + 2
; 1526 :          * In the BIG_MEM or MMAP case (not yet supported),
; 1527 :          *   window_size == input_size + MIN_LOOKAHEAD  &&
; 1528 :          *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.
; 1529 :          * Otherwise, window_size == 2*WSIZE so more >= 2.
; 1530 :          * If there was sliding, more >= WSIZE. So in all cases, more >= 2.
; 1531 :          */
; 1532 :         Assert(more >= 2, "more < 2");
; 1533 : 
; 1534 :         n = read_buf(s->strm, s->window + s->strstart + s->lookahead, more);

  0005b	8b 56 74	 mov	 edx, DWORD PTR [esi+116]
  0005e	03 56 6c	 add	 edx, DWORD PTR [esi+108]
  00061	03 56 38	 add	 edx, DWORD PTR [esi+56]
  00064	57		 push	 edi
  00065	e8 00 00 00 00	 call	 _read_buf

; 1535 :         s->lookahead += n;

  0006a	01 46 74	 add	 DWORD PTR [esi+116], eax
  0006d	83 c4 04	 add	 esp, 4
  00070	8b 46 74	 mov	 eax, DWORD PTR [esi+116]

; 1536 : 
; 1537 :         /* Initialize the hash value now that we have some input: */
; 1538 :         if (s->lookahead + s->insert >= MIN_MATCH) {

  00073	8b be b4 16 00
	00		 mov	 edi, DWORD PTR [esi+5812]
  00079	03 c7		 add	 eax, edi
  0007b	83 f8 03	 cmp	 eax, 3
  0007e	72 78		 jb	 SHORT $LN2@fill_windo

; 1539 :             uInt str = s->strstart - s->insert;

  00080	8b 5e 6c	 mov	 ebx, DWORD PTR [esi+108]

; 1540 :             s->ins_h = s->window[str];

  00083	8b 46 38	 mov	 eax, DWORD PTR [esi+56]
  00086	2b df		 sub	 ebx, edi

; 1541 :             UPDATE_HASH(s, s->ins_h, s->window[str + 1]);

  00088	8b 4e 58	 mov	 ecx, DWORD PTR [esi+88]
  0008b	0f b6 14 18	 movzx	 edx, BYTE PTR [eax+ebx]
  0008f	89 56 48	 mov	 DWORD PTR [esi+72], edx
  00092	0f b6 44 18 01	 movzx	 eax, BYTE PTR [eax+ebx+1]
  00097	d3 e2		 shl	 edx, cl
  00099	33 c2		 xor	 eax, edx
  0009b	23 46 54	 and	 eax, DWORD PTR [esi+84]
  0009e	89 46 48	 mov	 DWORD PTR [esi+72], eax

; 1542 : #if MIN_MATCH != 3
; 1543 :             Call UPDATE_HASH() MIN_MATCH-3 more times
; 1544 : #endif
; 1545 :             while (s->insert) {

  000a1	85 ff		 test	 edi, edi
  000a3	74 50		 je	 SHORT $LN32@fill_windo
$LL5@fill_windo:

; 1546 :                 UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]);

  000a5	8b 46 38	 mov	 eax, DWORD PTR [esi+56]

; 1547 : #ifndef FASTEST
; 1548 :                 s->prev[str & s->w_mask] = s->head[s->ins_h];

  000a8	8b d3		 mov	 edx, ebx
  000aa	8b 4e 58	 mov	 ecx, DWORD PTR [esi+88]
  000ad	23 56 34	 and	 edx, DWORD PTR [esi+52]
  000b0	0f b6 7c 18 02	 movzx	 edi, BYTE PTR [eax+ebx+2]
  000b5	8b 46 48	 mov	 eax, DWORD PTR [esi+72]
  000b8	d3 e0		 shl	 eax, cl
  000ba	8b 4e 40	 mov	 ecx, DWORD PTR [esi+64]
  000bd	33 f8		 xor	 edi, eax
  000bf	23 7e 54	 and	 edi, DWORD PTR [esi+84]
  000c2	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
  000c5	89 7e 48	 mov	 DWORD PTR [esi+72], edi
  000c8	66 8b 04 78	 mov	 ax, WORD PTR [eax+edi*2]
  000cc	66 89 04 51	 mov	 WORD PTR [ecx+edx*2], ax

; 1549 : #endif
; 1550 :                 s->head[s->ins_h] = (Pos)str;

  000d0	8b 4e 48	 mov	 ecx, DWORD PTR [esi+72]
  000d3	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
  000d6	66 89 1c 48	 mov	 WORD PTR [eax+ecx*2], bx

; 1551 :                 str++;

  000da	43		 inc	 ebx

; 1552 :                 s->insert--;

  000db	ff 8e b4 16 00
	00		 dec	 DWORD PTR [esi+5812]

; 1553 :                 if (s->lookahead + s->insert < MIN_MATCH)

  000e1	8b 46 74	 mov	 eax, DWORD PTR [esi+116]
  000e4	8b 8e b4 16 00
	00		 mov	 ecx, DWORD PTR [esi+5812]
  000ea	03 c1		 add	 eax, ecx
  000ec	83 f8 03	 cmp	 eax, 3
  000ef	72 04		 jb	 SHORT $LN32@fill_windo

; 1542 : #if MIN_MATCH != 3
; 1543 :             Call UPDATE_HASH() MIN_MATCH-3 more times
; 1544 : #endif
; 1545 :             while (s->insert) {

  000f1	85 c9		 test	 ecx, ecx
  000f3	75 b0		 jne	 SHORT $LL5@fill_windo
$LN32@fill_windo:
  000f5	8b 5d fc	 mov	 ebx, DWORD PTR _wsize$1$[ebp]
$LN2@fill_windo:

; 1554 :                     break;
; 1555 :             }
; 1556 :         }
; 1557 :         /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,
; 1558 :          * but this is not important since only literal bytes will be emitted.
; 1559 :          */
; 1560 : 
; 1561 :     } while (s->lookahead < MIN_LOOKAHEAD && s->strm->avail_in != 0);

  000f8	81 7e 74 06 01
	00 00		 cmp	 DWORD PTR [esi+116], 262 ; 00000106H
  000ff	73 0c		 jae	 SHORT $LN3@fill_windo
  00101	8b 06		 mov	 eax, DWORD PTR [esi]
  00103	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00107	0f 85 03 ff ff
	ff		 jne	 $LL4@fill_windo
$LN3@fill_windo:

; 1562 : 
; 1563 :     /* If the WIN_INIT bytes after the end of the current data have never been
; 1564 :      * written, then zero those bytes in order to avoid memory check reports of
; 1565 :      * the use of uninitialized (or uninitialised as Julian writes) bytes by
; 1566 :      * the longest match routines.  Update the high water mark for the next
; 1567 :      * time through here.  WIN_INIT is set to MAX_MATCH since the longest match
; 1568 :      * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.
; 1569 :      */
; 1570 :     if (s->high_water < s->window_size) {

  0010d	8b 8e c0 16 00
	00		 mov	 ecx, DWORD PTR [esi+5824]
  00113	8b 7e 3c	 mov	 edi, DWORD PTR [esi+60]
  00116	3b cf		 cmp	 ecx, edi
  00118	73 67		 jae	 SHORT $LN20@fill_windo

; 1571 :         ulg curr = s->strstart + (ulg)(s->lookahead);

  0011a	8b 5e 74	 mov	 ebx, DWORD PTR [esi+116]
  0011d	03 5e 6c	 add	 ebx, DWORD PTR [esi+108]

; 1572 :         ulg init;
; 1573 : 
; 1574 :         if (s->high_water < curr) {

  00120	3b cb		 cmp	 ecx, ebx
  00122	73 2d		 jae	 SHORT $LN17@fill_windo

; 1575 :             /* Previous high water mark below current data -- zero WIN_INIT
; 1576 :              * bytes or up to end of window, whichever is less.
; 1577 :              */
; 1578 :             init = s->window_size - curr;
; 1579 :             if (init > WIN_INIT)

  00124	b8 02 01 00 00	 mov	 eax, 258		; 00000102H
  00129	2b fb		 sub	 edi, ebx
  0012b	3b f8		 cmp	 edi, eax
  0012d	0f 47 f8	 cmova	 edi, eax

; 1580 :                 init = WIN_INIT;
; 1581 :             zmemzero(s->window + curr, (unsigned)init);

  00130	8b 46 38	 mov	 eax, DWORD PTR [esi+56]
  00133	57		 push	 edi
  00134	03 c3		 add	 eax, ebx
  00136	6a 00		 push	 0
  00138	50		 push	 eax
  00139	e8 00 00 00 00	 call	 _memset
  0013e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1582 :             s->high_water = curr + init;

  00141	8d 04 1f	 lea	 eax, DWORD PTR [edi+ebx]
  00144	89 86 c0 16 00
	00		 mov	 DWORD PTR [esi+5824], eax

; 1594 :         }
; 1595 :     }
; 1596 : 
; 1597 :     Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,
; 1598 :            "not enough room for search");
; 1599 : }

  0014a	5f		 pop	 edi
  0014b	5e		 pop	 esi
  0014c	5b		 pop	 ebx
  0014d	8b e5		 mov	 esp, ebp
  0014f	5d		 pop	 ebp
  00150	c3		 ret	 0
$LN17@fill_windo:

; 1583 :         }
; 1584 :         else if (s->high_water < (ulg)curr + WIN_INIT) {

  00151	8d 83 02 01 00
	00		 lea	 eax, DWORD PTR [ebx+258]
  00157	3b c8		 cmp	 ecx, eax
  00159	73 26		 jae	 SHORT $LN20@fill_windo

; 1585 :             /* High water mark at or above current data, but below current data
; 1586 :              * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up
; 1587 :              * to end of window, whichever is less.
; 1588 :              */
; 1589 :             init = (ulg)curr + WIN_INIT - s->high_water;
; 1590 :             if (init > s->window_size - s->high_water)

  0015b	2b d9		 sub	 ebx, ecx
  0015d	2b f9		 sub	 edi, ecx
  0015f	8d 83 02 01 00
	00		 lea	 eax, DWORD PTR [ebx+258]
  00165	3b c7		 cmp	 eax, edi
  00167	0f 46 f8	 cmovbe	 edi, eax

; 1591 :                 init = s->window_size - s->high_water;
; 1592 :             zmemzero(s->window + s->high_water, (unsigned)init);

  0016a	8b 46 38	 mov	 eax, DWORD PTR [esi+56]
  0016d	57		 push	 edi
  0016e	03 c1		 add	 eax, ecx
  00170	6a 00		 push	 0
  00172	50		 push	 eax
  00173	e8 00 00 00 00	 call	 _memset
  00178	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1593 :             s->high_water += init;

  0017b	01 be c0 16 00
	00		 add	 DWORD PTR [esi+5824], edi
$LN20@fill_windo:

; 1594 :         }
; 1595 :     }
; 1596 : 
; 1597 :     Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,
; 1598 :            "not enough room for search");
; 1599 : }

  00181	5f		 pop	 edi
  00182	5e		 pop	 esi
  00183	5b		 pop	 ebx
  00184	8b e5		 mov	 esp, ebp
  00186	5d		 pop	 ebp
  00187	c3		 ret	 0
_fill_window ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\theclashingfritz\source\repos\inifileparser\zlib\deflate.c
;	COMDAT _deflate_stored
_TEXT	SEGMENT
tv1088 = -12						; size = 4
_have$3$ = -12						; size = 4
_len$2$ = -8						; size = 4
_left$2$ = -4						; size = 4
tv1086 = 8						; size = 4
tv1011 = 8						; size = 4
_have$4$ = 8						; size = 4
_len$4$ = 8						; size = 4
_used$2$ = 8						; size = 4
_s$ = 8							; size = 4
_flush$ = 12						; size = 4
_deflate_stored PROC					; COMDAT

; 1646 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx
  00007	56		 push	 esi

; 1647 :     /* Smallest worthy block size when not flushing or finishing. By default
; 1648 :      * this is 32K. This can be as small as 507 bytes for memLevel == 1. For
; 1649 :      * large input and output buffers, the stored block size will be larger.
; 1650 :      */
; 1651 :     unsigned min_block = MIN(s->pending_buf_size - 5, s->w_size);

  00008	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]
  0000b	57		 push	 edi
  0000c	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0000f	8b 4e 2c	 mov	 ecx, DWORD PTR [esi+44]
  00012	83 c0 fb	 add	 eax, -5			; fffffffbH
  00015	3b c1		 cmp	 eax, ecx
  00017	0f 46 c8	 cmovbe	 ecx, eax

; 1652 : 
; 1653 :     /* Copy as many min_block or larger stored blocks directly to next_out as
; 1654 :      * possible. If flushing, copy the remaining available input to next_out as
; 1655 :      * stored blocks, if there is enough space.
; 1656 :      */
; 1657 :     unsigned len, left, have, last = 0;
; 1658 :     unsigned used = s->strm->avail_in;

  0001a	8b 06		 mov	 eax, DWORD PTR [esi]
  0001c	89 4d f4	 mov	 DWORD PTR tv1088[ebp], ecx
  0001f	33 ff		 xor	 edi, edi
  00021	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00024	89 4d 08	 mov	 DWORD PTR _used$2$[ebp], ecx
  00027	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL4@deflate_st:

; 1659 :     do {
; 1660 :         /* Set len to the maximum size block that we can copy directly with the
; 1661 :          * available input data and output space. Set left to how much of that
; 1662 :          * would be copied from what's left in the window.
; 1663 :          */
; 1664 :         len = MAX_STORED;       /* maximum deflate stored block length */
; 1665 :         have = (s->bi_valid + 42) >> 3;         /* number of header bytes */

  00030	8b 86 bc 16 00
	00		 mov	 eax, DWORD PTR [esi+5820]

; 1666 :         if (s->strm->avail_out < have)          /* need room for header */

  00036	8b 1e		 mov	 ebx, DWORD PTR [esi]
  00038	83 c0 2a	 add	 eax, 42			; 0000002aH
  0003b	c1 f8 03	 sar	 eax, 3
  0003e	c7 45 f8 ff ff
	00 00		 mov	 DWORD PTR _len$2$[ebp], 65535 ; 0000ffffH
  00045	8b 4b 10	 mov	 ecx, DWORD PTR [ebx+16]
  00048	3b c8		 cmp	 ecx, eax
  0004a	0f 82 0b 01 00
	00		 jb	 $LN3@deflate_st

; 1667 :             break;
; 1668 :             /* maximum stored block length that will fit in avail_out: */
; 1669 :         have = s->strm->avail_out - have;
; 1670 :         left = s->strstart - s->block_start;    /* bytes left in window */

  00050	8b 56 6c	 mov	 edx, DWORD PTR [esi+108]

; 1671 :         if (len > (ulg)left + s->strm->avail_in)
; 1672 :             len = left + s->strm->avail_in;     /* limit len to the input */
; 1673 :         if (len > have)

  00053	2b c8		 sub	 ecx, eax
  00055	2b 56 5c	 sub	 edx, DWORD PTR [esi+92]
  00058	8b 45 f8	 mov	 eax, DWORD PTR _len$2$[ebp]
  0005b	89 55 fc	 mov	 DWORD PTR _left$2$[ebp], edx
  0005e	03 53 04	 add	 edx, DWORD PTR [ebx+4]
  00061	81 fa ff ff 00
	00		 cmp	 edx, 65535		; 0000ffffH
  00067	0f 42 c2	 cmovb	 eax, edx
  0006a	3b c1		 cmp	 eax, ecx
  0006c	8b d8		 mov	 ebx, eax
  0006e	0f 47 d9	 cmova	 ebx, ecx
  00071	0f 46 c8	 cmovbe	 ecx, eax

; 1674 :             len = have;                         /* limit len to the output */
; 1675 : 
; 1676 :         /* If the stored block would be less than min_block in length, or if
; 1677 :          * unable to copy all of the available input when flushing, then try
; 1678 :          * copying to the window and the pending buffer instead. Also don't
; 1679 :          * write an empty block when flushing -- deflate() does that.
; 1680 :          */
; 1681 :         if (len < min_block && ((len == 0 && flush != Z_FINISH) ||

  00074	8b 45 0c	 mov	 eax, DWORD PTR _flush$[ebp]
  00077	3b 4d f4	 cmp	 ecx, DWORD PTR tv1088[ebp]
  0007a	73 1d		 jae	 SHORT $LN8@deflate_st
  0007c	85 c9		 test	 ecx, ecx
  0007e	75 09		 jne	 SHORT $LN10@deflate_st
  00080	83 f8 04	 cmp	 eax, 4
  00083	0f 85 d2 00 00
	00		 jne	 $LN3@deflate_st
$LN10@deflate_st:
  00089	85 c0		 test	 eax, eax
  0008b	0f 84 ca 00 00
	00		 je	 $LN3@deflate_st
  00091	3b ca		 cmp	 ecx, edx
  00093	0f 85 c2 00 00
	00		 jne	 $LN3@deflate_st
$LN8@deflate_st:

; 1682 :                                 flush == Z_NO_FLUSH ||
; 1683 :                                 len != left + s->strm->avail_in))
; 1684 :             break;
; 1685 : 
; 1686 :         /* Make a dummy stored block in pending to get the header bytes,
; 1687 :          * including any pending bits. This also updates the debugging counts.
; 1688 :          */
; 1689 :         last = flush == Z_FINISH && len == left + s->strm->avail_in ? 1 : 0;

  00099	83 f8 04	 cmp	 eax, 4
  0009c	75 09		 jne	 SHORT $LN33@deflate_st
  0009e	3b ca		 cmp	 ecx, edx
  000a0	75 05		 jne	 SHORT $LN33@deflate_st
  000a2	8d 78 fd	 lea	 edi, DWORD PTR [eax-3]
  000a5	eb 02		 jmp	 SHORT $LN34@deflate_st
$LN33@deflate_st:
  000a7	33 ff		 xor	 edi, edi
$LN34@deflate_st:

; 1690 :         _tr_stored_block(s, (char *)0, 0L, last);

  000a9	57		 push	 edi
  000aa	6a 00		 push	 0
  000ac	33 d2		 xor	 edx, edx
  000ae	8b ce		 mov	 ecx, esi
  000b0	e8 00 00 00 00	 call	 __tr_stored_block

; 1691 : 
; 1692 :         /* Replace the lengths in the dummy stored block with len. */
; 1693 :         s->pending_buf[s->pending - 4] = len;

  000b5	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]

; 1694 :         s->pending_buf[s->pending - 3] = len >> 8;

  000b8	8b d3		 mov	 edx, ebx
  000ba	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  000bd	83 c4 08	 add	 esp, 8
  000c0	c1 ea 08	 shr	 edx, 8
  000c3	88 5c 01 fc	 mov	 BYTE PTR [ecx+eax-4], bl
  000c7	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  000ca	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  000cd	88 54 01 fd	 mov	 BYTE PTR [ecx+eax-3], dl

; 1695 :         s->pending_buf[s->pending - 2] = ~len;

  000d1	8a d3		 mov	 dl, bl
  000d3	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  000d6	f6 d2		 not	 dl
  000d8	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  000db	88 54 01 fe	 mov	 BYTE PTR [ecx+eax-2], dl

; 1696 :         s->pending_buf[s->pending - 1] = ~len >> 8;

  000df	8b d3		 mov	 edx, ebx
  000e1	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  000e4	f7 d2		 not	 edx
  000e6	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  000e9	c1 ea 08	 shr	 edx, 8
  000ec	88 54 01 ff	 mov	 BYTE PTR [ecx+eax-1], dl

; 1697 : 
; 1698 :         /* Write the stored block header bytes. */
; 1699 :         flush_pending(s->strm);

  000f0	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000f2	e8 00 00 00 00	 call	 _flush_pending

; 1700 : 
; 1701 : #ifdef ZLIB_DEBUG
; 1702 :         /* Update debugging counts for the data about to be copied. */
; 1703 :         s->compressed_len += len << 3;
; 1704 :         s->bits_sent += len << 3;
; 1705 : #endif
; 1706 : 
; 1707 :         /* Copy uncompressed bytes from the window to next_out. */
; 1708 :         if (left) {

  000f7	8b 45 fc	 mov	 eax, DWORD PTR _left$2$[ebp]
  000fa	85 c0		 test	 eax, eax
  000fc	74 34		 je	 SHORT $LN11@deflate_st

; 1709 :             if (left > len)

  000fe	3b c3		 cmp	 eax, ebx
  00100	0f 47 c3	 cmova	 eax, ebx

; 1710 :                 left = len;
; 1711 :             zmemcpy(s->strm->next_out, s->window + s->block_start, left);

  00103	50		 push	 eax
  00104	89 45 fc	 mov	 DWORD PTR _left$2$[ebp], eax
  00107	8b 46 38	 mov	 eax, DWORD PTR [esi+56]
  0010a	03 46 5c	 add	 eax, DWORD PTR [esi+92]
  0010d	50		 push	 eax
  0010e	8b 06		 mov	 eax, DWORD PTR [esi]
  00110	ff 70 0c	 push	 DWORD PTR [eax+12]
  00113	e8 00 00 00 00	 call	 _memcpy

; 1712 :             s->strm->next_out += left;

  00118	8b 06		 mov	 eax, DWORD PTR [esi]
  0011a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0011d	8b 55 fc	 mov	 edx, DWORD PTR _left$2$[ebp]
  00120	01 50 0c	 add	 DWORD PTR [eax+12], edx

; 1713 :             s->strm->avail_out -= left;

  00123	8b 06		 mov	 eax, DWORD PTR [esi]
  00125	29 50 10	 sub	 DWORD PTR [eax+16], edx

; 1714 :             s->strm->total_out += left;

  00128	8b 06		 mov	 eax, DWORD PTR [esi]
  0012a	01 50 14	 add	 DWORD PTR [eax+20], edx

; 1715 :             s->block_start += left;

  0012d	01 56 5c	 add	 DWORD PTR [esi+92], edx

; 1716 :             len -= left;

  00130	2b da		 sub	 ebx, edx
$LN11@deflate_st:

; 1717 :         }
; 1718 : 
; 1719 :         /* Copy uncompressed bytes directly from next_in to next_out, updating
; 1720 :          * the check value.
; 1721 :          */
; 1722 :         if (len) {

  00132	85 db		 test	 ebx, ebx
  00134	74 1d		 je	 SHORT $LN2@deflate_st

; 1723 :             read_buf(s->strm, s->strm->next_out, len);

  00136	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00138	53		 push	 ebx
  00139	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  0013c	e8 00 00 00 00	 call	 _read_buf

; 1724 :             s->strm->next_out += len;

  00141	8b 06		 mov	 eax, DWORD PTR [esi]
  00143	83 c4 04	 add	 esp, 4
  00146	01 58 0c	 add	 DWORD PTR [eax+12], ebx

; 1725 :             s->strm->avail_out -= len;

  00149	8b 06		 mov	 eax, DWORD PTR [esi]
  0014b	29 58 10	 sub	 DWORD PTR [eax+16], ebx

; 1726 :             s->strm->total_out += len;

  0014e	8b 06		 mov	 eax, DWORD PTR [esi]
  00150	01 58 14	 add	 DWORD PTR [eax+20], ebx
$LN2@deflate_st:

; 1727 :         }
; 1728 :     } while (last == 0);

  00153	85 ff		 test	 edi, edi
  00155	0f 84 d5 fe ff
	ff		 je	 $LL4@deflate_st
$LN3@deflate_st:

; 1729 : 
; 1730 :     /* Update the sliding window with the last s->w_size bytes of the copied
; 1731 :      * data, or append all of the copied data to the existing window if less
; 1732 :      * than s->w_size bytes were copied. Also update the number of bytes to
; 1733 :      * insert in the hash tables, in the event that deflateParams() switches to
; 1734 :      * a non-zero compression level.
; 1735 :      */
; 1736 :     used -= s->strm->avail_in;      /* number of input bytes directly copied */

  0015b	8b 06		 mov	 eax, DWORD PTR [esi]

; 1758 :         s->insert += MIN(used, s->w_size - s->insert);

  0015d	8b 5d 08	 mov	 ebx, DWORD PTR _used$2$[ebp]
  00160	2b 58 04	 sub	 ebx, DWORD PTR [eax+4]
  00163	89 5d 08	 mov	 DWORD PTR _used$2$[ebp], ebx
  00166	0f 84 9a 00 00
	00		 je	 $LN14@deflate_st

; 1737 :     if (used) {
; 1738 :         /* If any input was used, then no unused input remains in the window,
; 1739 :          * therefore s->block_start == s->strstart.
; 1740 :          */
; 1741 :         if (used >= s->w_size) {    /* supplant the previous history */

  0016c	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  0016f	3b da		 cmp	 ebx, edx
  00171	72 23		 jb	 SHORT $LN15@deflate_st

; 1742 :             s->matches = 2;         /* clear hash */

  00173	c7 86 b0 16 00
	00 02 00 00 00	 mov	 DWORD PTR [esi+5808], 2

; 1743 :             zmemcpy(s->window, s->strm->next_in - s->w_size, s->w_size);

  0017d	8b 00		 mov	 eax, DWORD PTR [eax]
  0017f	52		 push	 edx
  00180	2b c2		 sub	 eax, edx
  00182	50		 push	 eax
  00183	ff 76 38	 push	 DWORD PTR [esi+56]
  00186	e8 00 00 00 00	 call	 _memcpy

; 1744 :             s->strstart = s->w_size;

  0018b	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  0018e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00191	89 46 6c	 mov	 DWORD PTR [esi+108], eax

; 1745 :         }

  00194	eb 52		 jmp	 SHORT $LN16@deflate_st
$LN15@deflate_st:

; 1746 :         else {
; 1747 :             if (s->window_size - s->strstart <= used) {

  00196	8b 46 3c	 mov	 eax, DWORD PTR [esi+60]
  00199	8b 5e 6c	 mov	 ebx, DWORD PTR [esi+108]
  0019c	2b c3		 sub	 eax, ebx
  0019e	3b 45 08	 cmp	 eax, DWORD PTR _used$2$[ebp]
  001a1	77 28		 ja	 SHORT $LN18@deflate_st

; 1748 :                 /* Slide the window down. */
; 1749 :                 s->strstart -= s->w_size;
; 1750 :                 zmemcpy(s->window, s->window + s->w_size, s->strstart);

  001a3	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  001a6	2b da		 sub	 ebx, edx
  001a8	53		 push	 ebx
  001a9	89 5e 6c	 mov	 DWORD PTR [esi+108], ebx
  001ac	8d 04 11	 lea	 eax, DWORD PTR [ecx+edx]
  001af	50		 push	 eax
  001b0	51		 push	 ecx
  001b1	e8 00 00 00 00	 call	 _memcpy

; 1751 :                 if (s->matches < 2)

  001b6	8b 86 b0 16 00
	00		 mov	 eax, DWORD PTR [esi+5808]
  001bc	83 c4 0c	 add	 esp, 12			; 0000000cH
  001bf	83 f8 02	 cmp	 eax, 2
  001c2	73 07		 jae	 SHORT $LN18@deflate_st

; 1752 :                     s->matches++;   /* add a pending slide_hash() */

  001c4	40		 inc	 eax
  001c5	89 86 b0 16 00
	00		 mov	 DWORD PTR [esi+5808], eax
$LN18@deflate_st:

; 1753 :             }
; 1754 :             zmemcpy(s->window + s->strstart, s->strm->next_in - used, used);

  001cb	8b 06		 mov	 eax, DWORD PTR [esi]
  001cd	8b 5d 08	 mov	 ebx, DWORD PTR _used$2$[ebp]
  001d0	53		 push	 ebx
  001d1	8b 00		 mov	 eax, DWORD PTR [eax]
  001d3	2b c3		 sub	 eax, ebx
  001d5	50		 push	 eax
  001d6	8b 46 38	 mov	 eax, DWORD PTR [esi+56]
  001d9	03 46 6c	 add	 eax, DWORD PTR [esi+108]
  001dc	50		 push	 eax
  001dd	e8 00 00 00 00	 call	 _memcpy
  001e2	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1755 :             s->strstart += used;

  001e5	01 5e 6c	 add	 DWORD PTR [esi+108], ebx
$LN16@deflate_st:

; 1756 :         }
; 1757 :         s->block_start = s->strstart;

  001e8	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]

; 1758 :         s->insert += MIN(used, s->w_size - s->insert);

  001eb	8b 4e 2c	 mov	 ecx, DWORD PTR [esi+44]
  001ee	89 46 5c	 mov	 DWORD PTR [esi+92], eax
  001f1	8b 86 b4 16 00
	00		 mov	 eax, DWORD PTR [esi+5812]
  001f7	2b c8		 sub	 ecx, eax
  001f9	3b d9		 cmp	 ebx, ecx
  001fb	0f 46 cb	 cmovbe	 ecx, ebx
  001fe	03 c8		 add	 ecx, eax
  00200	89 8e b4 16 00
	00		 mov	 DWORD PTR [esi+5812], ecx
$LN14@deflate_st:

; 1759 :     }
; 1760 :     if (s->high_water < s->strstart)

  00206	8b 56 6c	 mov	 edx, DWORD PTR [esi+108]
  00209	39 96 c0 16 00
	00		 cmp	 DWORD PTR [esi+5824], edx
  0020f	73 06		 jae	 SHORT $LN19@deflate_st

; 1761 :         s->high_water = s->strstart;

  00211	89 96 c0 16 00
	00		 mov	 DWORD PTR [esi+5824], edx
$LN19@deflate_st:

; 1762 : 
; 1763 :     /* If the last block was written to next_out, then done. */
; 1764 :     if (last)

  00217	85 ff		 test	 edi, edi
  00219	74 0c		 je	 SHORT $LN20@deflate_st

; 1815 : }

  0021b	5f		 pop	 edi
  0021c	5e		 pop	 esi
  0021d	b8 03 00 00 00	 mov	 eax, 3
  00222	5b		 pop	 ebx
  00223	8b e5		 mov	 esp, ebp
  00225	5d		 pop	 ebp
  00226	c3		 ret	 0
$LN20@deflate_st:

; 1765 :         return finish_done;
; 1766 : 
; 1767 :     /* If flushing and all input has been consumed, then done. */
; 1768 :     if (flush != Z_NO_FLUSH && flush != Z_FINISH &&
; 1769 :         s->strm->avail_in == 0 && (long)s->strstart == s->block_start)

  00227	8b 5d 0c	 mov	 ebx, DWORD PTR _flush$[ebp]
  0022a	85 db		 test	 ebx, ebx
  0022c	74 21		 je	 SHORT $LN21@deflate_st
  0022e	83 fb 04	 cmp	 ebx, 4
  00231	74 1c		 je	 SHORT $LN21@deflate_st
  00233	8b 06		 mov	 eax, DWORD PTR [esi]
  00235	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00239	75 14		 jne	 SHORT $LN21@deflate_st
  0023b	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  0023e	3b 46 5c	 cmp	 eax, DWORD PTR [esi+92]
  00241	75 0c		 jne	 SHORT $LN21@deflate_st

; 1815 : }

  00243	5f		 pop	 edi
  00244	5e		 pop	 esi
  00245	b8 01 00 00 00	 mov	 eax, 1
  0024a	5b		 pop	 ebx
  0024b	8b e5		 mov	 esp, ebp
  0024d	5d		 pop	 ebp
  0024e	c3		 ret	 0
$LN21@deflate_st:

; 1770 :         return block_done;
; 1771 : 
; 1772 :     /* Fill the window with any remaining input. */
; 1773 :     have = s->window_size - s->strstart - 1;

  0024f	8b 4e 3c	 mov	 ecx, DWORD PTR [esi+60]

; 1774 :     if (s->strm->avail_in > have && s->block_start >= (long)s->w_size) {

  00252	8b 06		 mov	 eax, DWORD PTR [esi]
  00254	2b ca		 sub	 ecx, edx
  00256	49		 dec	 ecx
  00257	89 4d f4	 mov	 DWORD PTR _have$3$[ebp], ecx
  0025a	39 48 04	 cmp	 DWORD PTR [eax+4], ecx
  0025d	76 43		 jbe	 SHORT $LN22@deflate_st
  0025f	8b 46 5c	 mov	 eax, DWORD PTR [esi+92]
  00262	89 45 08	 mov	 DWORD PTR tv1011[ebp], eax
  00265	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  00268	39 45 08	 cmp	 DWORD PTR tv1011[ebp], eax
  0026b	7c 35		 jl	 SHORT $LN22@deflate_st

; 1775 :         /* Slide the window down. */
; 1776 :         s->block_start -= s->w_size;

  0026d	8b 4d 08	 mov	 ecx, DWORD PTR tv1011[ebp]

; 1777 :         s->strstart -= s->w_size;

  00270	2b d0		 sub	 edx, eax
  00272	2b c8		 sub	 ecx, eax
  00274	89 56 6c	 mov	 DWORD PTR [esi+108], edx
  00277	89 4e 5c	 mov	 DWORD PTR [esi+92], ecx

; 1778 :         zmemcpy(s->window, s->window + s->w_size, s->strstart);

  0027a	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  0027d	03 c1		 add	 eax, ecx
  0027f	52		 push	 edx
  00280	50		 push	 eax
  00281	51		 push	 ecx
  00282	e8 00 00 00 00	 call	 _memcpy

; 1779 :         if (s->matches < 2)

  00287	8b 86 b0 16 00
	00		 mov	 eax, DWORD PTR [esi+5808]
  0028d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00290	83 f8 02	 cmp	 eax, 2
  00293	73 07		 jae	 SHORT $LN23@deflate_st

; 1780 :             s->matches++;           /* add a pending slide_hash() */

  00295	40		 inc	 eax
  00296	89 86 b0 16 00
	00		 mov	 DWORD PTR [esi+5808], eax
$LN23@deflate_st:

; 1781 :         have += s->w_size;          /* more space now */

  0029c	8b 4d f4	 mov	 ecx, DWORD PTR _have$3$[ebp]
  0029f	03 4e 2c	 add	 ecx, DWORD PTR [esi+44]
$LN22@deflate_st:

; 1782 :     }
; 1783 :     if (have > s->strm->avail_in)

  002a2	8b 06		 mov	 eax, DWORD PTR [esi]
  002a4	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  002a7	3b c8		 cmp	 ecx, eax
  002a9	0f 46 c1	 cmovbe	 eax, ecx
  002ac	89 45 08	 mov	 DWORD PTR tv1086[ebp], eax

; 1784 :         have = s->strm->avail_in;
; 1785 :     if (have) {

  002af	85 c0		 test	 eax, eax
  002b1	74 17		 je	 SHORT $LN25@deflate_st

; 1786 :         read_buf(s->strm, s->window + s->strstart, have);

  002b3	8b 56 38	 mov	 edx, DWORD PTR [esi+56]
  002b6	03 56 6c	 add	 edx, DWORD PTR [esi+108]
  002b9	8b 0e		 mov	 ecx, DWORD PTR [esi]
  002bb	50		 push	 eax
  002bc	e8 00 00 00 00	 call	 _read_buf

; 1787 :         s->strstart += have;

  002c1	8b 45 08	 mov	 eax, DWORD PTR tv1086[ebp]
  002c4	83 c4 04	 add	 esp, 4
  002c7	01 46 6c	 add	 DWORD PTR [esi+108], eax
$LN25@deflate_st:

; 1788 :     }
; 1789 :     if (s->high_water < s->strstart)

  002ca	8b 56 6c	 mov	 edx, DWORD PTR [esi+108]
  002cd	39 96 c0 16 00
	00		 cmp	 DWORD PTR [esi+5824], edx
  002d3	73 06		 jae	 SHORT $LN26@deflate_st

; 1790 :         s->high_water = s->strstart;

  002d5	89 96 c0 16 00
	00		 mov	 DWORD PTR [esi+5824], edx
$LN26@deflate_st:

; 1791 : 
; 1792 :     /* There was not enough avail_out to write a complete worthy or flushed
; 1793 :      * stored block to next_out. Write a stored block to pending instead, if we
; 1794 :      * have enough input for a worthy block, or if flushing and there is enough
; 1795 :      * room for the remaining input as a stored block in the pending buffer.
; 1796 :      */
; 1797 :     have = (s->bi_valid + 42) >> 3;         /* number of header bytes */

  002db	8b 86 bc 16 00
	00		 mov	 eax, DWORD PTR [esi+5820]

; 1798 :         /* maximum stored block length that will fit in pending: */
; 1799 :     have = MIN(s->pending_buf_size - have, MAX_STORED);

  002e1	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  002e4	83 c0 2a	 add	 eax, 42			; 0000002aH
  002e7	c1 f8 03	 sar	 eax, 3
  002ea	2b c8		 sub	 ecx, eax
  002ec	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH
  002f1	3b c8		 cmp	 ecx, eax
  002f3	0f 47 c8	 cmova	 ecx, eax

; 1800 :     min_block = MIN(have, s->w_size);

  002f6	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  002f9	3b c8		 cmp	 ecx, eax
  002fb	89 4d 08	 mov	 DWORD PTR _have$4$[ebp], ecx
  002fe	0f 47 c8	 cmova	 ecx, eax

; 1801 :     left = s->strstart - s->block_start;

  00301	2b 56 5c	 sub	 edx, DWORD PTR [esi+92]

; 1802 :     if (left >= min_block ||

  00304	3b d1		 cmp	 edx, ecx
  00306	73 1e		 jae	 SHORT $LN49@deflate_st
  00308	85 d2		 test	 edx, edx
  0030a	75 05		 jne	 SHORT $LN29@deflate_st
  0030c	83 fb 04	 cmp	 ebx, 4
  0030f	75 59		 jne	 SHORT $LN27@deflate_st
$LN29@deflate_st:
  00311	85 db		 test	 ebx, ebx
  00313	74 55		 je	 SHORT $LN27@deflate_st
  00315	8b 06		 mov	 eax, DWORD PTR [esi]
  00317	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  0031b	75 4d		 jne	 SHORT $LN27@deflate_st
  0031d	8b 45 08	 mov	 eax, DWORD PTR _have$4$[ebp]
  00320	3b d0		 cmp	 edx, eax
  00322	77 46		 ja	 SHORT $LN27@deflate_st
  00324	eb 03		 jmp	 SHORT $LN28@deflate_st
$LN49@deflate_st:
  00326	8b 45 08	 mov	 eax, DWORD PTR _have$4$[ebp]
$LN28@deflate_st:

; 1803 :         ((left || flush == Z_FINISH) && flush != Z_NO_FLUSH &&
; 1804 :          s->strm->avail_in == 0 && left <= have)) {
; 1805 :         len = MIN(left, have);

  00329	3b d0		 cmp	 edx, eax
  0032b	8b ca		 mov	 ecx, edx
  0032d	0f 47 c8	 cmova	 ecx, eax
  00330	89 4d 08	 mov	 DWORD PTR _len$4$[ebp], ecx

; 1806 :         last = flush == Z_FINISH && s->strm->avail_in == 0 &&

  00333	83 fb 04	 cmp	 ebx, 4
  00336	75 11		 jne	 SHORT $LN41@deflate_st
  00338	8b 06		 mov	 eax, DWORD PTR [esi]
  0033a	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  0033e	75 09		 jne	 SHORT $LN41@deflate_st
  00340	3b ca		 cmp	 ecx, edx
  00342	75 05		 jne	 SHORT $LN41@deflate_st
  00344	8d 7b fd	 lea	 edi, DWORD PTR [ebx-3]
  00347	eb 02		 jmp	 SHORT $LN42@deflate_st
$LN41@deflate_st:
  00349	33 ff		 xor	 edi, edi
$LN42@deflate_st:

; 1807 :                len == left ? 1 : 0;
; 1808 :         _tr_stored_block(s, (charf *)s->window + s->block_start, len, last);

  0034b	8b 56 38	 mov	 edx, DWORD PTR [esi+56]
  0034e	03 56 5c	 add	 edx, DWORD PTR [esi+92]
  00351	57		 push	 edi
  00352	51		 push	 ecx
  00353	8b ce		 mov	 ecx, esi
  00355	e8 00 00 00 00	 call	 __tr_stored_block

; 1809 :         s->block_start += len;

  0035a	8b 45 08	 mov	 eax, DWORD PTR _len$4$[ebp]
  0035d	83 c4 08	 add	 esp, 8

; 1810 :         flush_pending(s->strm);

  00360	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00362	01 46 5c	 add	 DWORD PTR [esi+92], eax
  00365	e8 00 00 00 00	 call	 _flush_pending
$LN27@deflate_st:

; 1811 :     }
; 1812 : 
; 1813 :     /* We've done all we can with the available input and output. */
; 1814 :     return last ? finish_started : need_more;

  0036a	f7 df		 neg	 edi
  0036c	1b ff		 sbb	 edi, edi
  0036e	83 e7 02	 and	 edi, 2
  00371	8b c7		 mov	 eax, edi

; 1815 : }

  00373	5f		 pop	 edi
  00374	5e		 pop	 esi
  00375	5b		 pop	 ebx
  00376	8b e5		 mov	 esp, ebp
  00378	5d		 pop	 ebp
  00379	c3		 ret	 0
_deflate_stored ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\theclashingfritz\source\repos\inifileparser\zlib\deflate.c
;	COMDAT _deflate_fast
_TEXT	SEGMENT
_s$ = 8							; size = 4
_flush$ = 12						; size = 4
_deflate_fast PROC					; COMDAT

; 1827 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	8b 5d 0c	 mov	 ebx, DWORD PTR _flush$[ebp]
  00007	56		 push	 esi
  00008	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]
  0000b	57		 push	 edi
  0000c	0f 1f 40 00	 npad	 4
$LL2@deflate_fa:

; 1828 :     IPos hash_head;       /* head of the hash chain */
; 1829 :     int bflush;           /* set if current block must be flushed */
; 1830 : 
; 1831 :     for (;;) {
; 1832 :         /* Make sure that we always have enough lookahead, except
; 1833 :          * at the end of the input file. We need MAX_MATCH bytes
; 1834 :          * for the next match, plus MIN_MATCH bytes to insert the
; 1835 :          * string following the next match.
; 1836 :          */
; 1837 :         if (s->lookahead < MIN_LOOKAHEAD) {

  00010	8b 46 74	 mov	 eax, DWORD PTR [esi+116]
  00013	3d 06 01 00 00	 cmp	 eax, 262		; 00000106H
  00018	73 21		 jae	 SHORT $LN10@deflate_fa

; 1838 :             fill_window(s);

  0001a	8b ce		 mov	 ecx, esi
  0001c	e8 00 00 00 00	 call	 _fill_window

; 1839 :             if (s->lookahead < MIN_LOOKAHEAD && flush == Z_NO_FLUSH) {

  00021	8b 46 74	 mov	 eax, DWORD PTR [esi+116]
  00024	3d 06 01 00 00	 cmp	 eax, 262		; 00000106H
  00029	73 08		 jae	 SHORT $LN9@deflate_fa
  0002b	85 db		 test	 ebx, ebx
  0002d	0f 84 2b 02 00
	00		 je	 $LN39@deflate_fa
$LN9@deflate_fa:

; 1840 :                 return need_more;
; 1841 :             }
; 1842 :             if (s->lookahead == 0) break; /* flush the current block */

  00033	85 c0		 test	 eax, eax
  00035	0f 84 2a 02 00
	00		 je	 $LN38@deflate_fa
$LN10@deflate_fa:

; 1843 :         }
; 1844 : 
; 1845 :         /* Insert the string window[strstart .. strstart+2] in the
; 1846 :          * dictionary, and set hash_head to the head of the hash chain:
; 1847 :          */
; 1848 :         hash_head = NIL;
; 1849 :         if (s->lookahead >= MIN_MATCH) {

  0003b	83 f8 03	 cmp	 eax, 3
  0003e	72 69		 jb	 SHORT $LN12@deflate_fa

; 1850 :             INSERT_STRING(s, s->strstart, hash_head);

  00040	8b 7e 6c	 mov	 edi, DWORD PTR [esi+108]
  00043	8b 46 38	 mov	 eax, DWORD PTR [esi+56]
  00046	8b 56 48	 mov	 edx, DWORD PTR [esi+72]
  00049	8b 4e 58	 mov	 ecx, DWORD PTR [esi+88]
  0004c	d3 e2		 shl	 edx, cl
  0004e	0f b6 44 38 02	 movzx	 eax, BYTE PTR [eax+edi+2]
  00053	23 7e 34	 and	 edi, DWORD PTR [esi+52]
  00056	33 d0		 xor	 edx, eax
  00058	23 56 54	 and	 edx, DWORD PTR [esi+84]
  0005b	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
  0005e	8b 4e 40	 mov	 ecx, DWORD PTR [esi+64]
  00061	89 56 48	 mov	 DWORD PTR [esi+72], edx
  00064	0f b7 04 50	 movzx	 eax, WORD PTR [eax+edx*2]
  00068	66 89 04 79	 mov	 WORD PTR [ecx+edi*2], ax
  0006c	8b 4e 6c	 mov	 ecx, DWORD PTR [esi+108]
  0006f	23 4e 34	 and	 ecx, DWORD PTR [esi+52]
  00072	8b 46 40	 mov	 eax, DWORD PTR [esi+64]
  00075	8b 56 48	 mov	 edx, DWORD PTR [esi+72]
  00078	0f b7 3c 48	 movzx	 edi, WORD PTR [eax+ecx*2]
  0007c	8b 4e 44	 mov	 ecx, DWORD PTR [esi+68]
  0007f	0f b7 46 6c	 movzx	 eax, WORD PTR [esi+108]
  00083	66 89 04 51	 mov	 WORD PTR [ecx+edx*2], ax

; 1851 :         }
; 1852 : 
; 1853 :         /* Find the longest match, discarding those <= prev_length.
; 1854 :          * At this point we have always match_length < MIN_MATCH
; 1855 :          */
; 1856 :         if (hash_head != NIL && s->strstart - hash_head <= MAX_DIST(s)) {

  00087	85 ff		 test	 edi, edi
  00089	74 1e		 je	 SHORT $LN12@deflate_fa
  0008b	8b 4e 2c	 mov	 ecx, DWORD PTR [esi+44]
  0008e	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  00091	81 e9 06 01 00
	00		 sub	 ecx, 262		; 00000106H
  00097	2b c7		 sub	 eax, edi
  00099	3b c1		 cmp	 eax, ecx
  0009b	77 0c		 ja	 SHORT $LN12@deflate_fa

; 1857 :             /* To simplify the code, we prevent matches with the string
; 1858 :              * of window index 0 (in particular we have to avoid a match
; 1859 :              * of the string with itself at the start of the input file).
; 1860 :              */
; 1861 :             s->match_length = longest_match (s, hash_head);

  0009d	8b d7		 mov	 edx, edi
  0009f	8b ce		 mov	 ecx, esi
  000a1	e8 00 00 00 00	 call	 _longest_match
  000a6	89 46 60	 mov	 DWORD PTR [esi+96], eax
$LN12@deflate_fa:

; 1862 :             /* longest_match() sets match_start */
; 1863 :         }
; 1864 :         if (s->match_length >= MIN_MATCH) {

  000a9	83 7e 60 03	 cmp	 DWORD PTR [esi+96], 3
  000ad	0f 82 12 01 00
	00		 jb	 $LN13@deflate_fa

; 1865 :             check_match(s, s->strstart, s->match_start, s->match_length);
; 1866 : 
; 1867 :             _tr_tally_dist(s, s->strstart - s->match_start,

  000b3	66 8b 46 6c	 mov	 ax, WORD PTR [esi+108]
  000b7	66 2b 46 70	 sub	 ax, WORD PTR [esi+112]
  000bb	8b 8e a0 16 00
	00		 mov	 ecx, DWORD PTR [esi+5792]
  000c1	8a 56 60	 mov	 dl, BYTE PTR [esi+96]
  000c4	0f b7 f8	 movzx	 edi, ax
  000c7	80 ea 03	 sub	 dl, 3
  000ca	8b 86 a4 16 00
	00		 mov	 eax, DWORD PTR [esi+5796]
  000d0	66 89 3c 48	 mov	 WORD PTR [eax+ecx*2], di
  000d4	81 c7 ff ff 00
	00		 add	 edi, 65535		; 0000ffffH
  000da	8b 86 a0 16 00
	00		 mov	 eax, DWORD PTR [esi+5792]
  000e0	8b 8e 98 16 00
	00		 mov	 ecx, DWORD PTR [esi+5784]
  000e6	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  000e9	ff 86 a0 16 00
	00		 inc	 DWORD PTR [esi+5792]
  000ef	0f b6 c2	 movzx	 eax, dl
  000f2	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR __length_code[eax]
  000f9	66 ff 84 86 98
	04 00 00	 inc	 WORD PTR [esi+eax*4+1176]
  00101	b8 00 01 00 00	 mov	 eax, 256		; 00000100H
  00106	66 3b f8	 cmp	 di, ax
  00109	0f b7 c7	 movzx	 eax, di
  0010c	73 08		 jae	 SHORT $LN24@deflate_fa
  0010e	8a 80 00 00 00
	00		 mov	 al, BYTE PTR __dist_code[eax]
  00114	eb 09		 jmp	 SHORT $LN25@deflate_fa
$LN24@deflate_fa:
  00116	c1 e8 07	 shr	 eax, 7
  00119	8a 80 00 01 00
	00		 mov	 al, BYTE PTR __dist_code[eax+256]
$LN25@deflate_fa:
  0011f	0f b6 c0	 movzx	 eax, al
  00122	33 db		 xor	 ebx, ebx
  00124	66 ff 84 86 88
	09 00 00	 inc	 WORD PTR [esi+eax*4+2440]
  0012c	8b 86 9c 16 00
	00		 mov	 eax, DWORD PTR [esi+5788]
  00132	48		 dec	 eax
  00133	39 86 a0 16 00
	00		 cmp	 DWORD PTR [esi+5792], eax

; 1868 :                            s->match_length - MIN_MATCH, bflush);
; 1869 : 
; 1870 :             s->lookahead -= s->match_length;

  00139	8b 46 60	 mov	 eax, DWORD PTR [esi+96]
  0013c	0f 94 c3	 sete	 bl
  0013f	29 46 74	 sub	 DWORD PTR [esi+116], eax

; 1871 : 
; 1872 :             /* Insert new strings in the hash table only if the match length
; 1873 :              * is not too large. This saves time but degrades compression.
; 1874 :              */
; 1875 : #ifndef FASTEST
; 1876 :             if (s->match_length <= s->max_insert_length &&

  00142	3b 86 80 00 00
	00		 cmp	 eax, DWORD PTR [esi+128]
  00148	77 52		 ja	 SHORT $LN15@deflate_fa
  0014a	83 7e 74 03	 cmp	 DWORD PTR [esi+116], 3
  0014e	72 4c		 jb	 SHORT $LN15@deflate_fa

; 1877 :                 s->lookahead >= MIN_MATCH) {
; 1878 :                 s->match_length--; /* string at strstart already in table */

  00150	48		 dec	 eax
  00151	89 46 60	 mov	 DWORD PTR [esi+96], eax
$LL7@deflate_fa:

; 1879 :                 do {
; 1880 :                     s->strstart++;

  00154	ff 46 6c	 inc	 DWORD PTR [esi+108]
  00157	8b 7e 6c	 mov	 edi, DWORD PTR [esi+108]

; 1881 :                     INSERT_STRING(s, s->strstart, hash_head);

  0015a	8b 46 38	 mov	 eax, DWORD PTR [esi+56]
  0015d	8b 4e 58	 mov	 ecx, DWORD PTR [esi+88]
  00160	0f b6 54 07 02	 movzx	 edx, BYTE PTR [edi+eax+2]
  00165	8b 46 48	 mov	 eax, DWORD PTR [esi+72]
  00168	23 7e 34	 and	 edi, DWORD PTR [esi+52]
  0016b	d3 e0		 shl	 eax, cl
  0016d	8b 4e 40	 mov	 ecx, DWORD PTR [esi+64]
  00170	33 d0		 xor	 edx, eax
  00172	23 56 54	 and	 edx, DWORD PTR [esi+84]
  00175	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
  00178	89 56 48	 mov	 DWORD PTR [esi+72], edx
  0017b	0f b7 04 50	 movzx	 eax, WORD PTR [eax+edx*2]
  0017f	66 89 04 79	 mov	 WORD PTR [ecx+edi*2], ax
  00183	8b 56 48	 mov	 edx, DWORD PTR [esi+72]
  00186	8b 4e 44	 mov	 ecx, DWORD PTR [esi+68]
  00189	0f b7 46 6c	 movzx	 eax, WORD PTR [esi+108]
  0018d	66 89 04 51	 mov	 WORD PTR [ecx+edx*2], ax

; 1882 :                     /* strstart never exceeds WSIZE-MAX_MATCH, so there are
; 1883 :                      * always MIN_MATCH bytes ahead.
; 1884 :                      */
; 1885 :                 } while (--s->match_length != 0);

  00191	83 46 60 ff	 add	 DWORD PTR [esi+96], -1
  00195	75 bd		 jne	 SHORT $LL7@deflate_fa

; 1886 :                 s->strstart++;
; 1887 :             } else

  00197	e9 79 00 00 00	 jmp	 $LN44@deflate_fa
$LN15@deflate_fa:

; 1888 : #endif
; 1889 :             {
; 1890 :                 s->strstart += s->match_length;

  0019c	01 46 6c	 add	 DWORD PTR [esi+108], eax

; 1891 :                 s->match_length = 0;
; 1892 :                 s->ins_h = s->window[s->strstart];

  0019f	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  001a2	03 46 38	 add	 eax, DWORD PTR [esi+56]

; 1893 :                 UPDATE_HASH(s, s->ins_h, s->window[s->strstart+1]);

  001a5	8b 4e 58	 mov	 ecx, DWORD PTR [esi+88]
  001a8	c7 46 60 00 00
	00 00		 mov	 DWORD PTR [esi+96], 0
  001af	0f b6 10	 movzx	 edx, BYTE PTR [eax]
  001b2	89 56 48	 mov	 DWORD PTR [esi+72], edx
  001b5	0f b6 40 01	 movzx	 eax, BYTE PTR [eax+1]
  001b9	d3 e2		 shl	 edx, cl
  001bb	33 d0		 xor	 edx, eax
  001bd	23 56 54	 and	 edx, DWORD PTR [esi+84]
  001c0	89 56 48	 mov	 DWORD PTR [esi+72], edx

; 1894 : #if MIN_MATCH != 3
; 1895 :                 Call UPDATE_HASH() MIN_MATCH-3 more times
; 1896 : #endif
; 1897 :                 /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not
; 1898 :                  * matter since it will be recomputed at next deflate call.
; 1899 :                  */
; 1900 :             }
; 1901 :         } else {

  001c3	eb 53		 jmp	 SHORT $LN14@deflate_fa
$LN13@deflate_fa:

; 1902 :             /* No match, output a literal byte */
; 1903 :             Tracevv((stderr,"%c", s->window[s->strstart]));
; 1904 :             _tr_tally_lit (s, s->window[s->strstart], bflush);

  001c5	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  001c8	33 ff		 xor	 edi, edi
  001ca	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  001cd	33 db		 xor	 ebx, ebx
  001cf	8a 14 01	 mov	 dl, BYTE PTR [ecx+eax]
  001d2	8b 8e a0 16 00
	00		 mov	 ecx, DWORD PTR [esi+5792]
  001d8	8b 86 a4 16 00
	00		 mov	 eax, DWORD PTR [esi+5796]
  001de	66 89 3c 48	 mov	 WORD PTR [eax+ecx*2], di
  001e2	8b 86 a0 16 00
	00		 mov	 eax, DWORD PTR [esi+5792]
  001e8	8b 8e 98 16 00
	00		 mov	 ecx, DWORD PTR [esi+5784]
  001ee	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  001f1	ff 86 a0 16 00
	00		 inc	 DWORD PTR [esi+5792]
  001f7	0f b6 c2	 movzx	 eax, dl
  001fa	66 ff 84 86 94
	00 00 00	 inc	 WORD PTR [esi+eax*4+148]
  00202	8b 86 9c 16 00
	00		 mov	 eax, DWORD PTR [esi+5788]
  00208	48		 dec	 eax
  00209	39 86 a0 16 00
	00		 cmp	 DWORD PTR [esi+5792], eax
  0020f	0f 94 c3	 sete	 bl

; 1905 :             s->lookahead--;

  00212	ff 4e 74	 dec	 DWORD PTR [esi+116]
$LN44@deflate_fa:

; 1906 :             s->strstart++;

  00215	ff 46 6c	 inc	 DWORD PTR [esi+108]
$LN14@deflate_fa:

; 1907 :         }
; 1908 :         if (bflush) FLUSH_BLOCK(s, 0);

  00218	85 db		 test	 ebx, ebx
  0021a	8b 5d 0c	 mov	 ebx, DWORD PTR _flush$[ebp]
  0021d	0f 84 ed fd ff
	ff		 je	 $LL2@deflate_fa
  00223	8b 4e 5c	 mov	 ecx, DWORD PTR [esi+92]
  00226	85 c9		 test	 ecx, ecx
  00228	78 07		 js	 SHORT $LN26@deflate_fa
  0022a	8b 56 38	 mov	 edx, DWORD PTR [esi+56]
  0022d	03 d1		 add	 edx, ecx
  0022f	eb 02		 jmp	 SHORT $LN27@deflate_fa
$LN26@deflate_fa:
  00231	33 d2		 xor	 edx, edx
$LN27@deflate_fa:
  00233	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  00236	2b c1		 sub	 eax, ecx
  00238	8b ce		 mov	 ecx, esi
  0023a	6a 00		 push	 0
  0023c	50		 push	 eax
  0023d	e8 00 00 00 00	 call	 __tr_flush_block
  00242	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  00245	83 c4 08	 add	 esp, 8
  00248	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0024a	89 46 5c	 mov	 DWORD PTR [esi+92], eax
  0024d	e8 00 00 00 00	 call	 _flush_pending
  00252	8b 06		 mov	 eax, DWORD PTR [esi]
  00254	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  00258	0f 85 b2 fd ff
	ff		 jne	 $LL2@deflate_fa
$LN39@deflate_fa:

; 1917 :     return block_done;
; 1918 : }

  0025e	5f		 pop	 edi
  0025f	5e		 pop	 esi
  00260	33 c0		 xor	 eax, eax
  00262	5b		 pop	 ebx
  00263	5d		 pop	 ebp
  00264	c3		 ret	 0
$LN38@deflate_fa:

; 1909 :     }
; 1910 :     s->insert = s->strstart < MIN_MATCH-1 ? s->strstart : MIN_MATCH-1;

  00265	8b 4e 6c	 mov	 ecx, DWORD PTR [esi+108]
  00268	b8 02 00 00 00	 mov	 eax, 2
  0026d	3b c8		 cmp	 ecx, eax
  0026f	0f 42 c1	 cmovb	 eax, ecx
  00272	89 86 b4 16 00
	00		 mov	 DWORD PTR [esi+5812], eax

; 1911 :     if (flush == Z_FINISH) {

  00278	83 fb 04	 cmp	 ebx, 4
  0027b	75 3e		 jne	 SHORT $LN19@deflate_fa

; 1912 :         FLUSH_BLOCK(s, 1);

  0027d	8b 46 5c	 mov	 eax, DWORD PTR [esi+92]
  00280	85 c0		 test	 eax, eax
  00282	78 07		 js	 SHORT $LN30@deflate_fa
  00284	8b 56 38	 mov	 edx, DWORD PTR [esi+56]
  00287	03 d0		 add	 edx, eax
  00289	eb 02		 jmp	 SHORT $LN31@deflate_fa
$LN30@deflate_fa:
  0028b	33 d2		 xor	 edx, edx
$LN31@deflate_fa:
  0028d	2b c8		 sub	 ecx, eax
  0028f	6a 01		 push	 1
  00291	51		 push	 ecx
  00292	8b ce		 mov	 ecx, esi
  00294	e8 00 00 00 00	 call	 __tr_flush_block
  00299	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  0029c	83 c4 08	 add	 esp, 8
  0029f	8b 0e		 mov	 ecx, DWORD PTR [esi]
  002a1	89 46 5c	 mov	 DWORD PTR [esi+92], eax
  002a4	e8 00 00 00 00	 call	 _flush_pending
  002a9	8b 0e		 mov	 ecx, DWORD PTR [esi]
  002ab	33 c0		 xor	 eax, eax

; 1917 :     return block_done;
; 1918 : }

  002ad	5f		 pop	 edi
  002ae	5e		 pop	 esi
  002af	5b		 pop	 ebx
  002b0	39 41 10	 cmp	 DWORD PTR [ecx+16], eax
  002b3	0f 95 c0	 setne	 al
  002b6	83 c0 02	 add	 eax, 2
  002b9	5d		 pop	 ebp
  002ba	c3		 ret	 0
$LN19@deflate_fa:

; 1913 :         return finish_done;
; 1914 :     }
; 1915 :     if (s->last_lit)

  002bb	83 be a0 16 00
	00 00		 cmp	 DWORD PTR [esi+5792], 0
  002c2	74 38		 je	 SHORT $LN22@deflate_fa

; 1916 :         FLUSH_BLOCK(s, 0);

  002c4	8b 46 5c	 mov	 eax, DWORD PTR [esi+92]
  002c7	85 c0		 test	 eax, eax
  002c9	78 07		 js	 SHORT $LN32@deflate_fa
  002cb	8b 56 38	 mov	 edx, DWORD PTR [esi+56]
  002ce	03 d0		 add	 edx, eax
  002d0	eb 02		 jmp	 SHORT $LN33@deflate_fa
$LN32@deflate_fa:
  002d2	33 d2		 xor	 edx, edx
$LN33@deflate_fa:
  002d4	2b c8		 sub	 ecx, eax
  002d6	6a 00		 push	 0
  002d8	51		 push	 ecx
  002d9	8b ce		 mov	 ecx, esi
  002db	e8 00 00 00 00	 call	 __tr_flush_block
  002e0	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  002e3	83 c4 08	 add	 esp, 8
  002e6	8b 0e		 mov	 ecx, DWORD PTR [esi]
  002e8	89 46 5c	 mov	 DWORD PTR [esi+92], eax
  002eb	e8 00 00 00 00	 call	 _flush_pending
  002f0	8b 06		 mov	 eax, DWORD PTR [esi]
  002f2	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  002f6	0f 84 62 ff ff
	ff		 je	 $LN39@deflate_fa
$LN22@deflate_fa:

; 1917 :     return block_done;
; 1918 : }

  002fc	5f		 pop	 edi
  002fd	5e		 pop	 esi
  002fe	b8 01 00 00 00	 mov	 eax, 1
  00303	5b		 pop	 ebx
  00304	5d		 pop	 ebp
  00305	c3		 ret	 0
_deflate_fast ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\theclashingfritz\source\repos\inifileparser\zlib\deflate.c
;	COMDAT _deflate_slow
_TEXT	SEGMENT
tv1135 = -8						; size = 4
tv1128 = -4						; size = 4
_max_insert$1$ = 8					; size = 4
_s$ = 8							; size = 4
_flush$ = 12						; size = 4
_deflate_slow PROC					; COMDAT

; 1929 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx
  00007	8b 5d 0c	 mov	 ebx, DWORD PTR _flush$[ebp]
  0000a	56		 push	 esi
  0000b	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]
  0000e	57		 push	 edi
  0000f	90		 npad	 1
$LL2@deflate_sl:

; 1930 :     IPos hash_head;          /* head of hash chain */
; 1931 :     int bflush;              /* set if current block must be flushed */
; 1932 : 
; 1933 :     /* Process the input block. */
; 1934 :     for (;;) {
; 1935 :         /* Make sure that we always have enough lookahead, except
; 1936 :          * at the end of the input file. We need MAX_MATCH bytes
; 1937 :          * for the next match, plus MIN_MATCH bytes to insert the
; 1938 :          * string following the next match.
; 1939 :          */
; 1940 :         if (s->lookahead < MIN_LOOKAHEAD) {

  00010	8b 46 74	 mov	 eax, DWORD PTR [esi+116]
  00013	3d 06 01 00 00	 cmp	 eax, 262		; 00000106H
  00018	73 21		 jae	 SHORT $LN10@deflate_sl

; 1941 :             fill_window(s);

  0001a	8b ce		 mov	 ecx, esi
  0001c	e8 00 00 00 00	 call	 _fill_window

; 1942 :             if (s->lookahead < MIN_LOOKAHEAD && flush == Z_NO_FLUSH) {

  00021	8b 46 74	 mov	 eax, DWORD PTR [esi+116]
  00024	3d 06 01 00 00	 cmp	 eax, 262		; 00000106H
  00029	73 08		 jae	 SHORT $LN9@deflate_sl
  0002b	85 db		 test	 ebx, ebx
  0002d	0f 84 29 02 00
	00		 je	 $LN48@deflate_sl
$LN9@deflate_sl:

; 1943 :                 return need_more;
; 1944 :             }
; 1945 :             if (s->lookahead == 0) break; /* flush the current block */

  00033	85 c0		 test	 eax, eax
  00035	0f 84 da 02 00
	00		 je	 $LN46@deflate_sl
$LN10@deflate_sl:

; 1946 :         }
; 1947 : 
; 1948 :         /* Insert the string window[strstart .. strstart+2] in the
; 1949 :          * dictionary, and set hash_head to the head of the hash chain:
; 1950 :          */
; 1951 :         hash_head = NIL;

  0003b	33 ff		 xor	 edi, edi

; 1952 :         if (s->lookahead >= MIN_MATCH) {

  0003d	83 f8 03	 cmp	 eax, 3
  00040	72 47		 jb	 SHORT $LN11@deflate_sl

; 1953 :             INSERT_STRING(s, s->strstart, hash_head);

  00042	8b 7e 6c	 mov	 edi, DWORD PTR [esi+108]
  00045	8b 46 38	 mov	 eax, DWORD PTR [esi+56]
  00048	8b 56 48	 mov	 edx, DWORD PTR [esi+72]
  0004b	8b 4e 58	 mov	 ecx, DWORD PTR [esi+88]
  0004e	d3 e2		 shl	 edx, cl
  00050	0f b6 44 38 02	 movzx	 eax, BYTE PTR [eax+edi+2]
  00055	23 7e 34	 and	 edi, DWORD PTR [esi+52]
  00058	33 d0		 xor	 edx, eax
  0005a	23 56 54	 and	 edx, DWORD PTR [esi+84]
  0005d	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
  00060	8b 4e 40	 mov	 ecx, DWORD PTR [esi+64]
  00063	89 56 48	 mov	 DWORD PTR [esi+72], edx
  00066	0f b7 04 50	 movzx	 eax, WORD PTR [eax+edx*2]
  0006a	66 89 04 79	 mov	 WORD PTR [ecx+edi*2], ax
  0006e	8b 4e 6c	 mov	 ecx, DWORD PTR [esi+108]
  00071	23 4e 34	 and	 ecx, DWORD PTR [esi+52]
  00074	8b 46 40	 mov	 eax, DWORD PTR [esi+64]
  00077	8b 56 48	 mov	 edx, DWORD PTR [esi+72]
  0007a	0f b7 3c 48	 movzx	 edi, WORD PTR [eax+ecx*2]
  0007e	8b 4e 44	 mov	 ecx, DWORD PTR [esi+68]
  00081	0f b7 46 6c	 movzx	 eax, WORD PTR [esi+108]
  00085	66 89 04 51	 mov	 WORD PTR [ecx+edx*2], ax
$LN11@deflate_sl:

; 1954 :         }
; 1955 : 
; 1956 :         /* Find the longest match, discarding those <= prev_length.
; 1957 :          */
; 1958 :         s->prev_length = s->match_length, s->prev_match = s->match_start;

  00089	8b 46 60	 mov	 eax, DWORD PTR [esi+96]
  0008c	89 46 78	 mov	 DWORD PTR [esi+120], eax
  0008f	8b 46 70	 mov	 eax, DWORD PTR [esi+112]
  00092	89 46 64	 mov	 DWORD PTR [esi+100], eax

; 1959 :         s->match_length = MIN_MATCH-1;

  00095	c7 46 60 02 00
	00 00		 mov	 DWORD PTR [esi+96], 2

; 1960 : 
; 1961 :         if (hash_head != NIL && s->prev_length < s->max_lazy_match &&

  0009c	85 ff		 test	 edi, edi
  0009e	74 50		 je	 SHORT $LN13@deflate_sl
  000a0	8b 46 78	 mov	 eax, DWORD PTR [esi+120]
  000a3	3b 86 80 00 00
	00		 cmp	 eax, DWORD PTR [esi+128]
  000a9	73 45		 jae	 SHORT $LN13@deflate_sl
  000ab	8b 4e 2c	 mov	 ecx, DWORD PTR [esi+44]
  000ae	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  000b1	81 e9 06 01 00
	00		 sub	 ecx, 262		; 00000106H
  000b7	2b c7		 sub	 eax, edi
  000b9	3b c1		 cmp	 eax, ecx
  000bb	77 33		 ja	 SHORT $LN13@deflate_sl

; 1962 :             s->strstart - hash_head <= MAX_DIST(s)) {
; 1963 :             /* To simplify the code, we prevent matches with the string
; 1964 :              * of window index 0 (in particular we have to avoid a match
; 1965 :              * of the string with itself at the start of the input file).
; 1966 :              */
; 1967 :             s->match_length = longest_match (s, hash_head);

  000bd	8b d7		 mov	 edx, edi
  000bf	8b ce		 mov	 ecx, esi
  000c1	e8 00 00 00 00	 call	 _longest_match
  000c6	89 46 60	 mov	 DWORD PTR [esi+96], eax

; 1968 :             /* longest_match() sets match_start */
; 1969 : 
; 1970 :             if (s->match_length <= 5 && (s->strategy == Z_FILTERED

  000c9	83 f8 05	 cmp	 eax, 5
  000cc	77 22		 ja	 SHORT $LN13@deflate_sl
  000ce	83 be 88 00 00
	00 01		 cmp	 DWORD PTR [esi+136], 1
  000d5	74 12		 je	 SHORT $LN14@deflate_sl
  000d7	83 f8 03	 cmp	 eax, 3
  000da	75 14		 jne	 SHORT $LN13@deflate_sl
  000dc	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  000df	2b 46 70	 sub	 eax, DWORD PTR [esi+112]
  000e2	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  000e7	76 07		 jbe	 SHORT $LN13@deflate_sl
$LN14@deflate_sl:

; 1971 : #if TOO_FAR <= 32767
; 1972 :                 || (s->match_length == MIN_MATCH &&
; 1973 :                     s->strstart - s->match_start > TOO_FAR)
; 1974 : #endif
; 1975 :                 )) {
; 1976 : 
; 1977 :                 /* If prev_match is also MIN_MATCH, match_start is garbage
; 1978 :                  * but we will ignore the current match anyway.
; 1979 :                  */
; 1980 :                 s->match_length = MIN_MATCH-1;

  000e9	c7 46 60 02 00
	00 00		 mov	 DWORD PTR [esi+96], 2
$LN13@deflate_sl:

; 1981 :             }
; 1982 :         }
; 1983 :         /* If there was a match at the previous step and the current
; 1984 :          * match is not better, output the previous match:
; 1985 :          */
; 1986 :         if (s->prev_length >= MIN_MATCH && s->match_length <= s->prev_length) {

  000f0	8b 46 78	 mov	 eax, DWORD PTR [esi+120]
  000f3	83 f8 03	 cmp	 eax, 3
  000f6	0f 82 69 01 00
	00		 jb	 $LN15@deflate_sl
  000fc	39 46 60	 cmp	 DWORD PTR [esi+96], eax
  000ff	0f 87 60 01 00
	00		 ja	 $LN15@deflate_sl

; 1987 :             uInt max_insert = s->strstart + s->lookahead - MIN_MATCH;

  00105	8b 4e 74	 mov	 ecx, DWORD PTR [esi+116]
  00108	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  0010b	83 c1 fd	 add	 ecx, -3			; fffffffdH

; 1988 :             /* Do not insert strings in hash table beyond this. */
; 1989 : 
; 1990 :             check_match(s, s->strstart-1, s->prev_match, s->prev_length);
; 1991 : 
; 1992 :             _tr_tally_dist(s, s->strstart -1 - s->prev_match,

  0010e	8a 56 78	 mov	 dl, BYTE PTR [esi+120]
  00111	03 c1		 add	 eax, ecx
  00113	8b 8e a0 16 00
	00		 mov	 ecx, DWORD PTR [esi+5792]
  00119	80 ea 03	 sub	 dl, 3
  0011c	89 45 08	 mov	 DWORD PTR _max_insert$1$[ebp], eax
  0011f	66 8b 46 6c	 mov	 ax, WORD PTR [esi+108]
  00123	66 2b 46 64	 sub	 ax, WORD PTR [esi+100]
  00127	66 48		 dec	 ax
  00129	0f b7 f8	 movzx	 edi, ax
  0012c	8b 86 a4 16 00
	00		 mov	 eax, DWORD PTR [esi+5796]
  00132	66 89 3c 48	 mov	 WORD PTR [eax+ecx*2], di
  00136	81 c7 ff ff 00
	00		 add	 edi, 65535		; 0000ffffH
  0013c	8b 86 a0 16 00
	00		 mov	 eax, DWORD PTR [esi+5792]
  00142	8b 8e 98 16 00
	00		 mov	 ecx, DWORD PTR [esi+5784]
  00148	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  0014b	ff 86 a0 16 00
	00		 inc	 DWORD PTR [esi+5792]
  00151	0f b6 c2	 movzx	 eax, dl
  00154	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR __length_code[eax]
  0015b	66 ff 84 86 98
	04 00 00	 inc	 WORD PTR [esi+eax*4+1176]
  00163	b8 00 01 00 00	 mov	 eax, 256		; 00000100H
  00168	66 3b f8	 cmp	 di, ax
  0016b	0f b7 c7	 movzx	 eax, di
  0016e	73 08		 jae	 SHORT $LN30@deflate_sl
  00170	8a 80 00 00 00
	00		 mov	 al, BYTE PTR __dist_code[eax]
  00176	eb 09		 jmp	 SHORT $LN31@deflate_sl
$LN30@deflate_sl:
  00178	c1 e8 07	 shr	 eax, 7
  0017b	8a 80 00 01 00
	00		 mov	 al, BYTE PTR __dist_code[eax+256]
$LN31@deflate_sl:
  00181	0f b6 c0	 movzx	 eax, al
  00184	66 ff 84 86 88
	09 00 00	 inc	 WORD PTR [esi+eax*4+2440]
  0018c	8b 86 9c 16 00
	00		 mov	 eax, DWORD PTR [esi+5788]

; 1993 :                            s->prev_length - MIN_MATCH, bflush);
; 1994 : 
; 1995 :             /* Insert in hash table all strings up to the end of the match.
; 1996 :              * strstart-1 and strstart are already inserted. If there is not
; 1997 :              * enough lookahead, the last two strings are not inserted in
; 1998 :              * the hash table.
; 1999 :              */
; 2000 :             s->lookahead -= s->prev_length-1;

  00192	8b 4e 78	 mov	 ecx, DWORD PTR [esi+120]
  00195	48		 dec	 eax
  00196	89 45 f8	 mov	 DWORD PTR tv1135[ebp], eax
  00199	8b 86 a0 16 00
	00		 mov	 eax, DWORD PTR [esi+5792]
  0019f	89 45 fc	 mov	 DWORD PTR tv1128[ebp], eax
  001a2	b8 01 00 00 00	 mov	 eax, 1
  001a7	2b c1		 sub	 eax, ecx
  001a9	01 46 74	 add	 DWORD PTR [esi+116], eax

; 2001 :             s->prev_length -= 2;

  001ac	8d 41 fe	 lea	 eax, DWORD PTR [ecx-2]
  001af	89 46 78	 mov	 DWORD PTR [esi+120], eax
  001b2	8b 45 08	 mov	 eax, DWORD PTR _max_insert$1$[ebp]
$LL7@deflate_sl:

; 2002 :             do {
; 2003 :                 if (++s->strstart <= max_insert) {

  001b5	ff 46 6c	 inc	 DWORD PTR [esi+108]
  001b8	8b 5e 6c	 mov	 ebx, DWORD PTR [esi+108]
  001bb	3b d8		 cmp	 ebx, eax
  001bd	77 3c		 ja	 SHORT $LN5@deflate_sl

; 2004 :                     INSERT_STRING(s, s->strstart, hash_head);

  001bf	8b 46 38	 mov	 eax, DWORD PTR [esi+56]
  001c2	8b 7e 48	 mov	 edi, DWORD PTR [esi+72]
  001c5	8b 4e 58	 mov	 ecx, DWORD PTR [esi+88]
  001c8	8b 56 34	 mov	 edx, DWORD PTR [esi+52]
  001cb	0f b6 44 18 02	 movzx	 eax, BYTE PTR [eax+ebx+2]
  001d0	d3 e7		 shl	 edi, cl
  001d2	8b 4e 40	 mov	 ecx, DWORD PTR [esi+64]
  001d5	33 f8		 xor	 edi, eax
  001d7	23 7e 54	 and	 edi, DWORD PTR [esi+84]
  001da	23 d3		 and	 edx, ebx
  001dc	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
  001df	89 7e 48	 mov	 DWORD PTR [esi+72], edi
  001e2	0f b7 04 78	 movzx	 eax, WORD PTR [eax+edi*2]
  001e6	66 89 04 51	 mov	 WORD PTR [ecx+edx*2], ax
  001ea	8b 56 48	 mov	 edx, DWORD PTR [esi+72]
  001ed	8b 4e 44	 mov	 ecx, DWORD PTR [esi+68]
  001f0	0f b7 46 6c	 movzx	 eax, WORD PTR [esi+108]
  001f4	66 89 04 51	 mov	 WORD PTR [ecx+edx*2], ax
  001f8	8b 45 08	 mov	 eax, DWORD PTR _max_insert$1$[ebp]
$LN5@deflate_sl:

; 2005 :                 }
; 2006 :             } while (--s->prev_length != 0);

  001fb	83 46 78 ff	 add	 DWORD PTR [esi+120], -1
  001ff	75 b4		 jne	 SHORT $LL7@deflate_sl

; 2007 :             s->match_available = 0;
; 2008 :             s->match_length = MIN_MATCH-1;
; 2009 :             s->strstart++;

  00201	ff 46 6c	 inc	 DWORD PTR [esi+108]

; 2010 : 
; 2011 :             if (bflush) FLUSH_BLOCK(s, 0);

  00204	8b 45 fc	 mov	 eax, DWORD PTR tv1128[ebp]
  00207	8b 4e 6c	 mov	 ecx, DWORD PTR [esi+108]
  0020a	8b 5d 0c	 mov	 ebx, DWORD PTR _flush$[ebp]
  0020d	c7 46 68 00 00
	00 00		 mov	 DWORD PTR [esi+104], 0
  00214	c7 46 60 02 00
	00 00		 mov	 DWORD PTR [esi+96], 2
  0021b	3b 45 f8	 cmp	 eax, DWORD PTR tv1135[ebp]
  0021e	0f 85 ec fd ff
	ff		 jne	 $LL2@deflate_sl
  00224	8b 46 5c	 mov	 eax, DWORD PTR [esi+92]
  00227	85 c0		 test	 eax, eax
  00229	78 07		 js	 SHORT $LN32@deflate_sl
  0022b	8b 56 38	 mov	 edx, DWORD PTR [esi+56]
  0022e	03 d0		 add	 edx, eax
  00230	eb 02		 jmp	 SHORT $LN33@deflate_sl
$LN32@deflate_sl:
  00232	33 d2		 xor	 edx, edx
$LN33@deflate_sl:
  00234	2b c8		 sub	 ecx, eax
  00236	6a 00		 push	 0
  00238	51		 push	 ecx
  00239	8b ce		 mov	 ecx, esi
  0023b	e8 00 00 00 00	 call	 __tr_flush_block
  00240	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  00243	83 c4 08	 add	 esp, 8
  00246	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00248	89 46 5c	 mov	 DWORD PTR [esi+92], eax
  0024b	e8 00 00 00 00	 call	 _flush_pending
  00250	8b 06		 mov	 eax, DWORD PTR [esi]
  00252	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  00256	0f 85 b4 fd ff
	ff		 jne	 $LL2@deflate_sl
$LN48@deflate_sl:

; 2048 :     return block_done;
; 2049 : }

  0025c	5f		 pop	 edi
  0025d	5e		 pop	 esi
  0025e	33 c0		 xor	 eax, eax
  00260	5b		 pop	 ebx
  00261	8b e5		 mov	 esp, ebp
  00263	5d		 pop	 ebp
  00264	c3		 ret	 0
$LN15@deflate_sl:

; 2012 : 
; 2013 :         } else if (s->match_available) {

  00265	83 7e 68 00	 cmp	 DWORD PTR [esi+104], 0
  00269	0f 84 94 00 00
	00		 je	 $LN20@deflate_sl

; 2014 :             /* If there was no match at the previous position, output a
; 2015 :              * single literal. If there was a match but the current match
; 2016 :              * is longer, truncate the previous match to a single literal.
; 2017 :              */
; 2018 :             Tracevv((stderr,"%c", s->window[s->strstart-1]));
; 2019 :             _tr_tally_lit(s, s->window[s->strstart-1], bflush);

  0026f	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  00272	33 ff		 xor	 edi, edi
  00274	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  00277	8a 54 01 ff	 mov	 dl, BYTE PTR [ecx+eax-1]
  0027b	8b 8e a0 16 00
	00		 mov	 ecx, DWORD PTR [esi+5792]
  00281	8b 86 a4 16 00
	00		 mov	 eax, DWORD PTR [esi+5796]
  00287	66 89 3c 48	 mov	 WORD PTR [eax+ecx*2], di
  0028b	8b 86 a0 16 00
	00		 mov	 eax, DWORD PTR [esi+5792]
  00291	8b 8e 98 16 00
	00		 mov	 ecx, DWORD PTR [esi+5784]
  00297	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  0029a	ff 86 a0 16 00
	00		 inc	 DWORD PTR [esi+5792]
  002a0	0f b6 c2	 movzx	 eax, dl
  002a3	66 ff 84 86 94
	00 00 00	 inc	 WORD PTR [esi+eax*4+148]
  002ab	8b 86 9c 16 00
	00		 mov	 eax, DWORD PTR [esi+5788]
  002b1	48		 dec	 eax
  002b2	39 86 a0 16 00
	00		 cmp	 DWORD PTR [esi+5792], eax

; 2020 :             if (bflush) {

  002b8	75 2f		 jne	 SHORT $LN22@deflate_sl

; 2021 :                 FLUSH_BLOCK_ONLY(s, 0);

  002ba	8b 4e 5c	 mov	 ecx, DWORD PTR [esi+92]
  002bd	85 c9		 test	 ecx, ecx
  002bf	78 07		 js	 SHORT $LN34@deflate_sl
  002c1	8b 56 38	 mov	 edx, DWORD PTR [esi+56]
  002c4	03 d1		 add	 edx, ecx
  002c6	eb 02		 jmp	 SHORT $LN35@deflate_sl
$LN34@deflate_sl:
  002c8	33 d2		 xor	 edx, edx
$LN35@deflate_sl:
  002ca	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  002cd	2b c1		 sub	 eax, ecx
  002cf	8b ce		 mov	 ecx, esi
  002d1	6a 00		 push	 0
  002d3	50		 push	 eax
  002d4	e8 00 00 00 00	 call	 __tr_flush_block
  002d9	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  002dc	83 c4 08	 add	 esp, 8
  002df	8b 0e		 mov	 ecx, DWORD PTR [esi]
  002e1	89 46 5c	 mov	 DWORD PTR [esi+92], eax
  002e4	e8 00 00 00 00	 call	 _flush_pending
$LN22@deflate_sl:

; 2022 :             }
; 2023 :             s->strstart++;
; 2024 :             s->lookahead--;
; 2025 :             if (s->strm->avail_out == 0) return need_more;

  002e9	8b 06		 mov	 eax, DWORD PTR [esi]
  002eb	ff 46 6c	 inc	 DWORD PTR [esi+108]
  002ee	ff 4e 74	 dec	 DWORD PTR [esi+116]
  002f1	39 78 10	 cmp	 DWORD PTR [eax+16], edi
  002f4	0f 85 16 fd ff
	ff		 jne	 $LL2@deflate_sl

; 2048 :     return block_done;
; 2049 : }

  002fa	5f		 pop	 edi
  002fb	5e		 pop	 esi
  002fc	33 c0		 xor	 eax, eax
  002fe	5b		 pop	 ebx
  002ff	8b e5		 mov	 esp, ebp
  00301	5d		 pop	 ebp
  00302	c3		 ret	 0
$LN20@deflate_sl:

; 2026 :         } else {
; 2027 :             /* There is no previous match to compare with, wait for
; 2028 :              * the next step to decide.
; 2029 :              */
; 2030 :             s->match_available = 1;
; 2031 :             s->strstart++;

  00303	ff 46 6c	 inc	 DWORD PTR [esi+108]

; 2032 :             s->lookahead--;

  00306	ff 4e 74	 dec	 DWORD PTR [esi+116]
  00309	c7 46 68 01 00
	00 00		 mov	 DWORD PTR [esi+104], 1

; 2033 :         }
; 2034 :     }

  00310	e9 fb fc ff ff	 jmp	 $LL2@deflate_sl
$LN46@deflate_sl:

; 2035 :     Assert (flush != Z_NO_FLUSH, "no flush?");
; 2036 :     if (s->match_available) {

  00315	83 7e 68 00	 cmp	 DWORD PTR [esi+104], 0
  00319	74 3f		 je	 SHORT $LN24@deflate_sl

; 2037 :         Tracevv((stderr,"%c", s->window[s->strstart-1]));
; 2038 :         _tr_tally_lit(s, s->window[s->strstart-1], bflush);

  0031b	8b 4e 6c	 mov	 ecx, DWORD PTR [esi+108]
  0031e	33 ff		 xor	 edi, edi
  00320	8b 46 38	 mov	 eax, DWORD PTR [esi+56]
  00323	8a 54 01 ff	 mov	 dl, BYTE PTR [ecx+eax-1]
  00327	8b 8e a0 16 00
	00		 mov	 ecx, DWORD PTR [esi+5792]
  0032d	8b 86 a4 16 00
	00		 mov	 eax, DWORD PTR [esi+5796]
  00333	66 89 3c 48	 mov	 WORD PTR [eax+ecx*2], di
  00337	8b 86 a0 16 00
	00		 mov	 eax, DWORD PTR [esi+5792]
  0033d	8b 8e 98 16 00
	00		 mov	 ecx, DWORD PTR [esi+5784]
  00343	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  00346	ff 86 a0 16 00
	00		 inc	 DWORD PTR [esi+5792]
  0034c	0f b6 c2	 movzx	 eax, dl
  0034f	66 ff 84 86 94
	00 00 00	 inc	 WORD PTR [esi+eax*4+148]

; 2039 :         s->match_available = 0;

  00357	89 7e 68	 mov	 DWORD PTR [esi+104], edi
$LN24@deflate_sl:

; 2040 :     }
; 2041 :     s->insert = s->strstart < MIN_MATCH-1 ? s->strstart : MIN_MATCH-1;

  0035a	8b 4e 6c	 mov	 ecx, DWORD PTR [esi+108]
  0035d	b8 02 00 00 00	 mov	 eax, 2
  00362	3b c8		 cmp	 ecx, eax
  00364	0f 42 c1	 cmovb	 eax, ecx
  00367	89 86 b4 16 00
	00		 mov	 DWORD PTR [esi+5812], eax

; 2042 :     if (flush == Z_FINISH) {

  0036d	83 fb 04	 cmp	 ebx, 4
  00370	75 40		 jne	 SHORT $LN25@deflate_sl

; 2043 :         FLUSH_BLOCK(s, 1);

  00372	8b 46 5c	 mov	 eax, DWORD PTR [esi+92]
  00375	85 c0		 test	 eax, eax
  00377	78 07		 js	 SHORT $LN38@deflate_sl
  00379	8b 56 38	 mov	 edx, DWORD PTR [esi+56]
  0037c	03 d0		 add	 edx, eax
  0037e	eb 02		 jmp	 SHORT $LN39@deflate_sl
$LN38@deflate_sl:
  00380	33 d2		 xor	 edx, edx
$LN39@deflate_sl:
  00382	2b c8		 sub	 ecx, eax
  00384	6a 01		 push	 1
  00386	51		 push	 ecx
  00387	8b ce		 mov	 ecx, esi
  00389	e8 00 00 00 00	 call	 __tr_flush_block
  0038e	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  00391	83 c4 08	 add	 esp, 8
  00394	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00396	89 46 5c	 mov	 DWORD PTR [esi+92], eax
  00399	e8 00 00 00 00	 call	 _flush_pending
  0039e	8b 06		 mov	 eax, DWORD PTR [esi]
  003a0	33 c9		 xor	 ecx, ecx

; 2048 :     return block_done;
; 2049 : }

  003a2	5f		 pop	 edi
  003a3	5e		 pop	 esi
  003a4	5b		 pop	 ebx
  003a5	39 48 10	 cmp	 DWORD PTR [eax+16], ecx
  003a8	0f 95 c1	 setne	 cl
  003ab	8d 41 02	 lea	 eax, DWORD PTR [ecx+2]
  003ae	8b e5		 mov	 esp, ebp
  003b0	5d		 pop	 ebp
  003b1	c3		 ret	 0
$LN25@deflate_sl:

; 2044 :         return finish_done;
; 2045 :     }
; 2046 :     if (s->last_lit)

  003b2	83 be a0 16 00
	00 00		 cmp	 DWORD PTR [esi+5792], 0
  003b9	74 38		 je	 SHORT $LN28@deflate_sl

; 2047 :         FLUSH_BLOCK(s, 0);

  003bb	8b 46 5c	 mov	 eax, DWORD PTR [esi+92]
  003be	85 c0		 test	 eax, eax
  003c0	78 07		 js	 SHORT $LN40@deflate_sl
  003c2	8b 56 38	 mov	 edx, DWORD PTR [esi+56]
  003c5	03 d0		 add	 edx, eax
  003c7	eb 02		 jmp	 SHORT $LN41@deflate_sl
$LN40@deflate_sl:
  003c9	33 d2		 xor	 edx, edx
$LN41@deflate_sl:
  003cb	2b c8		 sub	 ecx, eax
  003cd	6a 00		 push	 0
  003cf	51		 push	 ecx
  003d0	8b ce		 mov	 ecx, esi
  003d2	e8 00 00 00 00	 call	 __tr_flush_block
  003d7	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  003da	83 c4 08	 add	 esp, 8
  003dd	8b 0e		 mov	 ecx, DWORD PTR [esi]
  003df	89 46 5c	 mov	 DWORD PTR [esi+92], eax
  003e2	e8 00 00 00 00	 call	 _flush_pending
  003e7	8b 06		 mov	 eax, DWORD PTR [esi]
  003e9	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  003ed	0f 84 69 fe ff
	ff		 je	 $LN48@deflate_sl
$LN28@deflate_sl:

; 2048 :     return block_done;
; 2049 : }

  003f3	5f		 pop	 edi
  003f4	5e		 pop	 esi
  003f5	b8 01 00 00 00	 mov	 eax, 1
  003fa	5b		 pop	 ebx
  003fb	8b e5		 mov	 esp, ebp
  003fd	5d		 pop	 ebp
  003fe	c3		 ret	 0
_deflate_slow ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\theclashingfritz\source\repos\inifileparser\zlib\deflate.c
;	COMDAT _deflate_rle
_TEXT	SEGMENT
_flush$1$ = -4						; size = 4
_deflate_rle PROC					; COMDAT
; _s$ = ecx
; _flush$ = edx

; 2060 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	8b da		 mov	 ebx, edx
  00008	8b f1		 mov	 esi, ecx
  0000a	57		 push	 edi
  0000b	89 5d fc	 mov	 DWORD PTR _flush$1$[ebp], ebx
  0000e	66 90		 npad	 2
$LL2@deflate_rl:

; 2061 :     int bflush;             /* set if current block must be flushed */
; 2062 :     uInt prev;              /* byte at distance one to match */
; 2063 :     Bytef *scan, *strend;   /* scan goes up to strend for length of run */
; 2064 : 
; 2065 :     for (;;) {
; 2066 :         /* Make sure that we always have enough lookahead, except
; 2067 :          * at the end of the input file. We need MAX_MATCH bytes
; 2068 :          * for the longest run, plus one for the unrolled loop.
; 2069 :          */
; 2070 :         if (s->lookahead <= MAX_MATCH) {

  00010	8b 7e 74	 mov	 edi, DWORD PTR [esi+116]
  00013	81 ff 02 01 00
	00		 cmp	 edi, 258		; 00000102H
  00019	77 22		 ja	 SHORT $LN10@deflate_rl

; 2071 :             fill_window(s);

  0001b	8b ce		 mov	 ecx, esi
  0001d	e8 00 00 00 00	 call	 _fill_window

; 2072 :             if (s->lookahead <= MAX_MATCH && flush == Z_NO_FLUSH) {

  00022	8b 7e 74	 mov	 edi, DWORD PTR [esi+116]
  00025	81 ff 02 01 00
	00		 cmp	 edi, 258		; 00000102H
  0002b	77 08		 ja	 SHORT $LN9@deflate_rl
  0002d	85 db		 test	 ebx, ebx
  0002f	0f 84 b5 01 00
	00		 je	 $LN37@deflate_rl
$LN9@deflate_rl:

; 2073 :                 return need_more;
; 2074 :             }
; 2075 :             if (s->lookahead == 0) break; /* flush the current block */

  00035	85 ff		 test	 edi, edi
  00037	0f 84 b6 01 00
	00		 je	 $LN36@deflate_rl
$LN10@deflate_rl:

; 2076 :         }
; 2077 : 
; 2078 :         /* See how many times the previous byte repeats */
; 2079 :         s->match_length = 0;

  0003d	c7 46 60 00 00
	00 00		 mov	 DWORD PTR [esi+96], 0

; 2080 :         if (s->lookahead >= MIN_MATCH && s->strstart > 0) {

  00044	83 ff 03	 cmp	 edi, 3
  00047	0f 82 94 00 00
	00		 jb	 $LN14@deflate_rl
  0004d	8b 4e 6c	 mov	 ecx, DWORD PTR [esi+108]
  00050	85 c9		 test	 ecx, ecx
  00052	0f 84 89 00 00
	00		 je	 $LN14@deflate_rl

; 2081 :             scan = s->window + s->strstart - 1;

  00058	8b 5e 38	 mov	 ebx, DWORD PTR [esi+56]
  0005b	03 d9		 add	 ebx, ecx

; 2082 :             prev = *scan;
; 2083 :             if (prev == *++scan && prev == *++scan && prev == *++scan) {

  0005d	8b c3		 mov	 eax, ebx
  0005f	0f b6 53 ff	 movzx	 edx, BYTE PTR [ebx-1]
  00063	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00066	3b d1		 cmp	 edx, ecx
  00068	75 74		 jne	 SHORT $LN44@deflate_rl
  0006a	0f b6 48 01	 movzx	 ecx, BYTE PTR [eax+1]
  0006e	3b d1		 cmp	 edx, ecx
  00070	75 6c		 jne	 SHORT $LN44@deflate_rl
  00072	0f b6 48 02	 movzx	 ecx, BYTE PTR [eax+2]
  00076	83 c0 02	 add	 eax, 2
  00079	3b d1		 cmp	 edx, ecx
  0007b	75 61		 jne	 SHORT $LN44@deflate_rl

; 2084 :                 strend = s->window + s->strstart + MAX_MATCH;

  0007d	81 c3 02 01 00
	00		 add	 ebx, 258		; 00000102H
$LL7@deflate_rl:

; 2085 :                 do {
; 2086 :                 } while (prev == *++scan && prev == *++scan &&
; 2087 :                          prev == *++scan && prev == *++scan &&
; 2088 :                          prev == *++scan && prev == *++scan &&
; 2089 :                          prev == *++scan && prev == *++scan &&

  00083	0f b6 48 01	 movzx	 ecx, BYTE PTR [eax+1]
  00087	40		 inc	 eax
  00088	3b d1		 cmp	 edx, ecx
  0008a	75 43		 jne	 SHORT $LN13@deflate_rl
  0008c	0f b6 48 01	 movzx	 ecx, BYTE PTR [eax+1]
  00090	40		 inc	 eax
  00091	3b d1		 cmp	 edx, ecx
  00093	75 3a		 jne	 SHORT $LN13@deflate_rl
  00095	0f b6 48 01	 movzx	 ecx, BYTE PTR [eax+1]
  00099	40		 inc	 eax
  0009a	3b d1		 cmp	 edx, ecx
  0009c	75 31		 jne	 SHORT $LN13@deflate_rl
  0009e	0f b6 48 01	 movzx	 ecx, BYTE PTR [eax+1]
  000a2	40		 inc	 eax
  000a3	3b d1		 cmp	 edx, ecx
  000a5	75 28		 jne	 SHORT $LN13@deflate_rl
  000a7	0f b6 48 01	 movzx	 ecx, BYTE PTR [eax+1]
  000ab	40		 inc	 eax
  000ac	3b d1		 cmp	 edx, ecx
  000ae	75 1f		 jne	 SHORT $LN13@deflate_rl
  000b0	0f b6 48 01	 movzx	 ecx, BYTE PTR [eax+1]
  000b4	40		 inc	 eax
  000b5	3b d1		 cmp	 edx, ecx
  000b7	75 16		 jne	 SHORT $LN13@deflate_rl
  000b9	0f b6 48 01	 movzx	 ecx, BYTE PTR [eax+1]
  000bd	40		 inc	 eax
  000be	3b d1		 cmp	 edx, ecx
  000c0	75 0d		 jne	 SHORT $LN13@deflate_rl
  000c2	0f b6 48 01	 movzx	 ecx, BYTE PTR [eax+1]
  000c6	40		 inc	 eax
  000c7	3b d1		 cmp	 edx, ecx
  000c9	75 04		 jne	 SHORT $LN13@deflate_rl
  000cb	3b c3		 cmp	 eax, ebx
  000cd	72 b4		 jb	 SHORT $LL7@deflate_rl
$LN13@deflate_rl:

; 2090 :                          scan < strend);
; 2091 :                 s->match_length = MAX_MATCH - (uInt)(strend - scan);

  000cf	2b c3		 sub	 eax, ebx
  000d1	05 02 01 00 00	 add	 eax, 258		; 00000102H

; 2092 :                 if (s->match_length > s->lookahead)

  000d6	3b c7		 cmp	 eax, edi
  000d8	0f 47 c7	 cmova	 eax, edi
  000db	89 46 60	 mov	 DWORD PTR [esi+96], eax
$LN44@deflate_rl:

; 2082 :             prev = *scan;
; 2083 :             if (prev == *++scan && prev == *++scan && prev == *++scan) {

  000de	8b 5d fc	 mov	 ebx, DWORD PTR _flush$1$[ebp]
$LN14@deflate_rl:

; 2093 :                     s->match_length = s->lookahead;
; 2094 :             }
; 2095 :             Assert(scan <= s->window+(uInt)(s->window_size-1), "wild scan");
; 2096 :         }
; 2097 : 
; 2098 :         /* Emit match if have run of MIN_MATCH or longer, else emit literal */
; 2099 :         if (s->match_length >= MIN_MATCH) {

  000e1	83 7e 60 03	 cmp	 DWORD PTR [esi+96], 3
  000e5	72 6d		 jb	 SHORT $LN15@deflate_rl

; 2100 :             check_match(s, s->strstart, s->strstart - 1, s->match_length);
; 2101 : 
; 2102 :             _tr_tally_dist(s, 1, s->match_length - MIN_MATCH, bflush);

  000e7	8b 8e a0 16 00
	00		 mov	 ecx, DWORD PTR [esi+5792]
  000ed	bf 01 00 00 00	 mov	 edi, 1
  000f2	8b 86 a4 16 00
	00		 mov	 eax, DWORD PTR [esi+5796]
  000f8	8a 56 60	 mov	 dl, BYTE PTR [esi+96]
  000fb	80 ea 03	 sub	 dl, 3
  000fe	66 89 3c 48	 mov	 WORD PTR [eax+ecx*2], di
  00102	8b 86 a0 16 00
	00		 mov	 eax, DWORD PTR [esi+5792]
  00108	8b 8e 98 16 00
	00		 mov	 ecx, DWORD PTR [esi+5784]
  0010e	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  00111	33 c9		 xor	 ecx, ecx
  00113	ff 86 a0 16 00
	00		 inc	 DWORD PTR [esi+5792]
  00119	0f b6 c2	 movzx	 eax, dl
  0011c	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR __length_code[eax]
  00123	66 ff 84 86 98
	04 00 00	 inc	 WORD PTR [esi+eax*4+1176]
  0012b	66 ff 86 88 09
	00 00		 inc	 WORD PTR [esi+2440]
  00132	8b 86 9c 16 00
	00		 mov	 eax, DWORD PTR [esi+5788]
  00138	48		 dec	 eax
  00139	39 86 a0 16 00
	00		 cmp	 DWORD PTR [esi+5792], eax

; 2103 : 
; 2104 :             s->lookahead -= s->match_length;

  0013f	8b 46 60	 mov	 eax, DWORD PTR [esi+96]
  00142	0f 94 c1	 sete	 cl

; 2105 :             s->strstart += s->match_length;
; 2106 :             s->match_length = 0;

  00145	c7 46 60 00 00
	00 00		 mov	 DWORD PTR [esi+96], 0
  0014c	29 46 74	 sub	 DWORD PTR [esi+116], eax
  0014f	01 46 6c	 add	 DWORD PTR [esi+108], eax

; 2107 :         } else {

  00152	eb 53		 jmp	 SHORT $LN16@deflate_rl
$LN15@deflate_rl:

; 2108 :             /* No match, output a literal byte */
; 2109 :             Tracevv((stderr,"%c", s->window[s->strstart]));
; 2110 :             _tr_tally_lit (s, s->window[s->strstart], bflush);

  00154	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  00157	33 ff		 xor	 edi, edi
  00159	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  0015c	8a 14 01	 mov	 dl, BYTE PTR [ecx+eax]
  0015f	8b 8e a0 16 00
	00		 mov	 ecx, DWORD PTR [esi+5792]
  00165	8b 86 a4 16 00
	00		 mov	 eax, DWORD PTR [esi+5796]
  0016b	66 89 3c 48	 mov	 WORD PTR [eax+ecx*2], di
  0016f	8b 86 a0 16 00
	00		 mov	 eax, DWORD PTR [esi+5792]
  00175	8b 8e 98 16 00
	00		 mov	 ecx, DWORD PTR [esi+5784]
  0017b	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  0017e	33 c9		 xor	 ecx, ecx
  00180	ff 86 a0 16 00
	00		 inc	 DWORD PTR [esi+5792]
  00186	0f b6 c2	 movzx	 eax, dl
  00189	66 ff 84 86 94
	00 00 00	 inc	 WORD PTR [esi+eax*4+148]
  00191	8b 86 9c 16 00
	00		 mov	 eax, DWORD PTR [esi+5788]
  00197	48		 dec	 eax
  00198	39 86 a0 16 00
	00		 cmp	 DWORD PTR [esi+5792], eax
  0019e	0f 94 c1	 sete	 cl

; 2111 :             s->lookahead--;

  001a1	ff 4e 74	 dec	 DWORD PTR [esi+116]

; 2112 :             s->strstart++;

  001a4	ff 46 6c	 inc	 DWORD PTR [esi+108]
$LN16@deflate_rl:

; 2113 :         }
; 2114 :         if (bflush) FLUSH_BLOCK(s, 0);

  001a7	85 c9		 test	 ecx, ecx
  001a9	0f 84 61 fe ff
	ff		 je	 $LL2@deflate_rl
  001af	8b 4e 5c	 mov	 ecx, DWORD PTR [esi+92]
  001b2	85 c9		 test	 ecx, ecx
  001b4	78 07		 js	 SHORT $LN26@deflate_rl
  001b6	8b 56 38	 mov	 edx, DWORD PTR [esi+56]
  001b9	03 d1		 add	 edx, ecx
  001bb	eb 02		 jmp	 SHORT $LN27@deflate_rl
$LN26@deflate_rl:
  001bd	33 d2		 xor	 edx, edx
$LN27@deflate_rl:
  001bf	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  001c2	2b c1		 sub	 eax, ecx
  001c4	8b ce		 mov	 ecx, esi
  001c6	6a 00		 push	 0
  001c8	50		 push	 eax
  001c9	e8 00 00 00 00	 call	 __tr_flush_block
  001ce	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  001d1	83 c4 08	 add	 esp, 8
  001d4	8b 0e		 mov	 ecx, DWORD PTR [esi]
  001d6	89 46 5c	 mov	 DWORD PTR [esi+92], eax
  001d9	e8 00 00 00 00	 call	 _flush_pending
  001de	8b 06		 mov	 eax, DWORD PTR [esi]
  001e0	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  001e4	0f 85 26 fe ff
	ff		 jne	 $LL2@deflate_rl
$LN37@deflate_rl:

; 2123 :     return block_done;
; 2124 : }

  001ea	5f		 pop	 edi
  001eb	5e		 pop	 esi
  001ec	33 c0		 xor	 eax, eax
  001ee	5b		 pop	 ebx
  001ef	8b e5		 mov	 esp, ebp
  001f1	5d		 pop	 ebp
  001f2	c3		 ret	 0
$LN36@deflate_rl:

; 2115 :     }
; 2116 :     s->insert = 0;

  001f3	c7 86 b4 16 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+5812], 0

; 2117 :     if (flush == Z_FINISH) {

  001fd	83 fb 04	 cmp	 ebx, 4
  00200	75 43		 jne	 SHORT $LN19@deflate_rl

; 2118 :         FLUSH_BLOCK(s, 1);

  00202	8b 4e 5c	 mov	 ecx, DWORD PTR [esi+92]
  00205	85 c9		 test	 ecx, ecx
  00207	78 07		 js	 SHORT $LN28@deflate_rl
  00209	8b 56 38	 mov	 edx, DWORD PTR [esi+56]
  0020c	03 d1		 add	 edx, ecx
  0020e	eb 02		 jmp	 SHORT $LN29@deflate_rl
$LN28@deflate_rl:
  00210	33 d2		 xor	 edx, edx
$LN29@deflate_rl:
  00212	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  00215	2b c1		 sub	 eax, ecx
  00217	8b ce		 mov	 ecx, esi
  00219	6a 01		 push	 1
  0021b	50		 push	 eax
  0021c	e8 00 00 00 00	 call	 __tr_flush_block
  00221	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  00224	83 c4 08	 add	 esp, 8
  00227	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00229	89 46 5c	 mov	 DWORD PTR [esi+92], eax
  0022c	e8 00 00 00 00	 call	 _flush_pending
  00231	8b 06		 mov	 eax, DWORD PTR [esi]
  00233	33 c9		 xor	 ecx, ecx

; 2123 :     return block_done;
; 2124 : }

  00235	5f		 pop	 edi
  00236	5e		 pop	 esi
  00237	5b		 pop	 ebx
  00238	39 48 10	 cmp	 DWORD PTR [eax+16], ecx
  0023b	0f 95 c1	 setne	 cl
  0023e	8d 41 02	 lea	 eax, DWORD PTR [ecx+2]
  00241	8b e5		 mov	 esp, ebp
  00243	5d		 pop	 ebp
  00244	c3		 ret	 0
$LN19@deflate_rl:

; 2119 :         return finish_done;
; 2120 :     }
; 2121 :     if (s->last_lit)

  00245	83 be a0 16 00
	00 00		 cmp	 DWORD PTR [esi+5792], 0
  0024c	74 3b		 je	 SHORT $LN22@deflate_rl

; 2122 :         FLUSH_BLOCK(s, 0);

  0024e	8b 4e 5c	 mov	 ecx, DWORD PTR [esi+92]
  00251	85 c9		 test	 ecx, ecx
  00253	78 07		 js	 SHORT $LN30@deflate_rl
  00255	8b 56 38	 mov	 edx, DWORD PTR [esi+56]
  00258	03 d1		 add	 edx, ecx
  0025a	eb 02		 jmp	 SHORT $LN31@deflate_rl
$LN30@deflate_rl:
  0025c	33 d2		 xor	 edx, edx
$LN31@deflate_rl:
  0025e	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  00261	2b c1		 sub	 eax, ecx
  00263	8b ce		 mov	 ecx, esi
  00265	6a 00		 push	 0
  00267	50		 push	 eax
  00268	e8 00 00 00 00	 call	 __tr_flush_block
  0026d	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  00270	83 c4 08	 add	 esp, 8
  00273	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00275	89 46 5c	 mov	 DWORD PTR [esi+92], eax
  00278	e8 00 00 00 00	 call	 _flush_pending
  0027d	8b 06		 mov	 eax, DWORD PTR [esi]
  0027f	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  00283	0f 84 61 ff ff
	ff		 je	 $LN37@deflate_rl
$LN22@deflate_rl:

; 2123 :     return block_done;
; 2124 : }

  00289	5f		 pop	 edi
  0028a	5e		 pop	 esi
  0028b	b8 01 00 00 00	 mov	 eax, 1
  00290	5b		 pop	 ebx
  00291	8b e5		 mov	 esp, ebp
  00293	5d		 pop	 ebp
  00294	c3		 ret	 0
_deflate_rle ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\theclashingfritz\source\repos\inifileparser\zlib\deflate.c
;	COMDAT _deflate_huff
_TEXT	SEGMENT
_deflate_huff PROC					; COMDAT
; _s$ = ecx
; _flush$ = edx

; 2133 : {

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b fa		 mov	 edi, edx
  00005	8b f1		 mov	 esi, ecx
$LL2@deflate_hu:

; 2134 :     int bflush;             /* set if current block must be flushed */
; 2135 : 
; 2136 :     for (;;) {
; 2137 :         /* Make sure that we have a literal to write. */
; 2138 :         if (s->lookahead == 0) {

  00007	83 7e 74 00	 cmp	 DWORD PTR [esi+116], 0
  0000b	75 11		 jne	 SHORT $LN6@deflate_hu

; 2139 :             fill_window(s);

  0000d	8b ce		 mov	 ecx, esi
  0000f	e8 00 00 00 00	 call	 _fill_window

; 2140 :             if (s->lookahead == 0) {

  00014	83 7e 74 00	 cmp	 DWORD PTR [esi+116], 0
  00018	0f 84 97 00 00
	00		 je	 $LN23@deflate_hu
$LN6@deflate_hu:

; 2142 :                     return need_more;
; 2143 :                 break;      /* flush the current block */
; 2144 :             }
; 2145 :         }
; 2146 : 
; 2147 :         /* Output a literal byte */
; 2148 :         s->match_length = 0;
; 2149 :         Tracevv((stderr,"%c", s->window[s->strstart]));
; 2150 :         _tr_tally_lit (s, s->window[s->strstart], bflush);

  0001e	8b 4e 6c	 mov	 ecx, DWORD PTR [esi+108]
  00021	33 db		 xor	 ebx, ebx
  00023	8b 46 38	 mov	 eax, DWORD PTR [esi+56]
  00026	c7 46 60 00 00
	00 00		 mov	 DWORD PTR [esi+96], 0
  0002d	8a 14 01	 mov	 dl, BYTE PTR [ecx+eax]
  00030	8b 8e a0 16 00
	00		 mov	 ecx, DWORD PTR [esi+5792]
  00036	8b 86 a4 16 00
	00		 mov	 eax, DWORD PTR [esi+5796]
  0003c	66 89 1c 48	 mov	 WORD PTR [eax+ecx*2], bx
  00040	8b 86 a0 16 00
	00		 mov	 eax, DWORD PTR [esi+5792]
  00046	8b 8e 98 16 00
	00		 mov	 ecx, DWORD PTR [esi+5784]
  0004c	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  0004f	ff 86 a0 16 00
	00		 inc	 DWORD PTR [esi+5792]
  00055	0f b6 c2	 movzx	 eax, dl
  00058	66 ff 84 86 94
	00 00 00	 inc	 WORD PTR [esi+eax*4+148]
  00060	8b 86 9c 16 00
	00		 mov	 eax, DWORD PTR [esi+5788]

; 2151 :         s->lookahead--;
; 2152 :         s->strstart++;

  00066	ff 46 6c	 inc	 DWORD PTR [esi+108]
  00069	48		 dec	 eax
  0006a	ff 4e 74	 dec	 DWORD PTR [esi+116]
  0006d	8b 4e 6c	 mov	 ecx, DWORD PTR [esi+108]
  00070	39 86 a0 16 00
	00		 cmp	 DWORD PTR [esi+5792], eax

; 2153 :         if (bflush) FLUSH_BLOCK(s, 0);

  00076	75 8f		 jne	 SHORT $LL2@deflate_hu
  00078	8b 46 5c	 mov	 eax, DWORD PTR [esi+92]
  0007b	85 c0		 test	 eax, eax
  0007d	78 07		 js	 SHORT $LN15@deflate_hu
  0007f	8b 56 38	 mov	 edx, DWORD PTR [esi+56]
  00082	03 d0		 add	 edx, eax
  00084	eb 02		 jmp	 SHORT $LN16@deflate_hu
$LN15@deflate_hu:
  00086	33 d2		 xor	 edx, edx
$LN16@deflate_hu:
  00088	2b c8		 sub	 ecx, eax
  0008a	6a 00		 push	 0
  0008c	51		 push	 ecx
  0008d	8b ce		 mov	 ecx, esi
  0008f	e8 00 00 00 00	 call	 __tr_flush_block
  00094	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  00097	83 c4 08	 add	 esp, 8
  0009a	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0009c	89 46 5c	 mov	 DWORD PTR [esi+92], eax
  0009f	e8 00 00 00 00	 call	 _flush_pending
  000a4	8b 06		 mov	 eax, DWORD PTR [esi]
  000a6	39 58 10	 cmp	 DWORD PTR [eax+16], ebx
  000a9	0f 85 58 ff ff
	ff		 jne	 $LL2@deflate_hu
$LN24@deflate_hu:

; 2162 :     return block_done;
; 2163 : }

  000af	5f		 pop	 edi
  000b0	5e		 pop	 esi
  000b1	33 c0		 xor	 eax, eax
  000b3	5b		 pop	 ebx
  000b4	c3		 ret	 0
$LN23@deflate_hu:

; 2141 :                 if (flush == Z_NO_FLUSH)

  000b5	85 ff		 test	 edi, edi
  000b7	74 f6		 je	 SHORT $LN24@deflate_hu

; 2154 :     }
; 2155 :     s->insert = 0;

  000b9	c7 86 b4 16 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+5812], 0

; 2156 :     if (flush == Z_FINISH) {

  000c3	83 ff 04	 cmp	 edi, 4
  000c6	75 40		 jne	 SHORT $LN10@deflate_hu

; 2157 :         FLUSH_BLOCK(s, 1);

  000c8	8b 4e 5c	 mov	 ecx, DWORD PTR [esi+92]
  000cb	85 c9		 test	 ecx, ecx
  000cd	78 07		 js	 SHORT $LN17@deflate_hu
  000cf	8b 56 38	 mov	 edx, DWORD PTR [esi+56]
  000d2	03 d1		 add	 edx, ecx
  000d4	eb 02		 jmp	 SHORT $LN18@deflate_hu
$LN17@deflate_hu:
  000d6	33 d2		 xor	 edx, edx
$LN18@deflate_hu:
  000d8	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  000db	2b c1		 sub	 eax, ecx
  000dd	8b ce		 mov	 ecx, esi
  000df	6a 01		 push	 1
  000e1	50		 push	 eax
  000e2	e8 00 00 00 00	 call	 __tr_flush_block
  000e7	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  000ea	83 c4 08	 add	 esp, 8
  000ed	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000ef	89 46 5c	 mov	 DWORD PTR [esi+92], eax
  000f2	e8 00 00 00 00	 call	 _flush_pending
  000f7	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000f9	33 c0		 xor	 eax, eax

; 2162 :     return block_done;
; 2163 : }

  000fb	5f		 pop	 edi
  000fc	5e		 pop	 esi
  000fd	5b		 pop	 ebx
  000fe	39 41 10	 cmp	 DWORD PTR [ecx+16], eax
  00101	0f 95 c0	 setne	 al
  00104	83 c0 02	 add	 eax, 2
  00107	c3		 ret	 0
$LN10@deflate_hu:

; 2158 :         return finish_done;
; 2159 :     }
; 2160 :     if (s->last_lit)

  00108	83 be a0 16 00
	00 00		 cmp	 DWORD PTR [esi+5792], 0
  0010f	74 3b		 je	 SHORT $LN13@deflate_hu

; 2161 :         FLUSH_BLOCK(s, 0);

  00111	8b 4e 5c	 mov	 ecx, DWORD PTR [esi+92]
  00114	85 c9		 test	 ecx, ecx
  00116	78 07		 js	 SHORT $LN19@deflate_hu
  00118	8b 56 38	 mov	 edx, DWORD PTR [esi+56]
  0011b	03 d1		 add	 edx, ecx
  0011d	eb 02		 jmp	 SHORT $LN20@deflate_hu
$LN19@deflate_hu:
  0011f	33 d2		 xor	 edx, edx
$LN20@deflate_hu:
  00121	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  00124	2b c1		 sub	 eax, ecx
  00126	8b ce		 mov	 ecx, esi
  00128	6a 00		 push	 0
  0012a	50		 push	 eax
  0012b	e8 00 00 00 00	 call	 __tr_flush_block
  00130	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  00133	83 c4 08	 add	 esp, 8
  00136	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00138	89 46 5c	 mov	 DWORD PTR [esi+92], eax
  0013b	e8 00 00 00 00	 call	 _flush_pending
  00140	8b 06		 mov	 eax, DWORD PTR [esi]
  00142	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  00146	0f 84 63 ff ff
	ff		 je	 $LN24@deflate_hu
$LN13@deflate_hu:

; 2162 :     return block_done;
; 2163 : }

  0014c	5f		 pop	 edi
  0014d	5e		 pop	 esi
  0014e	b8 01 00 00 00	 mov	 eax, 1
  00153	5b		 pop	 ebx
  00154	c3		 ret	 0
_deflate_huff ENDP
_TEXT	ENDS
END
