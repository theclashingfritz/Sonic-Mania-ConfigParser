; Listing generated by Microsoft (R) Optimizing Compiler Version 19.11.25508.2 

	TITLE	c:\users\theclashingfritz\source\repos\inifileparser\zlib\gzlib.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	??_C@_02DKCKIIND@?$CFs?$AA@			; `string'
PUBLIC	??_C@_07EBNKNFJN@?$DMfd?3?$CFd?$DO?$AA@		; `string'
PUBLIC	??_C@_0O@BNNCBLEN@out?5of?5memory?$AA@		; `string'
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	??_C@_02LMMGGCAJ@?3?5?$AA@			; `string'
PUBLIC	??_C@_06DIJPEION@?$CFs?$CFs?$CFs?$AA@		; `string'
EXTRN	__imp__malloc:PROC
EXTRN	__imp__free:PROC
EXTRN	__imp____stdio_common_vsprintf:PROC
EXTRN	__imp__wcstombs:PROC
EXTRN	__imp__open:PROC
EXTRN	__imp___wopen:PROC
EXTRN	__imp___lseeki64:PROC
;	COMDAT ??_C@_06DIJPEION@?$CFs?$CFs?$CFs?$AA@
CONST	SEGMENT
??_C@_06DIJPEION@?$CFs?$CFs?$CFs?$AA@ DB '%s%s%s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02LMMGGCAJ@?3?5?$AA@
CONST	SEGMENT
??_C@_02LMMGGCAJ@?3?5?$AA@ DB ': ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@BNNCBLEN@out?5of?5memory?$AA@
CONST	SEGMENT
??_C@_0O@BNNCBLEN@out?5of?5memory?$AA@ DB 'out of memory', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07EBNKNFJN@?$DMfd?3?$CFd?$DO?$AA@
CONST	SEGMENT
??_C@_07EBNKNFJN@?$DMfd?3?$CFd?$DO?$AA@ DB '<fd:%d>', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs?$AA@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs?$AA@ DB '%s', 00H		; `string'
PUBLIC	_gz_error
PUBLIC	_gzclearerr
PUBLIC	_gzerror
PUBLIC	_gzeof
PUBLIC	_gzoffset
PUBLIC	_gzoffset64
PUBLIC	_gztell
PUBLIC	_gztell64
PUBLIC	_gzseek
PUBLIC	_gzseek64
PUBLIC	_gzrewind
PUBLIC	_gzbuffer
PUBLIC	_gzopen_w
PUBLIC	_gzdopen
PUBLIC	_gzopen
PUBLIC	_snprintf
PUBLIC	_vsnprintf
PUBLIC	___local_stdio_printf_options
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10586.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 81   :     static unsigned __int64 _OptionsStorage;
; 82   :     return &_OptionsStorage;

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 83   : }

  00005	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10586.0\ucrt\stdio.h
;	COMDAT _vsnprintf
_TEXT	SEGMENT
__Format$ = 8						; size = 4
__ArgList$ = 12						; size = 4
_vsnprintf PROC						; COMDAT
; __Buffer$ = ecx
; __BufferCount$ = edx

; 1435 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H

; 1436 :     int const _Result = __stdio_common_vsprintf(

  00006	ff 75 0c	 push	 DWORD PTR __ArgList$[ebp]
  00009	6a 00		 push	 0
  0000b	ff 75 08	 push	 DWORD PTR __Format$[ebp]
  0000e	52		 push	 edx
  0000f	51		 push	 ecx
  00010	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00015	8b 08		 mov	 ecx, DWORD PTR [eax]
  00017	ff 70 04	 push	 DWORD PTR [eax+4]
  0001a	83 c9 02	 or	 ecx, 2
  0001d	51		 push	 ecx
  0001e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vsprintf

; 1437 :         _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_STANDARD_SNPRINTF_BEHAVIOR,
; 1438 :         _Buffer, _BufferCount, _Format, NULL, _ArgList);
; 1439 : 
; 1440 :     return _Result < 0 ? -1 : _Result;

  00024	83 c9 ff	 or	 ecx, -1
  00027	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002a	85 c0		 test	 eax, eax
  0002c	0f 48 c1	 cmovs	 eax, ecx

; 1441 : }

  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c3		 ret	 0
_vsnprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10586.0\ucrt\stdio.h
;	COMDAT _snprintf
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
_snprintf PROC						; COMDAT

; 1940 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H

; 1436 :     int const _Result = __stdio_common_vsprintf(

  00006	8d 45 14	 lea	 eax, DWORD PTR __Format$[ebp+4]
  00009	50		 push	 eax
  0000a	6a 00		 push	 0
  0000c	ff 75 10	 push	 DWORD PTR __Format$[ebp]
  0000f	ff 75 0c	 push	 DWORD PTR __BufferCount$[ebp]
  00012	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00015	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  0001a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001c	ff 70 04	 push	 DWORD PTR [eax+4]
  0001f	83 c9 02	 or	 ecx, 2
  00022	51		 push	 ecx
  00023	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vsprintf

; 1437 :         _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_STANDARD_SNPRINTF_BEHAVIOR,
; 1438 :         _Buffer, _BufferCount, _Format, NULL, _ArgList);
; 1439 : 
; 1440 :     return _Result < 0 ? -1 : _Result;

  00029	83 c9 ff	 or	 ecx, -1
  0002c	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002f	85 c0		 test	 eax, eax
  00031	0f 48 c1	 cmovs	 eax, ecx

; 1941 :     int _Result;
; 1942 :     va_list _ArgList;
; 1943 :     __crt_va_start(_ArgList, _Format);
; 1944 : #pragma warning(suppress:28719)    // __WARNING_BANNED_API_USAGE
; 1945 :     _Result = vsnprintf(_Buffer, _BufferCount, _Format, _ArgList);
; 1946 :     __crt_va_end(_ArgList);
; 1947 :     return _Result;
; 1948 : }

  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
_snprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\theclashingfritz\source\repos\inifileparser\zlib\gzlib.c
;	COMDAT _gz_reset
_TEXT	SEGMENT
_gz_reset PROC						; COMDAT
; _state$ = ecx

; 77   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 78   :     state->x.have = 0;              /* no output data available */
; 79   :     if (state->mode == GZ_READ) {   /* for reading ... */

  00003	81 7e 10 4f 1c
	00 00		 cmp	 DWORD PTR [esi+16], 7247 ; 00001c4fH
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00010	75 15		 jne	 SHORT $LN2@gz_reset

; 80   :         state->eof = 0;             /* not at end of file */

  00012	c7 46 40 00 00
	00 00		 mov	 DWORD PTR [esi+64], 0

; 81   :         state->past = 0;            /* have not read past end yet */

  00019	c7 46 44 00 00
	00 00		 mov	 DWORD PTR [esi+68], 0

; 82   :         state->how = LOOK;          /* look for gzip header */

  00020	c7 46 30 00 00
	00 00		 mov	 DWORD PTR [esi+48], 0
$LN2@gz_reset:

; 83   :     }
; 84   :     state->seek = 0;                /* no seek request pending */
; 85   :     gz_error(state, Z_OK, NULL);    /* clear error */

  00027	6a 00		 push	 0
  00029	33 d2		 xor	 edx, edx
  0002b	c7 46 58 00 00
	00 00		 mov	 DWORD PTR [esi+88], 0
  00032	e8 00 00 00 00	 call	 _gz_error
  00037	83 c4 04	 add	 esp, 4

; 86   :     state->x.pos = 0;               /* no uncompressed data yet */

  0003a	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00041	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0

; 87   :     state->strm.avail_in = 0;       /* no input data yet */

  00048	c7 46 68 00 00
	00 00		 mov	 DWORD PTR [esi+104], 0
  0004f	5e		 pop	 esi

; 88   : }

  00050	c3		 ret	 0
_gz_reset ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\theclashingfritz\source\repos\inifileparser\zlib\gzlib.c
;	COMDAT _gz_open
_TEXT	SEGMENT
_path$1$ = -8						; size = 4
_exclusive$1$ = -4					; size = 4
_mode$ = 8						; size = 4
_gz_open PROC						; COMDAT
; _path$ = ecx
; _fd$ = edx

; 95   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx

; 96   :     gz_statep state;
; 97   :     z_size_t len;
; 98   :     int oflag;
; 99   : #ifdef O_CLOEXEC
; 100  :     int cloexec = 0;
; 101  : #endif
; 102  : #ifdef O_EXCL
; 103  :     int exclusive = 0;

  0000d	c7 44 24 10 00
	00 00 00	 mov	 DWORD PTR _exclusive$1$[esp+20], 0
  00015	89 74 24 0c	 mov	 DWORD PTR _path$1$[esp+20], esi
  00019	8b da		 mov	 ebx, edx
  0001b	57		 push	 edi

; 104  : #endif
; 105  : 
; 106  :     /* check input */
; 107  :     if (path == NULL)

  0001c	85 f6		 test	 esi, esi
  0001e	0f 84 1f 01 00
	00		 je	 $LN52@gz_open

; 108  :         return NULL;
; 109  : 
; 110  :     /* allocate gzFile structure to return */
; 111  :     state = (gz_statep)malloc(sizeof(gz_state));

  00024	68 a0 00 00 00	 push	 160			; 000000a0H
  00029	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  0002f	8b f8		 mov	 edi, eax
  00031	83 c4 04	 add	 esp, 4

; 112  :     if (state == NULL)

  00034	85 ff		 test	 edi, edi
  00036	0f 84 07 01 00
	00		 je	 $LN52@gz_open

; 113  :         return NULL;
; 114  :     state->size = 0;            /* no buffers allocated yet */
; 115  :     state->want = GZBUFSIZE;    /* requested buffer size */
; 116  :     state->msg = NULL;          /* no error message yet */
; 117  : 
; 118  :     /* interpret mode */
; 119  :     state->mode = GZ_NONE;
; 120  :     state->level = Z_DEFAULT_COMPRESSION;
; 121  :     state->strategy = Z_DEFAULT_STRATEGY;
; 122  :     state->direct = 0;
; 123  :     while (*mode) {

  0003c	8b 55 08	 mov	 edx, DWORD PTR _mode$[ebp]
  0003f	c7 47 1c 00 00
	00 00		 mov	 DWORD PTR [edi+28], 0
  00046	c7 47 20 00 20
	00 00		 mov	 DWORD PTR [edi+32], 8192 ; 00002000H
  0004d	c7 47 60 00 00
	00 00		 mov	 DWORD PTR [edi+96], 0
  00054	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
  0005b	c7 47 48 ff ff
	ff ff		 mov	 DWORD PTR [edi+72], -1
  00062	c7 47 4c 00 00
	00 00		 mov	 DWORD PTR [edi+76], 0
  00069	c7 47 2c 00 00
	00 00		 mov	 DWORD PTR [edi+44], 0
  00070	8a 0a		 mov	 cl, BYTE PTR [edx]
  00072	84 c9		 test	 cl, cl
  00074	0f 84 86 00 00
	00		 je	 $LN48@gz_open
  0007a	66 0f 1f 44 00
	00		 npad	 6
$LL2@gz_open:

; 124  :         if (*mode >= '0' && *mode <= '9')

  00080	8d 41 d0	 lea	 eax, DWORD PTR [ecx-48]
  00083	3c 09		 cmp	 al, 9

; 125  :             state->level = *mode - '0';

  00085	0f be c1	 movsx	 eax, cl
  00088	77 08		 ja	 SHORT $LN8@gz_open
  0008a	83 e8 30	 sub	 eax, 48			; 00000030H
  0008d	89 47 48	 mov	 DWORD PTR [edi+72], eax
  00090	eb 66		 jmp	 SHORT $LN21@gz_open
$LN8@gz_open:

; 126  :         else
; 127  :             switch (*mode) {

  00092	83 c0 d5	 add	 eax, -43		; ffffffd5H
  00095	83 f8 4d	 cmp	 eax, 77			; 0000004dH
  00098	77 5e		 ja	 SHORT $LN21@gz_open
  0009a	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN49@gz_open[eax]
  000a1	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN54@gz_open[eax*4]
$LN10@gz_open:

; 128  :             case 'r':
; 129  :                 state->mode = GZ_READ;

  000a8	c7 47 10 4f 1c
	00 00		 mov	 DWORD PTR [edi+16], 7247 ; 00001c4fH

; 130  :                 break;

  000af	eb 47		 jmp	 SHORT $LN21@gz_open
$LN11@gz_open:

; 131  : #ifndef NO_GZCOMPRESS
; 132  :             case 'w':
; 133  :                 state->mode = GZ_WRITE;

  000b1	c7 47 10 b1 79
	00 00		 mov	 DWORD PTR [edi+16], 31153 ; 000079b1H

; 134  :                 break;

  000b8	eb 3e		 jmp	 SHORT $LN21@gz_open
$LN12@gz_open:

; 135  :             case 'a':
; 136  :                 state->mode = GZ_APPEND;

  000ba	c7 47 10 01 00
	00 00		 mov	 DWORD PTR [edi+16], 1

; 137  :                 break;

  000c1	eb 35		 jmp	 SHORT $LN21@gz_open
$LN15@gz_open:

; 142  :             case 'b':       /* ignore -- will request binary anyway */
; 143  :                 break;
; 144  : #ifdef O_CLOEXEC
; 145  :             case 'e':
; 146  :                 cloexec = 1;
; 147  :                 break;
; 148  : #endif
; 149  : #ifdef O_EXCL
; 150  :             case 'x':
; 151  :                 exclusive = 1;

  000c3	c7 44 24 14 01
	00 00 00	 mov	 DWORD PTR _exclusive$1$[esp+24], 1

; 152  :                 break;

  000cb	eb 2b		 jmp	 SHORT $LN21@gz_open
$LN16@gz_open:

; 153  : #endif
; 154  :             case 'f':
; 155  :                 state->strategy = Z_FILTERED;

  000cd	c7 47 4c 01 00
	00 00		 mov	 DWORD PTR [edi+76], 1

; 156  :                 break;

  000d4	eb 22		 jmp	 SHORT $LN21@gz_open
$LN17@gz_open:

; 157  :             case 'h':
; 158  :                 state->strategy = Z_HUFFMAN_ONLY;

  000d6	c7 47 4c 02 00
	00 00		 mov	 DWORD PTR [edi+76], 2

; 159  :                 break;

  000dd	eb 19		 jmp	 SHORT $LN21@gz_open
$LN18@gz_open:

; 160  :             case 'R':
; 161  :                 state->strategy = Z_RLE;

  000df	c7 47 4c 03 00
	00 00		 mov	 DWORD PTR [edi+76], 3

; 162  :                 break;

  000e6	eb 10		 jmp	 SHORT $LN21@gz_open
$LN19@gz_open:

; 163  :             case 'F':
; 164  :                 state->strategy = Z_FIXED;

  000e8	c7 47 4c 04 00
	00 00		 mov	 DWORD PTR [edi+76], 4

; 165  :                 break;

  000ef	eb 07		 jmp	 SHORT $LN21@gz_open
$LN20@gz_open:

; 166  :             case 'T':
; 167  :                 state->direct = 1;

  000f1	c7 47 2c 01 00
	00 00		 mov	 DWORD PTR [edi+44], 1
$LN21@gz_open:

; 113  :         return NULL;
; 114  :     state->size = 0;            /* no buffers allocated yet */
; 115  :     state->want = GZBUFSIZE;    /* requested buffer size */
; 116  :     state->msg = NULL;          /* no error message yet */
; 117  : 
; 118  :     /* interpret mode */
; 119  :     state->mode = GZ_NONE;
; 120  :     state->level = Z_DEFAULT_COMPRESSION;
; 121  :     state->strategy = Z_DEFAULT_STRATEGY;
; 122  :     state->direct = 0;
; 123  :     while (*mode) {

  000f8	8a 4a 01	 mov	 cl, BYTE PTR [edx+1]

; 168  :                 break;
; 169  :             default:        /* could consider as an error, but just ignore */
; 170  :                 ;
; 171  :             }
; 172  :         mode++;

  000fb	42		 inc	 edx
  000fc	84 c9		 test	 cl, cl
  000fe	75 80		 jne	 SHORT $LL2@gz_open
$LN48@gz_open:

; 173  :     }
; 174  : 
; 175  :     /* must provide an "r", "w", or "a" */
; 176  :     if (state->mode == GZ_NONE) {

  00100	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00103	85 c0		 test	 eax, eax
  00105	74 32		 je	 SHORT $LN13@gz_open

; 177  :         free(state);
; 178  :         return NULL;
; 179  :     }
; 180  : 
; 181  :     /* can't force transparent read */
; 182  :     if (state->mode == GZ_READ) {

  00107	3d 4f 1c 00 00	 cmp	 eax, 7247		; 00001c4fH
  0010c	75 0d		 jne	 SHORT $LN23@gz_open

; 183  :         if (state->direct) {

  0010e	83 7f 2c 00	 cmp	 DWORD PTR [edi+44], 0
  00112	75 25		 jne	 SHORT $LN13@gz_open

; 184  :             free(state);
; 185  :             return NULL;
; 186  :         }
; 187  :         state->direct = 1;      /* for empty file */

  00114	c7 47 2c 01 00
	00 00		 mov	 DWORD PTR [edi+44], 1
$LN23@gz_open:

; 188  :     }
; 189  : 
; 190  :     /* save the path name for error messages */
; 191  : #ifdef WIDECHAR
; 192  :     if (fd == -2) {

  0011b	83 fb fe	 cmp	 ebx, -2			; fffffffeH
  0011e	75 2c		 jne	 SHORT $LN25@gz_open

; 193  :         len = wcstombs(NULL, path, 0);

  00120	6a 00		 push	 0
  00122	56		 push	 esi
  00123	6a 00		 push	 0
  00125	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wcstombs
  0012b	8b f0		 mov	 esi, eax
  0012d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 194  :         if (len == (z_size_t)-1)

  00130	83 fe ff	 cmp	 esi, -1
  00133	75 24		 jne	 SHORT $LN26@gz_open

; 195  :             len = 0;

  00135	33 f6		 xor	 esi, esi

; 196  :     }

  00137	eb 20		 jmp	 SHORT $LN26@gz_open
$LN13@gz_open:

; 138  : #endif
; 139  :             case '+':       /* can't read and write at the same time */
; 140  :                 free(state);

  00139	57		 push	 edi
  0013a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  00140	83 c4 04	 add	 esp, 4
$LN52@gz_open:

; 141  :                 return NULL;

  00143	33 c0		 xor	 eax, eax

; 267  : }

  00145	5f		 pop	 edi
  00146	5e		 pop	 esi
  00147	5b		 pop	 ebx
  00148	8b e5		 mov	 esp, ebp
  0014a	5d		 pop	 ebp
  0014b	c3		 ret	 0
$LN25@gz_open:

; 197  :     else
; 198  : #endif
; 199  :         len = strlen((const char *)path);

  0014c	8d 4e 01	 lea	 ecx, DWORD PTR [esi+1]
  0014f	90		 npad	 1
$LL50@gz_open:
  00150	8a 06		 mov	 al, BYTE PTR [esi]
  00152	46		 inc	 esi
  00153	84 c0		 test	 al, al
  00155	75 f9		 jne	 SHORT $LL50@gz_open
  00157	2b f1		 sub	 esi, ecx
$LN26@gz_open:

; 200  :     state->path = (char *)malloc(len + 1);

  00159	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
  0015c	50		 push	 eax
  0015d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  00163	83 c4 04	 add	 esp, 4
  00166	89 47 18	 mov	 DWORD PTR [edi+24], eax

; 201  :     if (state->path == NULL) {

  00169	85 c0		 test	 eax, eax
  0016b	74 cc		 je	 SHORT $LN13@gz_open

; 202  :         free(state);
; 203  :         return NULL;
; 204  :     }
; 205  : #ifdef WIDECHAR
; 206  :     if (fd == -2)

  0016d	83 fb fe	 cmp	 ebx, -2			; fffffffeH
  00170	75 1d		 jne	 SHORT $LN29@gz_open

; 207  :         if (len)

  00172	85 f6		 test	 esi, esi
  00174	74 14		 je	 SHORT $LN31@gz_open

; 208  :             wcstombs(state->path, path, len + 1);

  00176	8d 4e 01	 lea	 ecx, DWORD PTR [esi+1]
  00179	51		 push	 ecx
  0017a	ff 74 24 14	 push	 DWORD PTR _path$1$[esp+28]
  0017e	50		 push	 eax
  0017f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wcstombs
  00185	83 c4 0c	 add	 esp, 12			; 0000000cH
  00188	eb 1b		 jmp	 SHORT $LN30@gz_open
$LN31@gz_open:

; 209  :         else
; 210  :             *(state->path) = 0;

  0018a	c6 00 00	 mov	 BYTE PTR [eax], 0
  0018d	eb 16		 jmp	 SHORT $LN30@gz_open
$LN29@gz_open:

; 211  :     else
; 212  : #endif
; 213  : #if !defined(NO_snprintf) && !defined(NO_vsnprintf)
; 214  :         (void)snprintf(state->path, len + 1, "%s", (const char *)path);

  0018f	ff 74 24 10	 push	 DWORD PTR _path$1$[esp+24]
  00193	8d 4e 01	 lea	 ecx, DWORD PTR [esi+1]
  00196	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
  0019b	51		 push	 ecx
  0019c	50		 push	 eax
  0019d	e8 00 00 00 00	 call	 _snprintf
  001a2	83 c4 10	 add	 esp, 16			; 00000010H
$LN30@gz_open:

; 215  : #else
; 216  :         strcpy(state->path, path);
; 217  : #endif
; 218  : 
; 219  :     /* compute the flags for open() */
; 220  :     oflag =

  001a5	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  001a8	3d 4f 1c 00 00	 cmp	 eax, 7247		; 00001c4fH
  001ad	75 04		 jne	 SHORT $LN38@gz_open
  001af	33 c9		 xor	 ecx, ecx
  001b1	eb 26		 jmp	 SHORT $LN39@gz_open
$LN38@gz_open:
  001b3	3d b1 79 00 00	 cmp	 eax, 31153		; 000079b1H
  001b8	ba 00 02 00 00	 mov	 edx, 512		; 00000200H
  001bd	b9 08 00 00 00	 mov	 ecx, 8
  001c2	b8 01 01 00 00	 mov	 eax, 257		; 00000101H
  001c7	0f 44 ca	 cmove	 ecx, edx
  001ca	83 7c 24 14 00	 cmp	 DWORD PTR _exclusive$1$[esp+24], 0
  001cf	ba 01 05 00 00	 mov	 edx, 1281		; 00000501H
  001d4	0f 45 c2	 cmovne	 eax, edx
  001d7	0b c8		 or	 ecx, eax
$LN39@gz_open:
  001d9	81 c9 00 80 00
	00		 or	 ecx, 32768		; 00008000H

; 221  : #ifdef O_LARGEFILE
; 222  :         O_LARGEFILE |
; 223  : #endif
; 224  : #ifdef O_BINARY
; 225  :         O_BINARY |
; 226  : #endif
; 227  : #ifdef O_CLOEXEC
; 228  :         (cloexec ? O_CLOEXEC : 0) |
; 229  : #endif
; 230  :         (state->mode == GZ_READ ?
; 231  :          O_RDONLY :
; 232  :          (O_WRONLY | O_CREAT |
; 233  : #ifdef O_EXCL
; 234  :           (exclusive ? O_EXCL : 0) |
; 235  : #endif
; 236  :           (state->mode == GZ_WRITE ?
; 237  :            O_TRUNC :
; 238  :            O_APPEND)));
; 239  : 
; 240  :     /* open the file with the appropriate flags (or just use fd) */
; 241  :     state->fd = fd > -1 ? fd : (

  001df	83 fb ff	 cmp	 ebx, -1
  001e2	7f 22		 jg	 SHORT $LN41@gz_open
  001e4	68 b6 01 00 00	 push	 438			; 000001b6H
  001e9	51		 push	 ecx
  001ea	ff 74 24 18	 push	 DWORD PTR _path$1$[esp+32]
  001ee	83 fb fe	 cmp	 ebx, -2			; fffffffeH
  001f1	75 08		 jne	 SHORT $LN40@gz_open
  001f3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___wopen
  001f9	eb 06		 jmp	 SHORT $LN51@gz_open
$LN40@gz_open:
  001fb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__open
$LN51@gz_open:
  00201	8b d8		 mov	 ebx, eax
  00203	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN41@gz_open:
  00206	89 5f 14	 mov	 DWORD PTR [edi+20], ebx

; 242  : #ifdef WIDECHAR
; 243  :         fd == -2 ? _wopen(path, oflag, 0666) :
; 244  : #endif
; 245  :         open((const char *)path, oflag, 0666));
; 246  :     if (state->fd == -1) {

  00209	83 fb ff	 cmp	 ebx, -1
  0020c	75 1d		 jne	 SHORT $LN33@gz_open

; 247  :         free(state->path);

  0020e	ff 77 18	 push	 DWORD PTR [edi+24]
  00211	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__free
  00217	ff d6		 call	 esi
  00219	83 c4 04	 add	 esp, 4

; 248  :         free(state);

  0021c	57		 push	 edi
  0021d	ff d6		 call	 esi
  0021f	83 c4 04	 add	 esp, 4

; 249  :         return NULL;

  00222	33 c0		 xor	 eax, eax

; 267  : }

  00224	5f		 pop	 edi
  00225	5e		 pop	 esi
  00226	5b		 pop	 ebx
  00227	8b e5		 mov	 esp, ebp
  00229	5d		 pop	 ebp
  0022a	c3		 ret	 0
$LN33@gz_open:

; 250  :     }
; 251  :     if (state->mode == GZ_APPEND) {

  0022b	83 7f 10 01	 cmp	 DWORD PTR [edi+16], 1
  0022f	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp___lseeki64
  00235	75 13		 jne	 SHORT $LN34@gz_open

; 252  :         LSEEK(state->fd, 0, SEEK_END);  /* so gzoffset() is correct */

  00237	6a 02		 push	 2
  00239	6a 00		 push	 0
  0023b	6a 00		 push	 0
  0023d	53		 push	 ebx
  0023e	ff d6		 call	 esi
  00240	83 c4 10	 add	 esp, 16			; 00000010H

; 253  :         state->mode = GZ_WRITE;         /* simplify later checks */

  00243	c7 47 10 b1 79
	00 00		 mov	 DWORD PTR [edi+16], 31153 ; 000079b1H
$LN34@gz_open:

; 254  :     }
; 255  : 
; 256  :     /* save the current position for rewinding (only if reading) */
; 257  :     if (state->mode == GZ_READ) {

  0024a	81 7f 10 4f 1c
	00 00		 cmp	 DWORD PTR [edi+16], 7247 ; 00001c4fH
  00251	75 29		 jne	 SHORT $LN36@gz_open

; 258  :         state->start = LSEEK(state->fd, 0, SEEK_CUR);

  00253	6a 01		 push	 1
  00255	6a 00		 push	 0
  00257	6a 00		 push	 0
  00259	ff 77 14	 push	 DWORD PTR [edi+20]
  0025c	ff d6		 call	 esi
  0025e	89 47 38	 mov	 DWORD PTR [edi+56], eax
  00261	83 c4 10	 add	 esp, 16			; 00000010H

; 259  :         if (state->start == -1) state->start = 0;

  00264	23 c2		 and	 eax, edx
  00266	89 57 3c	 mov	 DWORD PTR [edi+60], edx
  00269	83 f8 ff	 cmp	 eax, -1
  0026c	75 0e		 jne	 SHORT $LN36@gz_open
  0026e	c7 47 38 00 00
	00 00		 mov	 DWORD PTR [edi+56], 0
  00275	c7 47 3c 00 00
	00 00		 mov	 DWORD PTR [edi+60], 0
$LN36@gz_open:

; 260  :     }
; 261  : 
; 262  :     /* initialize stream */
; 263  :     gz_reset(state);

  0027c	8b cf		 mov	 ecx, edi
  0027e	e8 00 00 00 00	 call	 _gz_reset

; 264  : 
; 265  :     /* return stream */
; 266  :     return (gzFile)state;

  00283	8b c7		 mov	 eax, edi

; 267  : }

  00285	5f		 pop	 edi
  00286	5e		 pop	 esi
  00287	5b		 pop	 ebx
  00288	8b e5		 mov	 esp, ebp
  0028a	5d		 pop	 ebp
  0028b	c3		 ret	 0
$LN54@gz_open:
  0028c	00 00 00 00	 DD	 $LN13@gz_open
  00290	00 00 00 00	 DD	 $LN19@gz_open
  00294	00 00 00 00	 DD	 $LN18@gz_open
  00298	00 00 00 00	 DD	 $LN20@gz_open
  0029c	00 00 00 00	 DD	 $LN12@gz_open
  002a0	00 00 00 00	 DD	 $LN16@gz_open
  002a4	00 00 00 00	 DD	 $LN17@gz_open
  002a8	00 00 00 00	 DD	 $LN10@gz_open
  002ac	00 00 00 00	 DD	 $LN11@gz_open
  002b0	00 00 00 00	 DD	 $LN15@gz_open
  002b4	00 00 00 00	 DD	 $LN21@gz_open
$LN49@gz_open:
  002b8	00		 DB	 0
  002b9	0a		 DB	 10			; 0000000aH
  002ba	0a		 DB	 10			; 0000000aH
  002bb	0a		 DB	 10			; 0000000aH
  002bc	0a		 DB	 10			; 0000000aH
  002bd	0a		 DB	 10			; 0000000aH
  002be	0a		 DB	 10			; 0000000aH
  002bf	0a		 DB	 10			; 0000000aH
  002c0	0a		 DB	 10			; 0000000aH
  002c1	0a		 DB	 10			; 0000000aH
  002c2	0a		 DB	 10			; 0000000aH
  002c3	0a		 DB	 10			; 0000000aH
  002c4	0a		 DB	 10			; 0000000aH
  002c5	0a		 DB	 10			; 0000000aH
  002c6	0a		 DB	 10			; 0000000aH
  002c7	0a		 DB	 10			; 0000000aH
  002c8	0a		 DB	 10			; 0000000aH
  002c9	0a		 DB	 10			; 0000000aH
  002ca	0a		 DB	 10			; 0000000aH
  002cb	0a		 DB	 10			; 0000000aH
  002cc	0a		 DB	 10			; 0000000aH
  002cd	0a		 DB	 10			; 0000000aH
  002ce	0a		 DB	 10			; 0000000aH
  002cf	0a		 DB	 10			; 0000000aH
  002d0	0a		 DB	 10			; 0000000aH
  002d1	0a		 DB	 10			; 0000000aH
  002d2	0a		 DB	 10			; 0000000aH
  002d3	01		 DB	 1
  002d4	0a		 DB	 10			; 0000000aH
  002d5	0a		 DB	 10			; 0000000aH
  002d6	0a		 DB	 10			; 0000000aH
  002d7	0a		 DB	 10			; 0000000aH
  002d8	0a		 DB	 10			; 0000000aH
  002d9	0a		 DB	 10			; 0000000aH
  002da	0a		 DB	 10			; 0000000aH
  002db	0a		 DB	 10			; 0000000aH
  002dc	0a		 DB	 10			; 0000000aH
  002dd	0a		 DB	 10			; 0000000aH
  002de	0a		 DB	 10			; 0000000aH
  002df	02		 DB	 2
  002e0	0a		 DB	 10			; 0000000aH
  002e1	03		 DB	 3
  002e2	0a		 DB	 10			; 0000000aH
  002e3	0a		 DB	 10			; 0000000aH
  002e4	0a		 DB	 10			; 0000000aH
  002e5	0a		 DB	 10			; 0000000aH
  002e6	0a		 DB	 10			; 0000000aH
  002e7	0a		 DB	 10			; 0000000aH
  002e8	0a		 DB	 10			; 0000000aH
  002e9	0a		 DB	 10			; 0000000aH
  002ea	0a		 DB	 10			; 0000000aH
  002eb	0a		 DB	 10			; 0000000aH
  002ec	0a		 DB	 10			; 0000000aH
  002ed	0a		 DB	 10			; 0000000aH
  002ee	04		 DB	 4
  002ef	0a		 DB	 10			; 0000000aH
  002f0	0a		 DB	 10			; 0000000aH
  002f1	0a		 DB	 10			; 0000000aH
  002f2	0a		 DB	 10			; 0000000aH
  002f3	05		 DB	 5
  002f4	0a		 DB	 10			; 0000000aH
  002f5	06		 DB	 6
  002f6	0a		 DB	 10			; 0000000aH
  002f7	0a		 DB	 10			; 0000000aH
  002f8	0a		 DB	 10			; 0000000aH
  002f9	0a		 DB	 10			; 0000000aH
  002fa	0a		 DB	 10			; 0000000aH
  002fb	0a		 DB	 10			; 0000000aH
  002fc	0a		 DB	 10			; 0000000aH
  002fd	0a		 DB	 10			; 0000000aH
  002fe	0a		 DB	 10			; 0000000aH
  002ff	07		 DB	 7
  00300	0a		 DB	 10			; 0000000aH
  00301	0a		 DB	 10			; 0000000aH
  00302	0a		 DB	 10			; 0000000aH
  00303	0a		 DB	 10			; 0000000aH
  00304	08		 DB	 8
  00305	09		 DB	 9
_gz_open ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\theclashingfritz\source\repos\inifileparser\zlib\gzlib.c
;	COMDAT _gzopen
_TEXT	SEGMENT
_path$ = 8						; size = 4
_mode$ = 12						; size = 4
_gzopen	PROC						; COMDAT

; 273  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 274  :     return gz_open(path, -1, mode);

  00003	ff 75 0c	 push	 DWORD PTR _mode$[ebp]
  00006	8b 4d 08	 mov	 ecx, DWORD PTR _path$[ebp]
  00009	83 ca ff	 or	 edx, -1
  0000c	e8 00 00 00 00	 call	 _gz_open
  00011	83 c4 04	 add	 esp, 4

; 275  : }

  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
_gzopen	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\theclashingfritz\source\repos\inifileparser\zlib\gzlib.c
;	COMDAT _gzdopen
_TEXT	SEGMENT
_fd$ = 8						; size = 4
_mode$ = 12						; size = 4
_gzdopen PROC						; COMDAT

; 289  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 290  :     char *path;         /* identifier for error messages */
; 291  :     gzFile gz;
; 292  : 
; 293  :     if (fd == -1 || (path = (char *)malloc(7 + 3 * sizeof(int))) == NULL)

  00004	8b 75 08	 mov	 esi, DWORD PTR _fd$[ebp]
  00007	57		 push	 edi
  00008	83 fe ff	 cmp	 esi, -1
  0000b	74 3d		 je	 SHORT $LN3@gzdopen
  0000d	6a 13		 push	 19			; 00000013H
  0000f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  00015	8b f8		 mov	 edi, eax
  00017	83 c4 04	 add	 esp, 4
  0001a	85 ff		 test	 edi, edi
  0001c	74 2c		 je	 SHORT $LN3@gzdopen

; 294  :         return NULL;
; 295  : #if !defined(NO_snprintf) && !defined(NO_vsnprintf)
; 296  :     (void)snprintf(path, 7 + 3 * sizeof(int), "<fd:%d>", fd);

  0001e	56		 push	 esi
  0001f	68 00 00 00 00	 push	 OFFSET ??_C@_07EBNKNFJN@?$DMfd?3?$CFd?$DO?$AA@
  00024	6a 13		 push	 19			; 00000013H
  00026	57		 push	 edi
  00027	e8 00 00 00 00	 call	 _snprintf

; 297  : #else
; 298  :     sprintf(path, "<fd:%d>", fd);   /* for debugging */
; 299  : #endif
; 300  :     gz = gz_open(path, fd, mode);

  0002c	ff 75 0c	 push	 DWORD PTR _mode$[ebp]
  0002f	8b d6		 mov	 edx, esi
  00031	8b cf		 mov	 ecx, edi
  00033	e8 00 00 00 00	 call	 _gz_open

; 301  :     free(path);

  00038	57		 push	 edi
  00039	8b f0		 mov	 esi, eax
  0003b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  00041	83 c4 18	 add	 esp, 24			; 00000018H

; 302  :     return gz;

  00044	8b c6		 mov	 eax, esi

; 303  : }

  00046	5f		 pop	 edi
  00047	5e		 pop	 esi
  00048	5d		 pop	 ebp
  00049	c3		 ret	 0
$LN3@gzdopen:
  0004a	5f		 pop	 edi
  0004b	33 c0		 xor	 eax, eax
  0004d	5e		 pop	 esi
  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
_gzdopen ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\theclashingfritz\source\repos\inifileparser\zlib\gzlib.c
;	COMDAT _gzopen_w
_TEXT	SEGMENT
_path$ = 8						; size = 4
_mode$ = 12						; size = 4
_gzopen_w PROC						; COMDAT

; 310  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 311  :     return gz_open(path, -2, mode);

  00003	ff 75 0c	 push	 DWORD PTR _mode$[ebp]
  00006	8b 4d 08	 mov	 ecx, DWORD PTR _path$[ebp]
  00009	ba fe ff ff ff	 mov	 edx, -2			; fffffffeH
  0000e	e8 00 00 00 00	 call	 _gz_open
  00013	83 c4 04	 add	 esp, 4

; 312  : }

  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
_gzopen_w ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\theclashingfritz\source\repos\inifileparser\zlib\gzlib.c
;	COMDAT _gzbuffer
_TEXT	SEGMENT
_file$ = 8						; size = 4
_size$ = 12						; size = 4
_gzbuffer PROC						; COMDAT

; 319  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 320  :     gz_statep state;
; 321  : 
; 322  :     /* get internal structure and check integrity */
; 323  :     if (file == NULL)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _file$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	75 05		 jne	 SHORT $LN2@gzbuffer
$LN8@gzbuffer:

; 324  :         return -1;

  0000a	83 c8 ff	 or	 eax, -1

; 340  : }

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
$LN2@gzbuffer:

; 325  :     state = (gz_statep)file;
; 326  :     if (state->mode != GZ_READ && state->mode != GZ_WRITE)

  0000f	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00012	3d 4f 1c 00 00	 cmp	 eax, 7247		; 00001c4fH
  00017	74 07		 je	 SHORT $LN3@gzbuffer
  00019	3d b1 79 00 00	 cmp	 eax, 31153		; 000079b1H
  0001e	75 ea		 jne	 SHORT $LN8@gzbuffer
$LN3@gzbuffer:

; 327  :         return -1;
; 328  : 
; 329  :     /* make sure we haven't already allocated memory */
; 330  :     if (state->size != 0)

  00020	83 79 1c 00	 cmp	 DWORD PTR [ecx+28], 0
  00024	75 e4		 jne	 SHORT $LN8@gzbuffer

; 331  :         return -1;
; 332  : 
; 333  :     /* check and set requested size */
; 334  :     if ((size << 1) < size)

  00026	8b 55 0c	 mov	 edx, DWORD PTR _size$[ebp]
  00029	8d 04 12	 lea	 eax, DWORD PTR [edx+edx]
  0002c	3b c2		 cmp	 eax, edx
  0002e	72 da		 jb	 SHORT $LN8@gzbuffer

; 335  :         return -1;              /* need to be able to double it */
; 336  :     if (size < 2)

  00030	b8 02 00 00 00	 mov	 eax, 2
  00035	3b d0		 cmp	 edx, eax
  00037	0f 43 c2	 cmovae	 eax, edx

; 337  :         size = 2;               /* need two bytes to check magic header */
; 338  :     state->want = size;

  0003a	89 41 20	 mov	 DWORD PTR [ecx+32], eax

; 339  :     return 0;

  0003d	33 c0		 xor	 eax, eax

; 340  : }

  0003f	5d		 pop	 ebp
  00040	c3		 ret	 0
_gzbuffer ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\theclashingfritz\source\repos\inifileparser\zlib\gzlib.c
;	COMDAT _gzrewind
_TEXT	SEGMENT
_file$ = 8						; size = 4
_gzrewind PROC						; COMDAT

; 345  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	51		 push	 ecx
  00007	56		 push	 esi

; 346  :     gz_statep state;
; 347  : 
; 348  :     /* get internal structure */
; 349  :     if (file == NULL)

  00008	8b 75 08	 mov	 esi, DWORD PTR _file$[ebp]
  0000b	85 f6		 test	 esi, esi
  0000d	74 3e		 je	 SHORT $LN4@gzrewind

; 350  :         return -1;
; 351  :     state = (gz_statep)file;
; 352  : 
; 353  :     /* check that we're reading and that there's no error */
; 354  :     if (state->mode != GZ_READ ||

  0000f	81 7e 10 4f 1c
	00 00		 cmp	 DWORD PTR [esi+16], 7247 ; 00001c4fH
  00016	75 35		 jne	 SHORT $LN4@gzrewind
  00018	8b 46 5c	 mov	 eax, DWORD PTR [esi+92]
  0001b	85 c0		 test	 eax, eax
  0001d	74 05		 je	 SHORT $LN3@gzrewind
  0001f	83 f8 fb	 cmp	 eax, -5			; fffffffbH
  00022	75 29		 jne	 SHORT $LN4@gzrewind
$LN3@gzrewind:

; 357  : 
; 358  :     /* back up and start over */
; 359  :     if (LSEEK(state->fd, state->start, SEEK_SET) == -1)

  00024	6a 00		 push	 0
  00026	ff 76 3c	 push	 DWORD PTR [esi+60]
  00029	ff 76 38	 push	 DWORD PTR [esi+56]
  0002c	ff 76 14	 push	 DWORD PTR [esi+20]
  0002f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___lseeki64
  00035	23 c2		 and	 eax, edx
  00037	83 c4 10	 add	 esp, 16			; 00000010H
  0003a	83 f8 ff	 cmp	 eax, -1
  0003d	74 0e		 je	 SHORT $LN4@gzrewind

; 360  :         return -1;
; 361  :     gz_reset(state);

  0003f	8b ce		 mov	 ecx, esi
  00041	e8 00 00 00 00	 call	 _gz_reset

; 362  :     return 0;

  00046	33 c0		 xor	 eax, eax

; 363  : }

  00048	5e		 pop	 esi
  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c3		 ret	 0
$LN4@gzrewind:

; 355  :             (state->err != Z_OK && state->err != Z_BUF_ERROR))
; 356  :         return -1;

  0004d	83 c8 ff	 or	 eax, -1

; 363  : }

  00050	5e		 pop	 esi
  00051	8b e5		 mov	 esp, ebp
  00053	5d		 pop	 ebp
  00054	c3		 ret	 0
_gzrewind ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\theclashingfritz\source\repos\inifileparser\zlib\gzlib.c
;	COMDAT _gzseek64
_TEXT	SEGMENT
tv471 = -8						; size = 8
_offset$ = 8						; size = 8
_gzseek64 PROC						; COMDAT
; _file$ = ecx
; _whence$ = edx

; 370  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	57		 push	 edi

; 371  :     unsigned n;
; 372  :     z_off64_t ret;
; 373  :     gz_statep state;
; 374  : 
; 375  :     /* get internal structure and check integrity */
; 376  :     if (file == NULL)

  0000b	85 f6		 test	 esi, esi
  0000d	75 0c		 jne	 SHORT $LN2@gzseek64
$LN26@gzseek64:

; 377  :         return -1;

  0000f	83 c8 ff	 or	 eax, -1
  00012	0b d0		 or	 edx, eax

; 440  : }

  00014	5f		 pop	 edi
  00015	5e		 pop	 esi
  00016	5b		 pop	 ebx
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
$LN2@gzseek64:

; 378  :     state = (gz_statep)file;
; 379  :     if (state->mode != GZ_READ && state->mode != GZ_WRITE)

  0001b	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  0001e	81 f9 4f 1c 00
	00		 cmp	 ecx, 7247		; 00001c4fH
  00024	74 08		 je	 SHORT $LN3@gzseek64
  00026	81 f9 b1 79 00
	00		 cmp	 ecx, 31153		; 000079b1H
  0002c	75 e1		 jne	 SHORT $LN26@gzseek64
$LN3@gzseek64:

; 380  :         return -1;
; 381  : 
; 382  :     /* check that there's no error */
; 383  :     if (state->err != Z_OK && state->err != Z_BUF_ERROR)

  0002e	8b 46 5c	 mov	 eax, DWORD PTR [esi+92]
  00031	85 c0		 test	 eax, eax
  00033	74 05		 je	 SHORT $LN4@gzseek64
  00035	83 f8 fb	 cmp	 eax, -5			; fffffffbH
  00038	75 d5		 jne	 SHORT $LN26@gzseek64
$LN4@gzseek64:

; 384  :         return -1;
; 385  : 
; 386  :     /* can only seek from start or relative to current position */
; 387  :     if (whence != SEEK_SET && whence != SEEK_CUR)

  0003a	85 d2		 test	 edx, edx
  0003c	74 19		 je	 SHORT $LN20@gzseek64
  0003e	83 fa 01	 cmp	 edx, 1
  00041	75 cc		 jne	 SHORT $LN26@gzseek64

; 393  :     else if (state->seek)

  00043	83 7e 58 00	 cmp	 DWORD PTR [esi+88], 0

; 394  :         offset += state->skip;

  00047	8b 7d 08	 mov	 edi, DWORD PTR _offset$[ebp]
  0004a	8b 5d 0c	 mov	 ebx, DWORD PTR _offset$[ebp+4]
  0004d	74 14		 je	 SHORT $LN8@gzseek64
  0004f	03 7e 50	 add	 edi, DWORD PTR [esi+80]
  00052	13 5e 54	 adc	 ebx, DWORD PTR [esi+84]
  00055	eb 0c		 jmp	 SHORT $LN8@gzseek64
$LN20@gzseek64:

; 388  :         return -1;
; 389  : 
; 390  :     /* normalize offset to a SEEK_CUR specification */
; 391  :     if (whence == SEEK_SET)
; 392  :         offset -= state->x.pos;

  00057	8b 7d 08	 mov	 edi, DWORD PTR _offset$[ebp]
  0005a	2b 7e 08	 sub	 edi, DWORD PTR [esi+8]
  0005d	8b 5d 0c	 mov	 ebx, DWORD PTR _offset$[ebp+4]
  00060	1b 5e 0c	 sbb	 ebx, DWORD PTR [esi+12]
$LN8@gzseek64:

; 395  :     state->seek = 0;

  00063	c7 46 58 00 00
	00 00		 mov	 DWORD PTR [esi+88], 0

; 396  : 
; 397  :     /* if within raw area while reading, just go there */
; 398  :     if (state->mode == GZ_READ && state->how == COPY &&

  0006a	81 f9 4f 1c 00
	00		 cmp	 ecx, 7247		; 00001c4fH
  00070	0f 85 82 00 00
	00		 jne	 $LN9@gzseek64
  00076	83 7e 30 01	 cmp	 DWORD PTR [esi+48], 1
  0007a	75 7c		 jne	 SHORT $LN9@gzseek64
  0007c	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  0007f	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00082	03 d7		 add	 edx, edi
  00084	13 c3		 adc	 eax, ebx
  00086	89 45 fc	 mov	 DWORD PTR tv471[ebp+4], eax
  00089	78 6d		 js	 SHORT $LN9@gzseek64
  0008b	7f 04		 jg	 SHORT $LN21@gzseek64
  0008d	85 d2		 test	 edx, edx
  0008f	72 67		 jb	 SHORT $LN9@gzseek64
$LN21@gzseek64:

; 399  :             state->x.pos + offset >= 0) {
; 400  :         ret = LSEEK(state->fd, offset - state->x.have, SEEK_CUR);

  00091	8b cf		 mov	 ecx, edi
  00093	8b c3		 mov	 eax, ebx
  00095	2b 0e		 sub	 ecx, DWORD PTR [esi]
  00097	6a 01		 push	 1
  00099	83 d8 00	 sbb	 eax, 0
  0009c	50		 push	 eax
  0009d	51		 push	 ecx
  0009e	ff 76 14	 push	 DWORD PTR [esi+20]
  000a1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___lseeki64

; 401  :         if (ret == -1)

  000a7	23 c2		 and	 eax, edx
  000a9	83 c4 10	 add	 esp, 16			; 00000010H
  000ac	83 f8 ff	 cmp	 eax, -1
  000af	0f 84 5a ff ff
	ff		 je	 $LN26@gzseek64

; 402  :             return -1;
; 403  :         state->x.have = 0;
; 404  :         state->eof = 0;
; 405  :         state->past = 0;
; 406  :         state->seek = 0;
; 407  :         gz_error(state, Z_OK, NULL);

  000b5	6a 00		 push	 0
  000b7	33 d2		 xor	 edx, edx
  000b9	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  000bf	8b ce		 mov	 ecx, esi
  000c1	c7 46 40 00 00
	00 00		 mov	 DWORD PTR [esi+64], 0
  000c8	c7 46 44 00 00
	00 00		 mov	 DWORD PTR [esi+68], 0
  000cf	c7 46 58 00 00
	00 00		 mov	 DWORD PTR [esi+88], 0
  000d6	e8 00 00 00 00	 call	 _gz_error
  000db	83 c4 04	 add	 esp, 4

; 408  :         state->strm.avail_in = 0;

  000de	c7 46 68 00 00
	00 00		 mov	 DWORD PTR [esi+104], 0

; 409  :         state->x.pos += offset;

  000e5	01 7e 08	 add	 DWORD PTR [esi+8], edi

; 410  :         return state->x.pos;

  000e8	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  000eb	11 5e 0c	 adc	 DWORD PTR [esi+12], ebx
  000ee	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]

; 440  : }

  000f1	5f		 pop	 edi
  000f2	5e		 pop	 esi
  000f3	5b		 pop	 ebx
  000f4	8b e5		 mov	 esp, ebp
  000f6	5d		 pop	 ebp
  000f7	c3		 ret	 0
$LN9@gzseek64:

; 411  :     }
; 412  : 
; 413  :     /* calculate skip amount, rewinding if needed for back seek when reading */
; 414  :     if (offset < 0) {

  000f8	85 db		 test	 ebx, ebx
  000fa	7f 3c		 jg	 SHORT $LN14@gzseek64
  000fc	7c 04		 jl	 SHORT $LN22@gzseek64
  000fe	85 ff		 test	 edi, edi
  00100	73 36		 jae	 SHORT $LN14@gzseek64
$LN22@gzseek64:

; 415  :         if (state->mode != GZ_READ)         /* writing -- can't go backwards */

  00102	81 f9 4f 1c 00
	00		 cmp	 ecx, 7247		; 00001c4fH
  00108	0f 85 01 ff ff
	ff		 jne	 $LN26@gzseek64

; 416  :             return -1;
; 417  :         offset += state->x.pos;

  0010e	03 7e 08	 add	 edi, DWORD PTR [esi+8]
  00111	13 5e 0c	 adc	 ebx, DWORD PTR [esi+12]

; 418  :         if (offset < 0)                     /* before start of file! */

  00114	85 db		 test	 ebx, ebx
  00116	7f 0e		 jg	 SHORT $LN13@gzseek64
  00118	0f 8c f1 fe ff
	ff		 jl	 $LN26@gzseek64
  0011e	85 ff		 test	 edi, edi
  00120	0f 82 e9 fe ff
	ff		 jb	 $LN26@gzseek64
$LN13@gzseek64:

; 419  :             return -1;
; 420  :         if (gzrewind(file) == -1)           /* rewind, then skip to offset */

  00126	56		 push	 esi
  00127	e8 00 00 00 00	 call	 _gzrewind
  0012c	83 c4 04	 add	 esp, 4
  0012f	83 f8 ff	 cmp	 eax, -1
  00132	0f 84 d7 fe ff
	ff		 je	 $LN26@gzseek64
$LN14@gzseek64:

; 421  :             return -1;
; 422  :     }
; 423  : 
; 424  :     /* if reading, skip what's in output buffer (one less gzgetc() check) */
; 425  :     if (state->mode == GZ_READ) {

  00138	81 7e 10 4f 1c
	00 00		 cmp	 DWORD PTR [esi+16], 7247 ; 00001c4fH
  0013f	75 27		 jne	 SHORT $LN15@gzseek64

; 426  :         n = GT_OFF(state->x.have) || (z_off64_t)state->x.have > offset ?

  00141	8b 06		 mov	 eax, DWORD PTR [esi]
  00143	33 c9		 xor	 ecx, ecx
  00145	3b cb		 cmp	 ecx, ebx
  00147	7f 0a		 jg	 SHORT $LN18@gzseek64
  00149	7c 04		 jl	 SHORT $LN24@gzseek64
  0014b	3b c7		 cmp	 eax, edi
  0014d	77 04		 ja	 SHORT $LN18@gzseek64
$LN24@gzseek64:
  0014f	8b c8		 mov	 ecx, eax
  00151	eb 02		 jmp	 SHORT $LN19@gzseek64
$LN18@gzseek64:
  00153	8b cf		 mov	 ecx, edi
$LN19@gzseek64:

; 427  :             (unsigned)offset : state->x.have;
; 428  :         state->x.have -= n;
; 429  :         state->x.next += n;

  00155	01 4e 04	 add	 DWORD PTR [esi+4], ecx
  00158	2b c1		 sub	 eax, ecx

; 430  :         state->x.pos += n;

  0015a	01 4e 08	 add	 DWORD PTR [esi+8], ecx
  0015d	89 06		 mov	 DWORD PTR [esi], eax
  0015f	83 56 0c 00	 adc	 DWORD PTR [esi+12], 0

; 431  :         offset -= n;

  00163	2b f9		 sub	 edi, ecx
  00165	83 db 00	 sbb	 ebx, 0
$LN15@gzseek64:

; 432  :     }
; 433  : 
; 434  :     /* request skip (if not zero) */
; 435  :     if (offset) {

  00168	8b c7		 mov	 eax, edi
  0016a	0b c3		 or	 eax, ebx
  0016c	74 0d		 je	 SHORT $LN16@gzseek64

; 436  :         state->seek = 1;

  0016e	c7 46 58 01 00
	00 00		 mov	 DWORD PTR [esi+88], 1

; 437  :         state->skip = offset;

  00175	89 7e 50	 mov	 DWORD PTR [esi+80], edi
  00178	89 5e 54	 mov	 DWORD PTR [esi+84], ebx
$LN16@gzseek64:

; 438  :     }
; 439  :     return state->x.pos + offset;

  0017b	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0017e	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]
  00181	03 c7		 add	 eax, edi

; 440  : }

  00183	5f		 pop	 edi
  00184	5e		 pop	 esi
  00185	13 d3		 adc	 edx, ebx
  00187	5b		 pop	 ebx
  00188	8b e5		 mov	 esp, ebp
  0018a	5d		 pop	 ebp
  0018b	c3		 ret	 0
_gzseek64 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\theclashingfritz\source\repos\inifileparser\zlib\gzlib.c
;	COMDAT _gzseek
_TEXT	SEGMENT
_file$ = 8						; size = 4
_offset$ = 12						; size = 4
_whence$ = 16						; size = 4
_gzseek	PROC						; COMDAT

; 447  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	51		 push	 ecx

; 448  :     z_off64_t ret;
; 449  : 
; 450  :     ret = gzseek64(file, (z_off64_t)offset, whence);

  00007	8b 45 0c	 mov	 eax, DWORD PTR _offset$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _file$[ebp]
  0000d	99		 cdq
  0000e	56		 push	 esi
  0000f	52		 push	 edx
  00010	8b 55 10	 mov	 edx, DWORD PTR _whence$[ebp]
  00013	50		 push	 eax
  00014	e8 00 00 00 00	 call	 _gzseek64
  00019	8b c8		 mov	 ecx, eax
  0001b	8b f2		 mov	 esi, edx

; 451  :     return ret == (z_off_t)ret ? (z_off_t)ret : -1;

  0001d	99		 cdq
  0001e	83 c4 08	 add	 esp, 8
  00021	3b c8		 cmp	 ecx, eax
  00023	75 0b		 jne	 SHORT $LN3@gzseek
  00025	3b f2		 cmp	 esi, edx
  00027	75 07		 jne	 SHORT $LN3@gzseek
  00029	8b c1		 mov	 eax, ecx

; 452  : }

  0002b	5e		 pop	 esi
  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
$LN3@gzseek:

; 451  :     return ret == (z_off_t)ret ? (z_off_t)ret : -1;

  00030	83 c8 ff	 or	 eax, -1

; 452  : }

  00033	5e		 pop	 esi
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
_gzseek	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\theclashingfritz\source\repos\inifileparser\zlib\gzlib.c
;	COMDAT _gztell64
_TEXT	SEGMENT
tv73 = -8						; size = 8
_gztell64 PROC						; COMDAT
; _file$ = ecx

; 457  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 458  :     gz_statep state;
; 459  : 
; 460  :     /* get internal structure and check integrity */
; 461  :     if (file == NULL)

  00006	85 c9		 test	 ecx, ecx
  00008	75 09		 jne	 SHORT $LN2@gztell64
$LN7@gztell64:

; 462  :         return -1;

  0000a	83 c8 ff	 or	 eax, -1
  0000d	0b d0		 or	 edx, eax

; 469  : }

  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
$LN2@gztell64:

; 463  :     state = (gz_statep)file;
; 464  :     if (state->mode != GZ_READ && state->mode != GZ_WRITE)

  00013	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00016	3d 4f 1c 00 00	 cmp	 eax, 7247		; 00001c4fH
  0001b	74 07		 je	 SHORT $LN3@gztell64
  0001d	3d b1 79 00 00	 cmp	 eax, 31153		; 000079b1H
  00022	75 e6		 jne	 SHORT $LN7@gztell64
$LN3@gztell64:

; 465  :         return -1;
; 466  : 
; 467  :     /* return position */
; 468  :     return state->x.pos + (state->seek ? state->skip : 0);

  00024	83 79 58 00	 cmp	 DWORD PTR [ecx+88], 0
  00028	56		 push	 esi
  00029	74 15		 je	 SHORT $LN5@gztell64
  0002b	8b 51 50	 mov	 edx, DWORD PTR [ecx+80]
  0002e	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00031	8b 71 54	 mov	 esi, DWORD PTR [ecx+84]
  00034	03 c2		 add	 eax, edx
  00036	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00039	13 d6		 adc	 edx, esi
  0003b	5e		 pop	 esi

; 469  : }

  0003c	8b e5		 mov	 esp, ebp
  0003e	5d		 pop	 ebp
  0003f	c3		 ret	 0
$LN5@gztell64:

; 465  :         return -1;
; 466  : 
; 467  :     /* return position */
; 468  :     return state->x.pos + (state->seek ? state->skip : 0);

  00040	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00043	0f 57 c0	 xorps	 xmm0, xmm0
  00046	66 0f 13 45 f8	 movlpd	 QWORD PTR tv73[ebp], xmm0
  0004b	8b 55 f8	 mov	 edx, DWORD PTR tv73[ebp]
  0004e	03 c2		 add	 eax, edx
  00050	8b 75 fc	 mov	 esi, DWORD PTR tv73[ebp+4]
  00053	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00056	13 d6		 adc	 edx, esi
  00058	5e		 pop	 esi

; 469  : }

  00059	8b e5		 mov	 esp, ebp
  0005b	5d		 pop	 ebp
  0005c	c3		 ret	 0
_gztell64 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\theclashingfritz\source\repos\inifileparser\zlib\gzlib.c
;	COMDAT _gztell
_TEXT	SEGMENT
_file$ = 8						; size = 4
_gztell	PROC						; COMDAT

; 474  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 475  :     z_off64_t ret;
; 476  : 
; 477  :     ret = gztell64(file);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _file$[ebp]
  00006	56		 push	 esi
  00007	e8 00 00 00 00	 call	 _gztell64
  0000c	8b c8		 mov	 ecx, eax
  0000e	8b f2		 mov	 esi, edx

; 478  :     return ret == (z_off_t)ret ? (z_off_t)ret : -1;

  00010	99		 cdq
  00011	3b c8		 cmp	 ecx, eax
  00013	75 09		 jne	 SHORT $LN3@gztell
  00015	3b f2		 cmp	 esi, edx
  00017	75 05		 jne	 SHORT $LN3@gztell
  00019	8b c1		 mov	 eax, ecx

; 479  : }

  0001b	5e		 pop	 esi
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
$LN3@gztell:

; 478  :     return ret == (z_off_t)ret ? (z_off_t)ret : -1;

  0001e	83 c8 ff	 or	 eax, -1

; 479  : }

  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
_gztell	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\theclashingfritz\source\repos\inifileparser\zlib\gzlib.c
;	COMDAT _gzoffset64
_TEXT	SEGMENT
_gzoffset64 PROC					; COMDAT
; _file$ = ecx

; 484  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 485  :     z_off64_t offset;
; 486  :     gz_statep state;
; 487  : 
; 488  :     /* get internal structure and check integrity */
; 489  :     if (file == NULL)

  00003	85 f6		 test	 esi, esi
  00005	75 07		 jne	 SHORT $LN2@gzoffset64
$LN7@gzoffset64:

; 490  :         return -1;

  00007	83 c8 ff	 or	 eax, -1
  0000a	0b d0		 or	 edx, eax

; 501  :     return offset;
; 502  : }

  0000c	5e		 pop	 esi
  0000d	c3		 ret	 0
$LN2@gzoffset64:

; 491  :     state = (gz_statep)file;
; 492  :     if (state->mode != GZ_READ && state->mode != GZ_WRITE)

  0000e	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00011	3d 4f 1c 00 00	 cmp	 eax, 7247		; 00001c4fH
  00016	74 07		 je	 SHORT $LN3@gzoffset64
  00018	3d b1 79 00 00	 cmp	 eax, 31153		; 000079b1H
  0001d	75 e8		 jne	 SHORT $LN7@gzoffset64
$LN3@gzoffset64:

; 493  :         return -1;
; 494  : 
; 495  :     /* compute and return effective offset in file */
; 496  :     offset = LSEEK(state->fd, 0, SEEK_CUR);

  0001f	6a 01		 push	 1
  00021	6a 00		 push	 0
  00023	6a 00		 push	 0
  00025	ff 76 14	 push	 DWORD PTR [esi+20]
  00028	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___lseeki64

; 497  :     if (offset == -1)

  0002e	8b c8		 mov	 ecx, eax
  00030	83 c4 10	 add	 esp, 16			; 00000010H
  00033	23 ca		 and	 ecx, edx
  00035	83 f9 ff	 cmp	 ecx, -1
  00038	74 cd		 je	 SHORT $LN7@gzoffset64

; 498  :         return -1;
; 499  :     if (state->mode == GZ_READ)             /* reading */

  0003a	81 7e 10 4f 1c
	00 00		 cmp	 DWORD PTR [esi+16], 7247 ; 00001c4fH
  00041	75 06		 jne	 SHORT $LN1@gzoffset64

; 500  :         offset -= state->strm.avail_in;     /* don't count buffered input */

  00043	2b 46 68	 sub	 eax, DWORD PTR [esi+104]
  00046	83 da 00	 sbb	 edx, 0
$LN1@gzoffset64:

; 501  :     return offset;
; 502  : }

  00049	5e		 pop	 esi
  0004a	c3		 ret	 0
_gzoffset64 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\theclashingfritz\source\repos\inifileparser\zlib\gzlib.c
;	COMDAT _gzoffset
_TEXT	SEGMENT
_file$ = 8						; size = 4
_gzoffset PROC						; COMDAT

; 507  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	51		 push	 ecx

; 508  :     z_off64_t ret;
; 509  : 
; 510  :     ret = gzoffset64(file);

  00007	8b 4d 08	 mov	 ecx, DWORD PTR _file$[ebp]
  0000a	56		 push	 esi
  0000b	e8 00 00 00 00	 call	 _gzoffset64
  00010	8b c8		 mov	 ecx, eax
  00012	8b f2		 mov	 esi, edx

; 511  :     return ret == (z_off_t)ret ? (z_off_t)ret : -1;

  00014	99		 cdq
  00015	3b c8		 cmp	 ecx, eax
  00017	75 0b		 jne	 SHORT $LN3@gzoffset
  00019	3b f2		 cmp	 esi, edx
  0001b	75 07		 jne	 SHORT $LN3@gzoffset
  0001d	8b c1		 mov	 eax, ecx

; 512  : }

  0001f	5e		 pop	 esi
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
$LN3@gzoffset:

; 511  :     return ret == (z_off_t)ret ? (z_off_t)ret : -1;

  00024	83 c8 ff	 or	 eax, -1

; 512  : }

  00027	5e		 pop	 esi
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c3		 ret	 0
_gzoffset ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\theclashingfritz\source\repos\inifileparser\zlib\gzlib.c
;	COMDAT _gzeof
_TEXT	SEGMENT
_file$ = 8						; size = 4
_gzeof	PROC						; COMDAT

; 517  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 518  :     gz_statep state;
; 519  : 
; 520  :     /* get internal structure and check integrity */
; 521  :     if (file == NULL)

  00003	8b 45 08	 mov	 eax, DWORD PTR _file$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	75 04		 jne	 SHORT $LN2@gzeof
$LN8@gzeof:

; 522  :         return 0;

  0000a	33 c0		 xor	 eax, eax

; 529  : }

  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
$LN2@gzeof:

; 523  :     state = (gz_statep)file;
; 524  :     if (state->mode != GZ_READ && state->mode != GZ_WRITE)

  0000e	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00011	81 f9 4f 1c 00
	00		 cmp	 ecx, 7247		; 00001c4fH
  00017	75 f1		 jne	 SHORT $LN8@gzeof

; 525  :         return 0;
; 526  : 
; 527  :     /* return end-of-file state */
; 528  :     return state->mode == GZ_READ ? state->past : 0;

  00019	8b 40 44	 mov	 eax, DWORD PTR [eax+68]

; 529  : }

  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
_gzeof	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\theclashingfritz\source\repos\inifileparser\zlib\gzlib.c
;	COMDAT _gzerror
_TEXT	SEGMENT
_file$ = 8						; size = 4
_errnum$ = 12						; size = 4
_gzerror PROC						; COMDAT

; 535  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 536  :     gz_statep state;
; 537  : 
; 538  :     /* get internal structure and check integrity */
; 539  :     if (file == NULL)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _file$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	75 04		 jne	 SHORT $LN2@gzerror
$LN10@gzerror:

; 540  :         return NULL;

  0000a	33 c0		 xor	 eax, eax

; 549  :                                        (state->msg == NULL ? "" : state->msg);
; 550  : }

  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
$LN2@gzerror:

; 541  :     state = (gz_statep)file;
; 542  :     if (state->mode != GZ_READ && state->mode != GZ_WRITE)

  0000e	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00011	3d 4f 1c 00 00	 cmp	 eax, 7247		; 00001c4fH
  00016	74 07		 je	 SHORT $LN3@gzerror
  00018	3d b1 79 00 00	 cmp	 eax, 31153		; 000079b1H
  0001d	75 eb		 jne	 SHORT $LN10@gzerror
$LN3@gzerror:

; 543  :         return NULL;
; 544  : 
; 545  :     /* return error information */
; 546  :     if (errnum != NULL)

  0001f	8b 55 0c	 mov	 edx, DWORD PTR _errnum$[ebp]
  00022	85 d2		 test	 edx, edx
  00024	74 05		 je	 SHORT $LN4@gzerror

; 547  :         *errnum = state->err;

  00026	8b 41 5c	 mov	 eax, DWORD PTR [ecx+92]
  00029	89 02		 mov	 DWORD PTR [edx], eax
$LN4@gzerror:

; 548  :     return state->err == Z_MEM_ERROR ? "out of memory" :

  0002b	83 79 5c fc	 cmp	 DWORD PTR [ecx+92], -4	; fffffffcH
  0002f	75 07		 jne	 SHORT $LN8@gzerror
  00031	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0O@BNNCBLEN@out?5of?5memory?$AA@

; 549  :                                        (state->msg == NULL ? "" : state->msg);
; 550  : }

  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
$LN8@gzerror:

; 548  :     return state->err == Z_MEM_ERROR ? "out of memory" :

  00038	8b 49 60	 mov	 ecx, DWORD PTR [ecx+96]
  0003b	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
  00040	85 c9		 test	 ecx, ecx
  00042	0f 45 c1	 cmovne	 eax, ecx

; 549  :                                        (state->msg == NULL ? "" : state->msg);
; 550  : }

  00045	5d		 pop	 ebp
  00046	c3		 ret	 0
_gzerror ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\theclashingfritz\source\repos\inifileparser\zlib\gzlib.c
;	COMDAT _gzclearerr
_TEXT	SEGMENT
_file$ = 8						; size = 4
_gzclearerr PROC					; COMDAT

; 555  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 556  :     gz_statep state;
; 557  : 
; 558  :     /* get internal structure and check integrity */
; 559  :     if (file == NULL)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _file$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 11		 je	 SHORT $LN1@gzclearerr

; 560  :         return;
; 561  :     state = (gz_statep)file;
; 562  :     if (state->mode != GZ_READ && state->mode != GZ_WRITE)

  0000a	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  0000d	3d 4f 1c 00 00	 cmp	 eax, 7247		; 00001c4fH
  00012	74 09		 je	 SHORT $LN6@gzclearerr
  00014	3d b1 79 00 00	 cmp	 eax, 31153		; 000079b1H
  00019	74 10		 je	 SHORT $LN4@gzclearerr
$LN1@gzclearerr:

; 571  : }

  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
$LN6@gzclearerr:

; 563  :         return;
; 564  : 
; 565  :     /* clear error and end-of-file */
; 566  :     if (state->mode == GZ_READ) {
; 567  :         state->eof = 0;

  0001d	c7 41 40 00 00
	00 00		 mov	 DWORD PTR [ecx+64], 0

; 568  :         state->past = 0;

  00024	c7 41 44 00 00
	00 00		 mov	 DWORD PTR [ecx+68], 0
$LN4@gzclearerr:

; 569  :     }
; 570  :     gz_error(state, Z_OK, NULL);

  0002b	c7 45 08 00 00
	00 00		 mov	 DWORD PTR _file$[ebp], 0
  00032	33 d2		 xor	 edx, edx

; 571  : }

  00034	5d		 pop	 ebp

; 569  :     }
; 570  :     gz_error(state, Z_OK, NULL);

  00035	e9 00 00 00 00	 jmp	 _gz_error
_gzclearerr ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\theclashingfritz\source\repos\inifileparser\zlib\gzlib.c
;	COMDAT _gz_error
_TEXT	SEGMENT
tv144 = 8						; size = 4
_msg$ = 8						; size = 4
_gz_error PROC						; COMDAT
; _state$ = ecx
; _err$ = edx

; 583  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	57		 push	 edi
  00008	8b fa		 mov	 edi, edx

; 584  :     /* free previously allocated message and clear */
; 585  :     if (state->msg != NULL) {

  0000a	8b 46 60	 mov	 eax, DWORD PTR [esi+96]
  0000d	85 c0		 test	 eax, eax
  0000f	74 17		 je	 SHORT $LN2@gz_error

; 586  :         if (state->err != Z_MEM_ERROR)

  00011	83 7e 5c fc	 cmp	 DWORD PTR [esi+92], -4	; fffffffcH
  00015	74 0a		 je	 SHORT $LN3@gz_error

; 587  :             free(state->msg);

  00017	50		 push	 eax
  00018	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  0001e	83 c4 04	 add	 esp, 4
$LN3@gz_error:

; 588  :         state->msg = NULL;

  00021	c7 46 60 00 00
	00 00		 mov	 DWORD PTR [esi+96], 0
$LN2@gz_error:

; 589  :     }
; 590  : 
; 591  :     /* if fatal, set state->x.have to 0 so that the gzgetc() macro fails */
; 592  :     if (err != Z_OK && err != Z_BUF_ERROR)

  00028	85 ff		 test	 edi, edi
  0002a	74 0b		 je	 SHORT $LN4@gz_error
  0002c	83 ff fb	 cmp	 edi, -5			; fffffffbH
  0002f	74 06		 je	 SHORT $LN4@gz_error

; 593  :         state->x.have = 0;

  00031	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
$LN4@gz_error:

; 594  : 
; 595  :     /* set error code, and if no message, then done */
; 596  :     state->err = err;
; 597  :     if (msg == NULL)

  00037	8b 5d 08	 mov	 ebx, DWORD PTR _msg$[ebp]
  0003a	89 7e 5c	 mov	 DWORD PTR [esi+92], edi
  0003d	85 db		 test	 ebx, ebx
  0003f	0f 84 87 00 00
	00		 je	 $LN1@gz_error

; 598  :         return;
; 599  : 
; 600  :     /* for an out of memory error, return literal string when requested */
; 601  :     if (err == Z_MEM_ERROR)

  00045	83 ff fc	 cmp	 edi, -4			; fffffffcH
  00048	0f 84 7e 00 00
	00		 je	 $LN1@gz_error

; 602  :         return;
; 603  : 
; 604  :     /* construct error message with path */
; 605  :     if ((state->msg = (char *)malloc(strlen(state->path) + strlen(msg) + 3)) ==

  0004e	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00051	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
$LL9@gz_error:
  00054	8a 01		 mov	 al, BYTE PTR [ecx]
  00056	41		 inc	 ecx
  00057	84 c0		 test	 al, al
  00059	75 f9		 jne	 SHORT $LL9@gz_error
  0005b	2b ca		 sub	 ecx, edx
  0005d	8b d3		 mov	 edx, ebx
  0005f	8d 7a 01	 lea	 edi, DWORD PTR [edx+1]
$LL10@gz_error:
  00062	8a 02		 mov	 al, BYTE PTR [edx]
  00064	42		 inc	 edx
  00065	84 c0		 test	 al, al
  00067	75 f9		 jne	 SHORT $LL10@gz_error
  00069	2b d7		 sub	 edx, edi
  0006b	8d 41 03	 lea	 eax, DWORD PTR [ecx+3]
  0006e	03 c2		 add	 eax, edx
  00070	50		 push	 eax
  00071	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  00077	83 c4 04	 add	 esp, 4
  0007a	89 45 08	 mov	 DWORD PTR tv144[ebp], eax
  0007d	89 46 60	 mov	 DWORD PTR [esi+96], eax
  00080	85 c0		 test	 eax, eax
  00082	75 0c		 jne	 SHORT $LN7@gz_error

; 606  :             NULL) {
; 607  :         state->err = Z_MEM_ERROR;

  00084	c7 46 5c fc ff
	ff ff		 mov	 DWORD PTR [esi+92], -4	; fffffffcH

; 612  :                    "%s%s%s", state->path, ": ", msg);
; 613  : #else
; 614  :     strcpy(state->msg, state->path);
; 615  :     strcat(state->msg, ": ");
; 616  :     strcat(state->msg, msg);
; 617  : #endif
; 618  : }

  0008b	5f		 pop	 edi
  0008c	5e		 pop	 esi
  0008d	5b		 pop	 ebx
  0008e	5d		 pop	 ebp
  0008f	c3		 ret	 0
$LN7@gz_error:

; 608  :         return;
; 609  :     }
; 610  : #if !defined(NO_snprintf) && !defined(NO_vsnprintf)
; 611  :     (void)snprintf(state->msg, strlen(state->path) + strlen(msg) + 3,

  00090	8b 76 18	 mov	 esi, DWORD PTR [esi+24]
  00093	8b ce		 mov	 ecx, esi
  00095	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
$LL11@gz_error:
  00098	8a 01		 mov	 al, BYTE PTR [ecx]
  0009a	41		 inc	 ecx
  0009b	84 c0		 test	 al, al
  0009d	75 f9		 jne	 SHORT $LL11@gz_error
  0009f	2b ca		 sub	 ecx, edx
  000a1	8b d3		 mov	 edx, ebx
  000a3	8d 7a 01	 lea	 edi, DWORD PTR [edx+1]
$LL12@gz_error:
  000a6	8a 02		 mov	 al, BYTE PTR [edx]
  000a8	42		 inc	 edx
  000a9	84 c0		 test	 al, al
  000ab	75 f9		 jne	 SHORT $LL12@gz_error
  000ad	53		 push	 ebx
  000ae	68 00 00 00 00	 push	 OFFSET ??_C@_02LMMGGCAJ@?3?5?$AA@
  000b3	56		 push	 esi
  000b4	2b d7		 sub	 edx, edi
  000b6	8d 41 03	 lea	 eax, DWORD PTR [ecx+3]
  000b9	68 00 00 00 00	 push	 OFFSET ??_C@_06DIJPEION@?$CFs?$CFs?$CFs?$AA@
  000be	03 c2		 add	 eax, edx
  000c0	50		 push	 eax
  000c1	ff 75 08	 push	 DWORD PTR tv144[ebp]
  000c4	e8 00 00 00 00	 call	 _snprintf
  000c9	83 c4 18	 add	 esp, 24			; 00000018H
$LN1@gz_error:

; 612  :                    "%s%s%s", state->path, ": ", msg);
; 613  : #else
; 614  :     strcpy(state->msg, state->path);
; 615  :     strcat(state->msg, ": ");
; 616  :     strcat(state->msg, msg);
; 617  : #endif
; 618  : }

  000cc	5f		 pop	 edi
  000cd	5e		 pop	 esi
  000ce	5b		 pop	 ebx
  000cf	5d		 pop	 ebp
  000d0	c3		 ret	 0
_gz_error ENDP
_TEXT	ENDS
END
