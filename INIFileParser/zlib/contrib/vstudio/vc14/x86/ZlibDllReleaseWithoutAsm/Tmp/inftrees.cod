; Listing generated by Microsoft (R) Optimizing Compiler Version 19.11.25508.2 

	TITLE	c:\users\theclashingfritz\source\repos\inifileparser\zlib\inftrees.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

	ORG $+2
?dext@?1??inflate_table@@9@9 DW 010H			; `inflate_table'::`2'::dext
	DW	010H
	DW	010H
	DW	010H
	DW	011H
	DW	011H
	DW	012H
	DW	012H
	DW	013H
	DW	013H
	DW	014H
	DW	014H
	DW	015H
	DW	015H
	DW	016H
	DW	016H
	DW	017H
	DW	017H
	DW	018H
	DW	018H
	DW	019H
	DW	019H
	DW	01aH
	DW	01aH
	DW	01bH
	DW	01bH
	DW	01cH
	DW	01cH
	DW	01dH
	DW	01dH
	DW	040H
	DW	040H
?lext@?1??inflate_table@@9@9 DW 010H			; `inflate_table'::`2'::lext
	DW	010H
	DW	010H
	DW	010H
	DW	010H
	DW	010H
	DW	010H
	DW	010H
	DW	011H
	DW	011H
	DW	011H
	DW	011H
	DW	012H
	DW	012H
	DW	012H
	DW	012H
	DW	013H
	DW	013H
	DW	013H
	DW	013H
	DW	014H
	DW	014H
	DW	014H
	DW	014H
	DW	015H
	DW	015H
	DW	015H
	DW	015H
	DW	010H
	DW	04dH
	DW	0caH
	ORG $+2
?lbase@?1??inflate_table@@9@9 DW 03H			; `inflate_table'::`2'::lbase
	DW	04H
	DW	05H
	DW	06H
	DW	07H
	DW	08H
	DW	09H
	DW	0aH
	DW	0bH
	DW	0dH
	DW	0fH
	DW	011H
	DW	013H
	DW	017H
	DW	01bH
	DW	01fH
	DW	023H
	DW	02bH
	DW	033H
	DW	03bH
	DW	043H
	DW	053H
	DW	063H
	DW	073H
	DW	083H
	DW	0a3H
	DW	0c3H
	DW	0e3H
	DW	0102H
	DW	00H
	DW	00H
	ORG $+2
?dbase@?1??inflate_table@@9@9 DW 01H			; `inflate_table'::`2'::dbase
	DW	02H
	DW	03H
	DW	04H
	DW	05H
	DW	07H
	DW	09H
	DW	0dH
	DW	011H
	DW	019H
	DW	021H
	DW	031H
	DW	041H
	DW	061H
	DW	081H
	DW	0c1H
	DW	0101H
	DW	0181H
	DW	0201H
	DW	0301H
	DW	0401H
	DW	0601H
	DW	0801H
	DW	0c01H
	DW	01001H
	DW	01801H
	DW	02001H
	DW	03001H
	DW	04001H
	DW	06001H
	DW	00H
	DW	00H
PUBLIC	_inflate_table
; Function compile flags: /Ogtp
; File c:\users\theclashingfritz\source\repos\inifileparser\zlib\inftrees.c
;	COMDAT _inflate_table
_TEXT	SEGMENT
_offs$ = -128						; size = 32
_count$ = -96						; size = 32
_min$2$ = -64						; size = 4
_mask$1$ = -60						; size = 4
tv1648 = -56						; size = 4
tv1641 = -56						; size = 4
_low$1$ = -52						; size = 4
_used$1$ = -48						; size = 4
_type$1$ = -44						; size = 4
_curr$1$ = -40						; size = 4
tv1649 = -40						; size = 4
_lens$1$ = -36						; size = 4
_base$1$ = -32						; size = 4
_extra$1$ = -28						; size = 4
_match$1$ = -24						; size = 4
_root$3$ = -20						; size = 4
_len$2$ = -16						; size = 4
_huff$1$ = -12						; size = 4
_next$1$ = -8						; size = 4
_drop$1$ = -4						; size = 4
_here$ = 8						; size = 4
_codes$ = 8						; size = 4
_table$ = 12						; size = 4
_bits$ = 16						; size = 4
_work$ = 20						; size = 4
_inflate_table PROC					; COMDAT
; _type$ = ecx
; _lens$ = edx

; 39   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 80 00 00
	00		 sub	 esp, 128		; 00000080H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 40   :     unsigned len;               /* a code's length in bits */
; 41   :     unsigned sym;               /* index of code symbols */
; 42   :     unsigned min, max;          /* minimum and maximum code lengths */
; 43   :     unsigned root;              /* number of index bits for root table */
; 44   :     unsigned curr;              /* number of index bits for current table */
; 45   :     unsigned drop;              /* code bits to drop for sub-table */
; 46   :     int left;                   /* number of prefix codes available */
; 47   :     unsigned used;              /* code entries in table used */
; 48   :     unsigned huff;              /* Huffman code */
; 49   :     unsigned incr;              /* for incrementing code, index */
; 50   :     unsigned fill;              /* index for replicating entries */
; 51   :     unsigned low;               /* low bits for current root entry */
; 52   :     unsigned mask;              /* mask for low root bits */
; 53   :     code here;                  /* table entry for duplication */
; 54   :     code FAR *next;             /* next available space in table */
; 55   :     const unsigned short FAR *base;     /* base value table to use */
; 56   :     const unsigned short FAR *extra;    /* extra bits table to use */
; 57   :     unsigned match;             /* use base and extra for symbol >= match */
; 58   :     unsigned short count[MAXBITS+1];    /* number of codes of each length */
; 59   :     unsigned short offs[MAXBITS+1];     /* offsets in table for each length */
; 60   :     static const unsigned short lbase[31] = { /* Length codes 257..285 base */
; 61   :         3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,
; 62   :         35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0};
; 63   :     static const unsigned short lext[31] = { /* Length codes 257..285 extra */
; 64   :         16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18,
; 65   :         19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 77, 202};
; 66   :     static const unsigned short dbase[32] = { /* Distance codes 0..29 base */
; 67   :         1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,
; 68   :         257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,
; 69   :         8193, 12289, 16385, 24577, 0, 0};
; 70   :     static const unsigned short dext[32] = { /* Distance codes 0..29 extra */
; 71   :         16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22,
; 72   :         23, 23, 24, 24, 25, 25, 26, 26, 27, 27,
; 73   :         28, 28, 29, 29, 64, 64};
; 74   : 
; 75   :     /*
; 76   :        Process a set of code lengths to create a canonical Huffman code.  The
; 77   :        code lengths are lens[0..codes-1].  Each length corresponds to the
; 78   :        symbols 0..codes-1.  The Huffman code is generated by first sorting the
; 79   :        symbols by length from short to long, and retaining the symbol order
; 80   :        for codes with equal lengths.  Then the code starts with all zero bits
; 81   :        for the first code of the shortest length, and the codes are integer
; 82   :        increments for the same length, and zeros are appended as the length
; 83   :        increases.  For the deflate format, these bits are stored backwards
; 84   :        from their more natural integer increment ordering, and so when the
; 85   :        decoding tables are built in the large loop below, the integer codes
; 86   :        are incremented backwards.
; 87   : 
; 88   :        This routine assumes, but does not check, that all of the entries in
; 89   :        lens[] are in the range 0..MAXBITS.  The caller must assure this.
; 90   :        1..MAXBITS is interpreted as that code length.  zero means that that
; 91   :        symbol does not occur in this code.
; 92   : 
; 93   :        The codes are sorted by computing a count of codes for each length,
; 94   :        creating from that a table of starting indices for each length in the
; 95   :        sorted table, and then entering the symbols in order in the sorted
; 96   :        table.  The sorted table is work[], with that space being provided by
; 97   :        the caller.
; 98   : 
; 99   :        The length counts are used for other purposes as well, i.e. finding
; 100  :        the minimum and maximum length codes, determining if there are any
; 101  :        codes at all, checking for a valid set of lengths, and looking ahead
; 102  :        at length counts to determine sub-table sizes when building the
; 103  :        decoding tables.
; 104  :      */
; 105  : 
; 106  :     /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */
; 107  :     for (len = 0; len <= MAXBITS; len++)
; 108  :         count[len] = 0;
; 109  :     for (sym = 0; sym < codes; sym++)

  0000c	8b 7d 08	 mov	 edi, DWORD PTR _codes$[ebp]
  0000f	0f 57 c0	 xorps	 xmm0, xmm0
  00012	8b c2		 mov	 eax, edx
  00014	89 4d d4	 mov	 DWORD PTR _type$1$[ebp], ecx
  00017	33 f6		 xor	 esi, esi
  00019	89 45 dc	 mov	 DWORD PTR _lens$1$[ebp], eax
  0001c	0f 11 45 a0	 movups	 XMMWORD PTR _count$[ebp], xmm0
  00020	0f 11 45 b0	 movups	 XMMWORD PTR _count$[ebp+16], xmm0
  00024	85 ff		 test	 edi, edi
  00026	74 18		 je	 SHORT $LN6@inflate_ta
  00028	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL7@inflate_ta:

; 110  :         count[lens[sym]]++;

  00030	0f b7 04 70	 movzx	 eax, WORD PTR [eax+esi*2]
  00034	46		 inc	 esi
  00035	66 ff 44 45 a0	 inc	 WORD PTR _count$[ebp+eax*2]
  0003a	8b c2		 mov	 eax, edx
  0003c	3b f7		 cmp	 esi, edi
  0003e	72 f0		 jb	 SHORT $LL7@inflate_ta
$LN6@inflate_ta:

; 111  : 
; 112  :     /* bound code lengths, force root to be within code lengths */
; 113  :     root = *bits;

  00040	8b 5d 10	 mov	 ebx, DWORD PTR _bits$[ebp]
  00043	8d 45 ba	 lea	 eax, DWORD PTR _count$[ebp+26]

; 114  :     for (max = MAXBITS; max >= 1; max--)

  00046	be 0f 00 00 00	 mov	 esi, 15			; 0000000fH
  0004b	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0004d	0f 1f 00	 npad	 3
$LL10@inflate_ta:

; 115  :         if (count[max] != 0) break;

  00050	66 83 78 04 00	 cmp	 WORD PTR [eax+4], 0
  00055	75 38		 jne	 SHORT $LN78@inflate_ta
  00057	66 83 78 02 00	 cmp	 WORD PTR [eax+2], 0
  0005c	75 30		 jne	 SHORT $LN111@inflate_ta
  0005e	66 83 38 00	 cmp	 WORD PTR [eax], 0
  00062	75 25		 jne	 SHORT $LN112@inflate_ta
  00064	66 83 78 fe 00	 cmp	 WORD PTR [eax-2], 0
  00069	75 19		 jne	 SHORT $LN113@inflate_ta
  0006b	66 83 78 fc 00	 cmp	 WORD PTR [eax-4], 0
  00070	75 0d		 jne	 SHORT $LN114@inflate_ta

; 114  :     for (max = MAXBITS; max >= 1; max--)

  00072	83 ee 05	 sub	 esi, 5
  00075	83 e8 0a	 sub	 eax, 10			; 0000000aH
  00078	83 fe 01	 cmp	 esi, 1
  0007b	73 d3		 jae	 SHORT $LL10@inflate_ta

; 115  :         if (count[max] != 0) break;

  0007d	eb 10		 jmp	 SHORT $LN78@inflate_ta
$LN114@inflate_ta:
  0007f	83 ee 04	 sub	 esi, 4
  00082	eb 0b		 jmp	 SHORT $LN78@inflate_ta
$LN113@inflate_ta:
  00084	83 ee 03	 sub	 esi, 3
  00087	eb 06		 jmp	 SHORT $LN78@inflate_ta
$LN112@inflate_ta:
  00089	83 ee 02	 sub	 esi, 2
  0008c	eb 01		 jmp	 SHORT $LN78@inflate_ta
$LN111@inflate_ta:
  0008e	4e		 dec	 esi
$LN78@inflate_ta:

; 116  :     if (root > max) root = max;

  0008f	3b ce		 cmp	 ecx, esi
  00091	0f 47 ce	 cmova	 ecx, esi

; 117  :     if (max == 0) {                     /* no symbols to code at all */

  00094	85 f6		 test	 esi, esi
  00096	75 2a		 jne	 SHORT $LN37@inflate_ta

; 118  :         here.op = (unsigned char)64;    /* invalid code marker */
; 119  :         here.bits = (unsigned char)1;
; 120  :         here.val = (unsigned short)0;
; 121  :         *(*table)++ = here;             /* make a table to force an error */

  00098	8b 55 0c	 mov	 edx, DWORD PTR _table$[ebp]
  0009b	c7 45 08 40 01
	00 00		 mov	 DWORD PTR _here$[ebp], 320 ; 00000140H
  000a2	8b 45 08	 mov	 eax, DWORD PTR _here$[ebp]

; 302  :     *bits = root;
; 303  :     return 0;
; 304  : }

  000a5	5f		 pop	 edi
  000a6	8b 0a		 mov	 ecx, DWORD PTR [edx]
  000a8	5e		 pop	 esi
  000a9	89 01		 mov	 DWORD PTR [ecx], eax
  000ab	83 02 04	 add	 DWORD PTR [edx], 4
  000ae	8b 0a		 mov	 ecx, DWORD PTR [edx]
  000b0	89 01		 mov	 DWORD PTR [ecx], eax
  000b2	83 02 04	 add	 DWORD PTR [edx], 4
  000b5	33 c0		 xor	 eax, eax
  000b7	c7 03 01 00 00
	00		 mov	 DWORD PTR [ebx], 1
  000bd	5b		 pop	 ebx
  000be	8b e5		 mov	 esp, ebp
  000c0	5d		 pop	 ebp
  000c1	c3		 ret	 0
$LN37@inflate_ta:

; 122  :         *(*table)++ = here;
; 123  :         *bits = 1;
; 124  :         return 0;     /* no symbols, but wait for decoding to report error */
; 125  :     }
; 126  :     for (min = 1; min < max; min++)

  000c2	bb 01 00 00 00	 mov	 ebx, 1
  000c7	89 5d f0	 mov	 DWORD PTR _len$2$[ebp], ebx
  000ca	3b f3		 cmp	 esi, ebx
  000cc	76 12		 jbe	 SHORT $LN79@inflate_ta
  000ce	66 90		 npad	 2
$LL13@inflate_ta:

; 127  :         if (count[min] != 0) break;

  000d0	66 83 7c 5d a0
	00		 cmp	 WORD PTR _count$[ebp+ebx*2], 0
  000d6	75 05		 jne	 SHORT $LN134@inflate_ta

; 122  :         *(*table)++ = here;
; 123  :         *bits = 1;
; 124  :         return 0;     /* no symbols, but wait for decoding to report error */
; 125  :     }
; 126  :     for (min = 1; min < max; min++)

  000d8	43		 inc	 ebx
  000d9	3b de		 cmp	 ebx, esi
  000db	72 f3		 jb	 SHORT $LL13@inflate_ta
$LN134@inflate_ta:
  000dd	89 5d f0	 mov	 DWORD PTR _len$2$[ebp], ebx
$LN79@inflate_ta:

; 128  :     if (root < min) root = min;

  000e0	3b cb		 cmp	 ecx, ebx

; 129  : 
; 130  :     /* check for an over-subscribed or incomplete set of lengths */
; 131  :     left = 1;

  000e2	ba 01 00 00 00	 mov	 edx, 1
  000e7	0f 42 cb	 cmovb	 ecx, ebx
  000ea	89 4d ec	 mov	 DWORD PTR _root$3$[ebp], ecx

; 132  :     for (len = 1; len <= MAXBITS; len++) {

  000ed	8b ca		 mov	 ecx, edx
  000ef	90		 npad	 1
$LL16@inflate_ta:

; 133  :         left <<= 1;
; 134  :         left -= count[len];

  000f0	0f b7 44 4d a0	 movzx	 eax, WORD PTR _count$[ebp+ecx*2]
  000f5	03 d2		 add	 edx, edx
  000f7	2b d0		 sub	 edx, eax

; 135  :         if (left < 0) return -1;        /* over-subscribed */

  000f9	0f 88 05 03 00
	00		 js	 $LN80@inflate_ta

; 132  :     for (len = 1; len <= MAXBITS; len++) {

  000ff	41		 inc	 ecx
  00100	83 f9 0f	 cmp	 ecx, 15			; 0000000fH
  00103	76 eb		 jbe	 SHORT $LL16@inflate_ta

; 136  :     }
; 137  :     if (left > 0 && (type == CODES || max != 1))

  00105	85 d2		 test	 edx, edx
  00107	7e 13		 jle	 SHORT $LN41@inflate_ta
  00109	83 7d d4 00	 cmp	 DWORD PTR _type$1$[ebp], 0
  0010d	0f 84 f1 02 00
	00		 je	 $LN80@inflate_ta
  00113	83 fe 01	 cmp	 esi, 1
  00116	0f 85 e8 02 00
	00		 jne	 $LN80@inflate_ta
$LN41@inflate_ta:

; 138  :         return -1;                      /* incomplete set */
; 139  : 
; 140  :     /* generate offsets into symbol table for each length for sorting */
; 141  :     offs[1] = 0;

  0011c	33 c0		 xor	 eax, eax

; 142  :     for (len = 1; len < MAXBITS; len++)

  0011e	b9 02 00 00 00	 mov	 ecx, 2
  00123	66 89 45 82	 mov	 WORD PTR _offs$[ebp+2], ax
  00127	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL19@inflate_ta:

; 143  :         offs[len + 1] = offs[len] + count[len];

  00130	66 8b 44 0d a0	 mov	 ax, WORD PTR _count$[ebp+ecx]
  00135	66 03 44 0d 80	 add	 ax, WORD PTR _offs$[ebp+ecx]
  0013a	66 89 44 0d 82	 mov	 WORD PTR _offs$[ebp+ecx+2], ax
  0013f	83 c1 02	 add	 ecx, 2
  00142	83 f9 1e	 cmp	 ecx, 30			; 0000001eH
  00145	72 e9		 jb	 SHORT $LL19@inflate_ta

; 144  : 
; 145  :     /* sort symbols by length, by symbol order within each length */
; 146  :     for (sym = 0; sym < codes; sym++)

  00147	8b 55 14	 mov	 edx, DWORD PTR _work$[ebp]
  0014a	33 c9		 xor	 ecx, ecx
  0014c	85 ff		 test	 edi, edi
  0014e	74 26		 je	 SHORT $LN21@inflate_ta
  00150	8b 5d dc	 mov	 ebx, DWORD PTR _lens$1$[ebp]
$LL22@inflate_ta:

; 147  :         if (lens[sym] != 0) work[offs[lens[sym]]++] = (unsigned short)sym;

  00153	0f b7 04 4b	 movzx	 eax, WORD PTR [ebx+ecx*2]
  00157	66 85 c0	 test	 ax, ax
  0015a	74 12		 je	 SHORT $LN20@inflate_ta
  0015c	0f b7 44 45 80	 movzx	 eax, WORD PTR _offs$[ebp+eax*2]
  00161	66 89 0c 42	 mov	 WORD PTR [edx+eax*2], cx
  00165	0f b7 04 4b	 movzx	 eax, WORD PTR [ebx+ecx*2]
  00169	66 ff 44 45 80	 inc	 WORD PTR _offs$[ebp+eax*2]
$LN20@inflate_ta:

; 144  : 
; 145  :     /* sort symbols by length, by symbol order within each length */
; 146  :     for (sym = 0; sym < codes; sym++)

  0016e	41		 inc	 ecx
  0016f	3b cf		 cmp	 ecx, edi
  00171	72 e0		 jb	 SHORT $LL22@inflate_ta
  00173	8b 5d f0	 mov	 ebx, DWORD PTR _len$2$[ebp]
$LN21@inflate_ta:

; 148  : 
; 149  :     /*
; 150  :        Create and fill in decoding tables.  In this loop, the table being
; 151  :        filled is at next and has curr index bits.  The code being used is huff
; 152  :        with length len.  That code is converted to an index by dropping drop
; 153  :        bits off of the bottom.  For codes where len is less than drop + curr,
; 154  :        those top drop + curr - len bits are incremented through all values to
; 155  :        fill the table with replicated entries.
; 156  : 
; 157  :        root is the number of index bits for the root table.  When len exceeds
; 158  :        root, sub-tables are created pointed to by the root entry with an index
; 159  :        of the low root bits of huff.  This is saved in low to check for when a
; 160  :        new sub-table should be started.  drop is zero when the root table is
; 161  :        being filled, and drop is root when sub-tables are being filled.
; 162  : 
; 163  :        When a new sub-table is needed, it is necessary to look ahead in the
; 164  :        code lengths to determine what size sub-table is needed.  The length
; 165  :        counts are used for this, and so count[] is decremented as codes are
; 166  :        entered in the tables.
; 167  : 
; 168  :        used keeps track of how many table entries have been allocated from the
; 169  :        provided *table space.  It is checked for LENS and DIST tables against
; 170  :        the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in
; 171  :        the initial root table size constants.  See the comments in inftrees.h
; 172  :        for more information.
; 173  : 
; 174  :        sym increments through all symbols, and the loop terminates when
; 175  :        all codes of length max, i.e. all codes, have been processed.  This
; 176  :        routine permits incomplete codes, so another loop after this one fills
; 177  :        in the rest of the decoding tables with invalid code markers.
; 178  :      */
; 179  : 
; 180  :     /* set up for code type */
; 181  :     switch (type) {

  00176	8b 7d d4	 mov	 edi, DWORD PTR _type$1$[ebp]
  00179	8b c7		 mov	 eax, edi
  0017b	83 e8 00	 sub	 eax, 0
  0017e	74 32		 je	 SHORT $LN44@inflate_ta
  00180	83 e8 01	 sub	 eax, 1
  00183	74 15		 je	 SHORT $LN45@inflate_ta

; 191  :     default:    /* DISTS */
; 192  :         base = dbase;
; 193  :         extra = dext;
; 194  :         match = 0;

  00185	33 c0		 xor	 eax, eax
  00187	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _base$1$[ebp], OFFSET ?dbase@?1??inflate_table@@9@9
  0018e	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _extra$1$[ebp], OFFSET ?dext@?1??inflate_table@@9@9
  00195	89 45 e8	 mov	 DWORD PTR _match$1$[ebp], eax
  00198	eb 25		 jmp	 SHORT $LN23@inflate_ta
$LN45@inflate_ta:

; 185  :         break;
; 186  :     case LENS:
; 187  :         base = lbase;
; 188  :         extra = lext;
; 189  :         match = 257;

  0019a	b8 01 01 00 00	 mov	 eax, 257		; 00000101H
  0019f	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _base$1$[ebp], OFFSET ?lbase@?1??inflate_table@@9@9
  001a6	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _extra$1$[ebp], OFFSET ?lext@?1??inflate_table@@9@9
  001ad	89 45 e8	 mov	 DWORD PTR _match$1$[ebp], eax

; 190  :         break;

  001b0	eb 0d		 jmp	 SHORT $LN23@inflate_ta
$LN44@inflate_ta:

; 182  :     case CODES:
; 183  :         base = extra = work;    /* dummy value--not used */

  001b2	89 55 e4	 mov	 DWORD PTR _extra$1$[ebp], edx
  001b5	89 55 e0	 mov	 DWORD PTR _base$1$[ebp], edx

; 184  :         match = 20;

  001b8	c7 45 e8 14 00
	00 00		 mov	 DWORD PTR _match$1$[ebp], 20 ; 00000014H
$LN23@inflate_ta:

; 195  :     }
; 196  : 
; 197  :     /* initialize state for loop */
; 198  :     huff = 0;                   /* starting code */
; 199  :     sym = 0;                    /* starting code symbol */
; 200  :     len = min;                  /* starting code length */
; 201  :     next = *table;              /* current table to fill in */

  001bf	8b 4d 0c	 mov	 ecx, DWORD PTR _table$[ebp]
  001c2	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _huff$1$[ebp], 0

; 202  :     curr = root;                /* current table index bits */
; 203  :     drop = 0;                   /* current bits to drop from code for index */

  001c9	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _drop$1$[ebp], 0

; 204  :     low = (unsigned)(-1);       /* trigger new sub-table when len > root */

  001d0	c7 45 cc ff ff
	ff ff		 mov	 DWORD PTR _low$1$[ebp], -1
  001d7	8b 01		 mov	 eax, DWORD PTR [ecx]

; 205  :     used = 1U << root;          /* use root table entries */

  001d9	8b 4d ec	 mov	 ecx, DWORD PTR _root$3$[ebp]
  001dc	89 45 f8	 mov	 DWORD PTR _next$1$[ebp], eax
  001df	b8 01 00 00 00	 mov	 eax, 1
  001e4	d3 e0		 shl	 eax, cl
  001e6	89 45 d8	 mov	 DWORD PTR tv1649[ebp], eax
  001e9	89 45 d0	 mov	 DWORD PTR _used$1$[ebp], eax

; 206  :     mask = used - 1;            /* mask for comparing low */

  001ec	8d 48 ff	 lea	 ecx, DWORD PTR [eax-1]
  001ef	89 4d c4	 mov	 DWORD PTR _mask$1$[ebp], ecx

; 207  : 
; 208  :     /* check available table space */
; 209  :     if ((type == LENS && used > ENOUGH_LENS) ||

  001f2	83 ff 01	 cmp	 edi, 1
  001f5	75 09		 jne	 SHORT $LN49@inflate_ta
  001f7	3d 54 03 00 00	 cmp	 eax, 852		; 00000354H
  001fc	77 0e		 ja	 SHORT $LN48@inflate_ta
  001fe	eb 20		 jmp	 SHORT $LL25@inflate_ta
$LN49@inflate_ta:
  00200	83 ff 02	 cmp	 edi, 2
  00203	75 1b		 jne	 SHORT $LL25@inflate_ta
  00205	3d 50 02 00 00	 cmp	 eax, 592		; 00000250H
  0020a	76 14		 jbe	 SHORT $LL25@inflate_ta
$LN48@inflate_ta:

; 302  :     *bits = root;
; 303  :     return 0;
; 304  : }

  0020c	5f		 pop	 edi
  0020d	5e		 pop	 esi
  0020e	b8 01 00 00 00	 mov	 eax, 1
  00213	5b		 pop	 ebx
  00214	8b e5		 mov	 esp, ebp
  00216	5d		 pop	 ebp
  00217	c3		 ret	 0
$LL136@inflate_ta:

; 255  :         }
; 256  : 
; 257  :         /* create new sub-table if needed */
; 258  :         if (len > root && (huff & mask) != low) {

  00218	8b 55 14	 mov	 edx, DWORD PTR _work$[ebp]
  0021b	0f 1f 44 00 00	 npad	 5
$LL25@inflate_ta:

; 210  :         (type == DISTS && used > ENOUGH_DISTS))
; 211  :         return 1;
; 212  : 
; 213  :     /* process all codes and make table entries */
; 214  :     for (;;) {
; 215  :         /* create table entry */
; 216  :         here.bits = (unsigned char)(len - drop);
; 217  :         if (work[sym] + 1U < match) {

  00220	0f b7 12	 movzx	 edx, WORD PTR [edx]
  00223	8a c3		 mov	 al, bl
  00225	2a 45 fc	 sub	 al, BYTE PTR _drop$1$[ebp]
  00228	8b ca		 mov	 ecx, edx
  0022a	8b 7d e8	 mov	 edi, DWORD PTR _match$1$[ebp]
  0022d	88 45 09	 mov	 BYTE PTR _here$[ebp+1], al
  00230	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  00233	3b c7		 cmp	 eax, edi
  00235	73 0a		 jae	 SHORT $LN50@inflate_ta

; 218  :             here.op = (unsigned char)0;

  00237	c6 45 08 00	 mov	 BYTE PTR _here$[ebp], 0

; 219  :             here.val = work[sym];

  0023b	66 89 55 0a	 mov	 WORD PTR _here$[ebp+2], dx

; 220  :         }

  0023f	eb 22		 jmp	 SHORT $LN53@inflate_ta
$LN50@inflate_ta:

; 221  :         else if (work[sym] >= match) {

  00241	3b cf		 cmp	 ecx, edi
  00243	72 14		 jb	 SHORT $LN52@inflate_ta

; 222  :             here.op = (unsigned char)(extra[work[sym] - match]);

  00245	8b 45 e4	 mov	 eax, DWORD PTR _extra$1$[ebp]
  00248	2b cf		 sub	 ecx, edi
  0024a	8a 04 48	 mov	 al, BYTE PTR [eax+ecx*2]
  0024d	88 45 08	 mov	 BYTE PTR _here$[ebp], al

; 223  :             here.val = base[work[sym] - match];

  00250	8b 45 e0	 mov	 eax, DWORD PTR _base$1$[ebp]
  00253	66 8b 04 48	 mov	 ax, WORD PTR [eax+ecx*2]

; 224  :         }

  00257	eb 06		 jmp	 SHORT $LN142@inflate_ta
$LN52@inflate_ta:

; 225  :         else {
; 226  :             here.op = (unsigned char)(32 + 64);         /* end of block */

  00259	c6 45 08 60	 mov	 BYTE PTR _here$[ebp], 96 ; 00000060H

; 227  :             here.val = 0;

  0025d	33 c0		 xor	 eax, eax
$LN142@inflate_ta:
  0025f	66 89 45 0a	 mov	 WORD PTR _here$[ebp+2], ax
$LN53@inflate_ta:

; 228  :         }
; 229  : 
; 230  :         /* replicate for those indices with low len bits equal to huff */
; 231  :         incr = 1U << (len - drop);
; 232  :         fill = 1U << curr;

  00263	8b 55 d8	 mov	 edx, DWORD PTR tv1649[ebp]
  00266	8b cb		 mov	 ecx, ebx
  00268	2b 4d fc	 sub	 ecx, DWORD PTR _drop$1$[ebp]
  0026b	bf 01 00 00 00	 mov	 edi, 1
  00270	d3 e7		 shl	 edi, cl
  00272	8b 4d fc	 mov	 ecx, DWORD PTR _drop$1$[ebp]

; 233  :         min = fill;                 /* save offset to next table */

  00275	89 55 c0	 mov	 DWORD PTR _min$2$[ebp], edx
  00278	8d 04 bd 00 00
	00 00		 lea	 eax, DWORD PTR [edi*4]
  0027f	89 45 c8	 mov	 DWORD PTR tv1641[ebp], eax
  00282	8b 45 f4	 mov	 eax, DWORD PTR _huff$1$[ebp]
  00285	d3 e8		 shr	 eax, cl
  00287	8b 4d f8	 mov	 ecx, DWORD PTR _next$1$[ebp]
  0028a	03 c2		 add	 eax, edx
  0028c	8d 0c 81	 lea	 ecx, DWORD PTR [ecx+eax*4]
  0028f	8b 45 08	 mov	 eax, DWORD PTR _here$[ebp]
$LL30@inflate_ta:

; 234  :         do {
; 235  :             fill -= incr;

  00292	2b 4d c8	 sub	 ecx, DWORD PTR tv1641[ebp]

; 236  :             next[(huff >> drop) + fill] = here;

  00295	89 01		 mov	 DWORD PTR [ecx], eax
  00297	2b d7		 sub	 edx, edi

; 237  :         } while (fill != 0);

  00299	75 f7		 jne	 SHORT $LL30@inflate_ta

; 238  : 
; 239  :         /* backwards increment the len-bit code huff */
; 240  :         incr = 1U << (len - 1);

  0029b	8d 4b ff	 lea	 ecx, DWORD PTR [ebx-1]
  0029e	ba 01 00 00 00	 mov	 edx, 1
  002a3	d3 e2		 shl	 edx, cl

; 241  :         while (huff & incr)

  002a5	8b 4d f4	 mov	 ecx, DWORD PTR _huff$1$[ebp]
  002a8	85 d1		 test	 edx, ecx
  002aa	74 0a		 je	 SHORT $LN32@inflate_ta
  002ac	0f 1f 40 00	 npad	 4
$LL31@inflate_ta:

; 242  :             incr >>= 1;

  002b0	d1 ea		 shr	 edx, 1
  002b2	85 d1		 test	 edx, ecx
  002b4	75 fa		 jne	 SHORT $LL31@inflate_ta
$LN32@inflate_ta:

; 243  :         if (incr != 0) {

  002b6	85 d2		 test	 edx, edx
  002b8	74 0e		 je	 SHORT $LN54@inflate_ta

; 244  :             huff &= incr - 1;

  002ba	8d 42 ff	 lea	 eax, DWORD PTR [edx-1]
  002bd	23 c1		 and	 eax, ecx

; 245  :             huff += incr;

  002bf	03 c2		 add	 eax, edx
  002c1	8b f8		 mov	 edi, eax
  002c3	89 45 f4	 mov	 DWORD PTR _huff$1$[ebp], eax

; 246  :         }

  002c6	eb 05		 jmp	 SHORT $LN55@inflate_ta
$LN54@inflate_ta:

; 247  :         else
; 248  :             huff = 0;

  002c8	33 ff		 xor	 edi, edi
  002ca	89 7d f4	 mov	 DWORD PTR _huff$1$[ebp], edi
$LN55@inflate_ta:

; 249  : 
; 250  :         /* go to next symbol, update count, len */
; 251  :         sym++;

  002cd	8b 45 14	 mov	 eax, DWORD PTR _work$[ebp]

; 252  :         if (--(count[len]) == 0) {

  002d0	b9 ff ff 00 00	 mov	 ecx, 65535		; 0000ffffH
  002d5	83 c0 02	 add	 eax, 2
  002d8	66 01 4c 5d a0	 add	 WORD PTR _count$[ebp+ebx*2], cx
  002dd	89 45 14	 mov	 DWORD PTR _work$[ebp], eax
  002e0	75 15		 jne	 SHORT $LN56@inflate_ta

; 253  :             if (len == max) break;

  002e2	3b de		 cmp	 ebx, esi
  002e4	0f 84 e1 00 00
	00		 je	 $LN82@inflate_ta

; 254  :             len = lens[work[sym]];

  002ea	0f b7 00	 movzx	 eax, WORD PTR [eax]
  002ed	8b 4d dc	 mov	 ecx, DWORD PTR _lens$1$[ebp]
  002f0	0f b7 1c 41	 movzx	 ebx, WORD PTR [ecx+eax*2]
  002f4	89 5d f0	 mov	 DWORD PTR _len$2$[ebp], ebx
$LN56@inflate_ta:

; 255  :         }
; 256  : 
; 257  :         /* create new sub-table if needed */
; 258  :         if (len > root && (huff & mask) != low) {

  002f7	8b 4d ec	 mov	 ecx, DWORD PTR _root$3$[ebp]
  002fa	8b 55 14	 mov	 edx, DWORD PTR _work$[ebp]
  002fd	3b d9		 cmp	 ebx, ecx
  002ff	0f 86 1b ff ff
	ff		 jbe	 $LL25@inflate_ta
  00305	8b 55 c4	 mov	 edx, DWORD PTR _mask$1$[ebp]
  00308	23 d7		 and	 edx, edi
  0030a	89 55 c8	 mov	 DWORD PTR tv1648[ebp], edx
  0030d	3b 55 cc	 cmp	 edx, DWORD PTR _low$1$[ebp]
  00310	0f 84 02 ff ff
	ff		 je	 $LL136@inflate_ta

; 259  :             /* if first time, transition to sub-tables */
; 260  :             if (drop == 0)

  00316	8b 45 fc	 mov	 eax, DWORD PTR _drop$1$[ebp]
  00319	85 c0		 test	 eax, eax

; 261  :                 drop = root;
; 262  : 
; 263  :             /* increment past last table */
; 264  :             next += min;            /* here min is 1 << curr */

  0031b	8b 7d f8	 mov	 edi, DWORD PTR _next$1$[ebp]
  0031e	0f 44 c1	 cmove	 eax, ecx
  00321	8b 4d c0	 mov	 ecx, DWORD PTR _min$2$[ebp]
  00324	89 45 fc	 mov	 DWORD PTR _drop$1$[ebp], eax
  00327	8d 3c 8f	 lea	 edi, DWORD PTR [edi+ecx*4]

; 265  : 
; 266  :             /* determine length of next table */
; 267  :             curr = len - drop;

  0032a	8b cb		 mov	 ecx, ebx
  0032c	2b c8		 sub	 ecx, eax
  0032e	89 7d f8	 mov	 DWORD PTR _next$1$[ebp], edi

; 268  :             left = (int)(1 << curr);

  00331	b8 01 00 00 00	 mov	 eax, 1
  00336	89 4d d8	 mov	 DWORD PTR _curr$1$[ebp], ecx
  00339	d3 e0		 shl	 eax, cl

; 269  :             while (curr + drop < max) {

  0033b	3b de		 cmp	 ebx, esi
  0033d	73 31		 jae	 SHORT $LN81@inflate_ta

; 261  :                 drop = root;
; 262  : 
; 263  :             /* increment past last table */
; 264  :             next += min;            /* here min is 1 << curr */

  0033f	8d 55 a0	 lea	 edx, DWORD PTR _count$[ebp]
  00342	8b fb		 mov	 edi, ebx
  00344	8d 14 5a	 lea	 edx, DWORD PTR [edx+ebx*2]
  00347	8b d9		 mov	 ebx, ecx
  00349	0f 1f 80 00 00
	00 00		 npad	 7
$LL33@inflate_ta:

; 270  :                 left -= count[curr + drop];

  00350	0f b7 0a	 movzx	 ecx, WORD PTR [edx]
  00353	2b c1		 sub	 eax, ecx

; 271  :                 if (left <= 0) break;

  00355	85 c0		 test	 eax, eax
  00357	7e 0b		 jle	 SHORT $LN135@inflate_ta

; 272  :                 curr++;

  00359	47		 inc	 edi
  0035a	43		 inc	 ebx
  0035b	83 c2 02	 add	 edx, 2

; 273  :                 left <<= 1;

  0035e	03 c0		 add	 eax, eax
  00360	3b fe		 cmp	 edi, esi
  00362	72 ec		 jb	 SHORT $LL33@inflate_ta
$LN135@inflate_ta:
  00364	8b 55 c8	 mov	 edx, DWORD PTR tv1648[ebp]
  00367	89 5d d8	 mov	 DWORD PTR _curr$1$[ebp], ebx
  0036a	8b 5d f0	 mov	 ebx, DWORD PTR _len$2$[ebp]
  0036d	8b 4d d8	 mov	 ecx, DWORD PTR _curr$1$[ebp]
$LN81@inflate_ta:

; 274  :             }
; 275  : 
; 276  :             /* check for enough space */
; 277  :             used += 1U << curr;

  00370	8b 45 d0	 mov	 eax, DWORD PTR _used$1$[ebp]
  00373	bf 01 00 00 00	 mov	 edi, 1
  00378	d3 e7		 shl	 edi, cl
  0037a	03 c7		 add	 eax, edi
  0037c	89 7d d8	 mov	 DWORD PTR tv1649[ebp], edi

; 278  :             if ((type == LENS && used > ENOUGH_LENS) ||

  0037f	8b 7d d4	 mov	 edi, DWORD PTR _type$1$[ebp]
  00382	89 45 d0	 mov	 DWORD PTR _used$1$[ebp], eax
  00385	83 ff 01	 cmp	 edi, 1
  00388	75 07		 jne	 SHORT $LN63@inflate_ta
  0038a	3d 54 03 00 00	 cmp	 eax, 852		; 00000354H
  0038f	eb 0a		 jmp	 SHORT $LN143@inflate_ta
$LN63@inflate_ta:
  00391	83 ff 02	 cmp	 edi, 2
  00394	75 0b		 jne	 SHORT $LN61@inflate_ta
  00396	3d 50 02 00 00	 cmp	 eax, 592		; 00000250H
$LN143@inflate_ta:
  0039b	0f 87 6b fe ff
	ff		 ja	 $LN48@inflate_ta
$LN61@inflate_ta:

; 279  :                 (type == DISTS && used > ENOUGH_DISTS))
; 280  :                 return 1;
; 281  : 
; 282  :             /* point entry in root table to sub-table */
; 283  :             low = huff & mask;

  003a1	8b fa		 mov	 edi, edx

; 284  :             (*table)[low].op = (unsigned char)curr;

  003a3	8b 55 0c	 mov	 edx, DWORD PTR _table$[ebp]
  003a6	89 7d cc	 mov	 DWORD PTR _low$1$[ebp], edi
  003a9	8b 02		 mov	 eax, DWORD PTR [edx]
  003ab	88 0c b8	 mov	 BYTE PTR [eax+edi*4], cl

; 285  :             (*table)[low].bits = (unsigned char)root;

  003ae	8b 02		 mov	 eax, DWORD PTR [edx]
  003b0	8b 4d ec	 mov	 ecx, DWORD PTR _root$3$[ebp]
  003b3	88 4c b8 01	 mov	 BYTE PTR [eax+edi*4+1], cl

; 286  :             (*table)[low].val = (unsigned short)(next - *table);

  003b7	8b 0a		 mov	 ecx, DWORD PTR [edx]
  003b9	8b 45 f8	 mov	 eax, DWORD PTR _next$1$[ebp]
  003bc	2b c1		 sub	 eax, ecx
  003be	c1 f8 02	 sar	 eax, 2
  003c1	66 89 44 b9 02	 mov	 WORD PTR [ecx+edi*4+2], ax

; 287  :         }
; 288  :     }

  003c6	e9 4d fe ff ff	 jmp	 $LL136@inflate_ta
$LN82@inflate_ta:

; 289  : 
; 290  :     /* fill in remaining table entry if code is incomplete (guaranteed to have
; 291  :        at most one remaining entry, since if the code is incomplete, the
; 292  :        maximum code length that was allowed to get this far is one bit) */
; 293  :     if (huff != 0) {

  003cb	85 ff		 test	 edi, edi
  003cd	74 19		 je	 SHORT $LN64@inflate_ta

; 294  :         here.op = (unsigned char)64;            /* invalid code marker */
; 295  :         here.bits = (unsigned char)(len - drop);

  003cf	2a 5d fc	 sub	 bl, BYTE PTR _drop$1$[ebp]

; 296  :         here.val = (unsigned short)0;

  003d2	33 c0		 xor	 eax, eax

; 297  :         next[huff] = here;

  003d4	8b 4d f8	 mov	 ecx, DWORD PTR _next$1$[ebp]
  003d7	c6 45 08 40	 mov	 BYTE PTR _here$[ebp], 64 ; 00000040H
  003db	88 5d 09	 mov	 BYTE PTR _here$[ebp+1], bl
  003de	66 89 45 0a	 mov	 WORD PTR _here$[ebp+2], ax
  003e2	8b 45 08	 mov	 eax, DWORD PTR _here$[ebp]
  003e5	89 04 b9	 mov	 DWORD PTR [ecx+edi*4], eax
$LN64@inflate_ta:

; 298  :     }
; 299  : 
; 300  :     /* set return parameters */
; 301  :     *table += used;

  003e8	8b 4d 0c	 mov	 ecx, DWORD PTR _table$[ebp]
  003eb	8b 45 d0	 mov	 eax, DWORD PTR _used$1$[ebp]
  003ee	c1 e0 02	 shl	 eax, 2

; 302  :     *bits = root;
; 303  :     return 0;
; 304  : }

  003f1	5f		 pop	 edi
  003f2	01 01		 add	 DWORD PTR [ecx], eax
  003f4	8b 4d 10	 mov	 ecx, DWORD PTR _bits$[ebp]
  003f7	8b 45 ec	 mov	 eax, DWORD PTR _root$3$[ebp]
  003fa	5e		 pop	 esi
  003fb	5b		 pop	 ebx
  003fc	89 01		 mov	 DWORD PTR [ecx], eax
  003fe	33 c0		 xor	 eax, eax
  00400	8b e5		 mov	 esp, ebp
  00402	5d		 pop	 ebp
  00403	c3		 ret	 0
$LN80@inflate_ta:
  00404	5f		 pop	 edi
  00405	5e		 pop	 esi
  00406	83 c8 ff	 or	 eax, -1
  00409	5b		 pop	 ebx
  0040a	8b e5		 mov	 esp, ebp
  0040c	5d		 pop	 ebp
  0040d	c3		 ret	 0
_inflate_table ENDP
_TEXT	ENDS
END
